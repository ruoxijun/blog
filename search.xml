<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/2023/04/29/java/springboot/mybatisplus/"/>
      <url>/2023/04/29/java/springboot/mybatisplus/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h1><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><blockquote><p>Lambda 是 JDK8 中的一个语法糖，它课可以对某些匿名内部类的写法进行简化。</p><p>任何接口只包含唯一一个抽象方法，那么它就是一个函数式接口，则可以使用 Lambda 表达式代替。</p></blockquote><ul><li>基本格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">([参数列表]) -&gt; &#123;方法体&#125;</span><br></pre></td></tr></table></figure><ul><li>使用实例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名内部类写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;new Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda 写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt; System.out.println(<span class="string">&quot;Lambda&quot;</span>)).start();</span><br></pre></td></tr></table></figure><h3 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream 流"></a>Stream 流</h3><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><h2 id="MyBatis-Plus-1"><a href="#MyBatis-Plus-1" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h4><p><a href="https://www.baomidou.com/">MyBatis-Plus官网：https://www.baomidou.com/</a></p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>配置 mapper 扫描</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;top/ruoxijun/mapper&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_user?serverTimezone=GMT%2B8&amp;characterEncoding=utf8&amp;useSSL=false&amp;useUnicode=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 配置全局 id 自增</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span> <span class="comment"># 全局逻辑删除的实体字段名</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 开启驼峰命名</span></span><br><span class="line">    <span class="attr">auto-mapping-behavior:</span> <span class="string">full</span> <span class="comment"># 自动映射字段，包括复杂结果集</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment"># 开启控制台 SQL 日志打印</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><ul><li>自动填充配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, () -&gt; LocalDateTime.now(), LocalDateTime.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MyBatis-Plus 插件配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;scan.your.mapper.package&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">// 乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置</span></span><br><span class="line"><span class="comment">     * MybatisConfiguration#useDeprecatedExecutor = false </span></span><br><span class="line"><span class="comment">     * 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ConfigurationCustomizer <span class="title function_">configurationCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configuration -&gt; configuration.setUseDeprecatedExecutor(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><h4 id="表名"><a href="#表名" class="headerlink" title="表名"></a>表名</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableName(value=&quot;sys_user&quot;, resultMap=&quot;user&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(value=&quot;id&quot;, type=&quot;IdType.AUTO&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(</span></span><br><span class="line"><span class="meta">  value = &quot;name&quot;, </span></span><br><span class="line"><span class="meta">  exist = true, // 该字段表中是否存在</span></span><br><span class="line"><span class="meta">  fill = &quot;INSERT_UPDATE&quot; // 插入和更新时填充字段（CURRENT_TIMESTAMP）</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br></pre></td></tr></table></figure><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnumValue</span></span><br></pre></td></tr></table></figure><h4 id="逻辑处理"><a href="#逻辑处理" class="headerlink" title="逻辑处理"></a>逻辑处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic(value=&quot;1&quot;, delval=&quot;0&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="默认排序"><a href="#默认排序" class="headerlink" title="默认排序"></a>默认排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OrderBy(isDesc=true)</span></span><br></pre></td></tr></table></figure><h2 id="Service-接口"><a href="#Service-接口" class="headerlink" title="Service 接口"></a>Service 接口</h2><h3 id="save-插入"><a href="#save-插入" class="headerlink" title="save 插入"></a>save 插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> save</span><br><span class="line"><span class="type">boolean</span> saveBatch</span><br><span class="line"><span class="type">boolean</span> saveOrUpdate</span><br><span class="line"><span class="type">boolean</span> saveOrUpdateBatch</span><br></pre></td></tr></table></figure><h3 id="remove-删除"><a href="#remove-删除" class="headerlink" title="remove 删除"></a>remove 删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> remove</span><br><span class="line"><span class="type">boolean</span> removeById</span><br><span class="line"><span class="type">boolean</span> removeByMap</span><br><span class="line"><span class="type">boolean</span> removeByIds</span><br></pre></td></tr></table></figure><h3 id="update-更新"><a href="#update-更新" class="headerlink" title="update 更新"></a>update 更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> update</span><br><span class="line"><span class="type">boolean</span> updateById</span><br><span class="line"><span class="type">boolean</span> updateBatchById</span><br></pre></td></tr></table></figure><h3 id="get-查询"><a href="#get-查询" class="headerlink" title="get 查询"></a>get 查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T getById</span><br><span class="line">T getOne</span><br><span class="line">Map&lt;String, Object&gt; getMap</span><br><span class="line">&lt;V&gt; V getObj</span><br></pre></td></tr></table></figure><h3 id="list-查询"><a href="#list-查询" class="headerlink" title="list 查询"></a>list 查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;T&gt; list</span><br><span class="line">Collection&lt;T&gt; listByIds</span><br><span class="line">Collection&lt;T&gt; listByMap</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps</span><br><span class="line">List&lt;Object&gt; listObjs</span><br></pre></td></tr></table></figure><h3 id="page-分页"><a href="#page-分页" class="headerlink" title="page 分页"></a>page 分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IPage&lt;T&gt; page</span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps</span><br></pre></td></tr></table></figure><h3 id="查询记录数"><a href="#查询记录数" class="headerlink" title="查询记录数"></a>查询记录数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> count</span><br></pre></td></tr></table></figure><h3 id="Chain-链式操作"><a href="#Chain-链式操作" class="headerlink" title="Chain 链式操作"></a>Chain 链式操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式查询 普通</span></span><br><span class="line">QueryChainWrapper&lt;T&gt; <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 链式查询 lambda 式</span></span><br><span class="line">LambdaQueryChainWrapper&lt;T&gt; <span class="title function_">lambdaQuery</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式更改 普通</span></span><br><span class="line">UpdateChainWrapper&lt;T&gt; <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 链式更改 lambda 式</span></span><br><span class="line">LambdaUpdateChainWrapper&lt;T&gt; <span class="title function_">lambdaUpdate</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="Mapper-接口"><a href="#Mapper-接口" class="headerlink" title="Mapper 接口"></a>Mapper 接口</h2><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>; <span class="comment">// 插入一条记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除记录</span></span><br><span class="line"><span class="type">int</span> delete</span><br><span class="line"><span class="type">int</span> deleteBatchIds</span><br><span class="line"><span class="type">int</span> deleteById</span><br><span class="line"><span class="type">int</span> deleteByMap</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新记录</span></span><br><span class="line"><span class="type">int</span> update</span><br><span class="line"><span class="type">int</span> updateById</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">T selectById</span><br><span class="line">T selectOne</span><br><span class="line">List&lt;T&gt; selectBatchIds</span><br><span class="line">List&lt;T&gt; selectList</span><br><span class="line">List&lt;T&gt; selectByMap</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">List&lt;Object&gt; selectObjs</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询记录</span></span><br><span class="line">IPage&lt;T&gt; selectPage</span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage</span><br><span class="line"></span><br><span class="line">Integer selectCount</span><br></pre></td></tr></table></figure><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><h3 id="AbstractWrapper"><a href="#AbstractWrapper" class="headerlink" title="AbstractWrapper"></a>AbstractWrapper</h3><blockquote><p>QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类</p></blockquote><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">allEq</span><br><span class="line">eq</span><br><span class="line">ne <span class="comment">// &lt;&gt;</span></span><br><span class="line">gt <span class="comment">// &gt;</span></span><br><span class="line">ge <span class="comment">// &gt;=</span></span><br><span class="line">lt <span class="comment">// &lt;</span></span><br><span class="line">le <span class="comment">// &lt;=</span></span><br><span class="line">between</span><br><span class="line">notBetween</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">and</span><br><span class="line"></span><br><span class="line">isNull</span><br><span class="line">isNotNull</span><br><span class="line">in</span><br><span class="line">notIn</span><br><span class="line">inSql</span><br><span class="line">notInSql</span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">like <span class="comment">// &#x27;%val%&#x27;</span></span><br><span class="line">notLike</span><br><span class="line">likeLeft</span><br><span class="line">notLikeLeft</span><br><span class="line">likeRight</span><br><span class="line">notLikeRight</span><br></pre></td></tr></table></figure><h4 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groupBy</span><br><span class="line">orderByAsc</span><br><span class="line">orderByDesc</span><br><span class="line">orderBy</span><br><span class="line">having</span><br></pre></td></tr></table></figure><h4 id="sql-处理"><a href="#sql-处理" class="headerlink" title="sql 处理"></a>sql 处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func</span><br><span class="line">nested</span><br><span class="line">apply</span><br><span class="line">last</span><br><span class="line">exists</span><br><span class="line">notExists</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatisplus </tag>
            
            <tag> lambda </tag>
            
            <tag> stream流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2023/04/29/java/springboot/SpringSecurity/"/>
      <url>/2023/04/29/java/springboot/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h2><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><ul><li>过滤器链与查看方式：</li></ul><p><img src="/images/java/springboot/SpringSecurity/DefaultSecurityFilterChain.png" alt="过滤器链与查看方法"></p><ul><li>认证流程：</li></ul><p><img src="/images/java/springboot/SpringSecurity/Process.jpg" alt="认证流程"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="1-必要依赖："><a href="#1-必要依赖：" class="headerlink" title="1. 必要依赖："></a>1. 必要依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://github.com/jwtk/jjwt#install --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> <span class="comment">&lt;!-- or jjwt-gson if Gson is preferred --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SpringSecurity 依赖添加以后会发现访问 controller 接口会自动跳转到 <code>/login</code> 接口弹出一个登录页面登录后才能进行访问，登录名称默认为 <strong>user</strong> 密码则被打印在了控制台中</li><li>也可已通过配置文件指定用户名和密码：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>通过配置类配置用户(上方配置将无效)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 基于内存的用户存储</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> User.withUsername(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">UserDetails</span> <span class="variable">admin</span> <span class="operator">=</span> User.withUsername(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;ADMIN&quot;</span>, <span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(user, admin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Redis-配置："><a href="#2-Redis-配置：" class="headerlink" title="2. Redis 配置："></a>2. Redis 配置：</h4><h5 id="Redis-序列化配置："><a href="#Redis-序列化配置：" class="headerlink" title="Redis 序列化配置："></a>Redis 序列化配置：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 fastJSON 作为 value 序列化器，并启用 autoType 特性</span></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        serializer.setFastJsonConfig(<span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 StringRedisSerializer 来序列化和反序列化 redis 的 key 值</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        <span class="comment">// Hash 的 key 也采用 StringRedisSerializer 的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDE 没有正确识别 <code>RedisConnectionFactory</code> 类型的参数，导致参数报红报错。但是实际上 SpringBoot 在运行时会自动注入到 redisTemplate 方法中，因此在实际使用时并不会出现问题。</p><ul><li>方法上的 <code>@ConditionalOnSingleCandidate</code> 会检查容器中是否存在 RedisConnectionFactory 类型的 Bean，如果存在且只有一个，则会创建 RedisTemplate Bean。</li></ul><h5 id="Redis-缓存工具类："><a href="#Redis-缓存工具类：" class="headerlink" title="Redis 缓存工具类："></a>Redis 缓存工具类：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCache</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存基本的对象，Integer、String、实体类等</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value    缓存的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout  时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit 时间颗粒度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheObject</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> T value, <span class="keyword">final</span> Integer timeout, <span class="keyword">final</span> TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit    时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true=设置成功；false=设置失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheObject</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();</span><br><span class="line">        <span class="keyword">return</span> operation.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除集合对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection 多个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">deleteObject</span><span class="params">(<span class="keyword">final</span> Collection collection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存List数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataList 待缓存的List数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">long</span> <span class="title function_">setCacheList</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> List&lt;T&gt; dataList)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, dataList);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的list对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存的键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存键值对应的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getCacheList</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     缓存键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSet 缓存的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存数据的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; BoundSetOperations&lt;String, T&gt; <span class="title function_">setCacheSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;T&gt; dataSet)</span> &#123;</span><br><span class="line">        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);</span><br><span class="line">        Iterator&lt;T&gt; it = dataSet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            setOperation.add(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Set&lt;T&gt; <span class="title function_">getCacheSet</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMap</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, T&gt; dataMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, dataMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Map&lt;String, T&gt; <span class="title function_">getCacheMap</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 往Hash中存入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey  Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">setCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> T value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey Hash键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash中的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();</span><br><span class="line">        <span class="keyword">return</span> opsForHash.get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hkey)</span> &#123;</span><br><span class="line">        <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line">        hashOperations.delete(key, hkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个Hash中的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   Redis键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys Hash键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Hash对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">getMultiCacheMapValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得缓存的基本对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 字符串前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;String&gt; <span class="title function_">keys</span><span class="params">(<span class="keyword">final</span> String pattern)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-统一响应体："><a href="#3-统一响应体：" class="headerlink" title="3. 统一响应体："></a>3. 统一响应体：</h4><ul><li>响应结果枚举</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultEnum</span> &#123;</span><br><span class="line">    <span class="comment">// 1xx 信息</span></span><br><span class="line">    CONTINUE(<span class="number">100</span>, <span class="string">&quot;Continue&quot;</span>, <span class="string">&quot;继续&quot;</span>),</span><br><span class="line">    SWITCHING_PROTOCOLS(<span class="number">101</span>, <span class="string">&quot;Switching Protocols&quot;</span>, <span class="string">&quot;切换协议&quot;</span>),</span><br><span class="line">    PROCESSING(<span class="number">102</span>, <span class="string">&quot;Processing&quot;</span>, <span class="string">&quot;处理中&quot;</span>),</span><br><span class="line">    <span class="comment">// 2xx 成功</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    CREATED(<span class="number">201</span>, <span class="string">&quot;Created&quot;</span>, <span class="string">&quot;已创建&quot;</span>),</span><br><span class="line">    ACCEPTED(<span class="number">202</span>, <span class="string">&quot;Accepted&quot;</span>, <span class="string">&quot;已接受&quot;</span>),</span><br><span class="line">    NON_AUTHORITATIVE_INFO(<span class="number">203</span>, <span class="string">&quot;Non-Authoritative Information&quot;</span>, <span class="string">&quot;非权威信息&quot;</span>),</span><br><span class="line">    NO_CONTENT(<span class="number">204</span>, <span class="string">&quot;No Content&quot;</span>, <span class="string">&quot;无内容&quot;</span>),</span><br><span class="line">    RESET_CONTENT(<span class="number">205</span>, <span class="string">&quot;Reset Content&quot;</span>, <span class="string">&quot;重置内容&quot;</span>),</span><br><span class="line">    PARTIAL_CONTENT(<span class="number">206</span>, <span class="string">&quot;Partial Content&quot;</span>, <span class="string">&quot;部分内容&quot;</span>),</span><br><span class="line">    MULTI_STATUS(<span class="number">207</span>, <span class="string">&quot;Multi-Status&quot;</span>, <span class="string">&quot;多状态&quot;</span>),</span><br><span class="line">    <span class="comment">// 3xx 重定向</span></span><br><span class="line">    MULTIPLE_CHOICES(<span class="number">300</span>, <span class="string">&quot;Multiple Choices&quot;</span>, <span class="string">&quot;多种选择&quot;</span>),</span><br><span class="line">    MOVED_PERMANENTLY(<span class="number">301</span>, <span class="string">&quot;Moved Permanently&quot;</span>, <span class="string">&quot;永久移动&quot;</span>),</span><br><span class="line">    FOUND(<span class="number">302</span>, <span class="string">&quot;Found&quot;</span>, <span class="string">&quot;临时移动&quot;</span>),</span><br><span class="line">    SEE_OTHER(<span class="number">303</span>, <span class="string">&quot;See Other&quot;</span>, <span class="string">&quot;查看其他位置&quot;</span>),</span><br><span class="line">    NOT_MODIFIED(<span class="number">304</span>, <span class="string">&quot;Not Modified&quot;</span>, <span class="string">&quot;未修改&quot;</span>),</span><br><span class="line">    USE_PROXY(<span class="number">305</span>, <span class="string">&quot;Use Proxy&quot;</span>, <span class="string">&quot;使用代理&quot;</span>),</span><br><span class="line">    UNUSED(<span class="number">306</span>, <span class="string">&quot;Unused&quot;</span>, <span class="string">&quot;未使用&quot;</span>), <span class="comment">// 已废弃，保留历史意义。</span></span><br><span class="line">    TEMP_REDIRECT(<span class="number">307</span>, <span class="string">&quot;Temporary Redirect&quot;</span>, <span class="string">&quot;临时重定向&quot;</span>),</span><br><span class="line">    <span class="comment">// 4xx 客户端错误</span></span><br><span class="line">    BAD_REQUEST(<span class="number">400</span>, <span class="string">&quot;Bad Request&quot;</span>, <span class="string">&quot;错误请求&quot;</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>, <span class="string">&quot;Unauthorized&quot;</span>, <span class="string">&quot;未授权&quot;</span>),</span><br><span class="line">    PAYMENT_REQUIRED(<span class="number">402</span>, <span class="string">&quot;Payment Required&quot;</span>, <span class="string">&quot;需要付费&quot;</span>), <span class="comment">// 不常用。</span></span><br><span class="line">    FORBIDDEN(<span class="number">403</span>, <span class="string">&quot;Forbidden&quot;</span>, <span class="string">&quot;禁止&quot;</span>),</span><br><span class="line">    NOT_FOUND(<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>, <span class="string">&quot;未找到&quot;</span>),</span><br><span class="line">    METHOD_NOT_ALLOWED(<span class="number">405</span>, <span class="string">&quot;Method Not Allowed&quot;</span>, <span class="string">&quot;方法不允许&quot;</span>),</span><br><span class="line">    NOT_ACCEPTABLE(<span class="number">406</span>, <span class="string">&quot;Not Acceptable&quot;</span>, <span class="string">&quot;不接受&quot;</span>),</span><br><span class="line">    PROXY_AUTH_REQUIRED(<span class="number">407</span>, <span class="string">&quot;Proxy Authentication Required&quot;</span>, <span class="string">&quot;需要代理认证&quot;</span>),</span><br><span class="line">    REQUEST_TIMEOUT(<span class="number">408</span>, <span class="string">&quot;Request Timeout&quot;</span>, <span class="string">&quot;请求超时&quot;</span>),</span><br><span class="line">    CONFLICT(<span class="number">409</span>, <span class="string">&quot;Conflict&quot;</span>, <span class="string">&quot;冲突&quot;</span>),</span><br><span class="line">    GONE(<span class="number">410</span>, <span class="string">&quot;Gone&quot;</span>, <span class="string">&quot;已删除&quot;</span>),</span><br><span class="line">    LENGTH_REQUIRED(<span class="number">411</span>, <span class="string">&quot;Length Required&quot;</span>, <span class="string">&quot;需要长度&quot;</span>),</span><br><span class="line">    PRECON_FAILED(<span class="number">412</span>, <span class="string">&quot;Precondition Failed&quot;</span>, <span class="string">&quot;前提条件失败&quot;</span>),</span><br><span class="line">    ENTITY_TOO_LARGE(<span class="number">413</span>, <span class="string">&quot;Request Entity Too Large&quot;</span>, <span class="string">&quot;请求实体过大&quot;</span>),</span><br><span class="line">    URI_TOO_LONG(<span class="number">414</span>, <span class="string">&quot;Request-URI Too Long&quot;</span>, <span class="string">&quot;请求URI过长&quot;</span>),</span><br><span class="line">    UNSUPPORTED_MEDIA_TYPE(<span class="number">415</span>, <span class="string">&quot;Unsupported Media Type&quot;</span>, <span class="string">&quot;不支持的媒体类型&quot;</span>),</span><br><span class="line">    RANGE_NOT_SATISFIABLE(<span class="number">416</span>, <span class="string">&quot;Requested Range Not Satisfiable&quot;</span>, <span class="string">&quot;请求范围不符合&quot;</span>),</span><br><span class="line">    EXPECTATION_FAILED(<span class="number">417</span>, <span class="string">&quot;Expectation Failed&quot;</span>, <span class="string">&quot;期望失败&quot;</span>),</span><br><span class="line">    TEAPOT(<span class="number">418</span>, <span class="string">&quot;I&#x27;m a teapot&quot;</span>, <span class="string">&quot;我是一个茶壶&quot;</span>), <span class="comment">// 开玩笑的状态码。</span></span><br><span class="line">    MISDIRECTED_REQUEST(<span class="number">421</span>, <span class="string">&quot;Misdirected Request&quot;</span>, <span class="string">&quot;错误的请求&quot;</span>),</span><br><span class="line">    UNPROCESSABLE_ENTITY(<span class="number">422</span>, <span class="string">&quot;Unprocessable Entity&quot;</span>, <span class="string">&quot;无法处理的实体&quot;</span>),</span><br><span class="line">    LOCKED(<span class="number">423</span>, <span class="string">&quot;Locked&quot;</span>, <span class="string">&quot;锁定&quot;</span>),</span><br><span class="line">    FAILED_DEPENDENCY(<span class="number">424</span>, <span class="string">&quot;Failed Dependency&quot;</span>, <span class="string">&quot;依赖失败&quot;</span>),</span><br><span class="line">    TOO_EARLY(<span class="number">425</span>, <span class="string">&quot;Too Early&quot;</span>, <span class="string">&quot;太早&quot;</span>),</span><br><span class="line">    UPGRADE_REQUIRED(<span class="number">426</span>, <span class="string">&quot;Upgrade Required&quot;</span>, <span class="string">&quot;需要升级&quot;</span>),</span><br><span class="line">    RETRY_WITH(<span class="number">449</span>, <span class="string">&quot;Retry With&quot;</span>, <span class="string">&quot;请重试&quot;</span>), <span class="comment">// 微软扩展。</span></span><br><span class="line">    LEGAL_REASONS(<span class="number">451</span>, <span class="string">&quot;Unavailable For Legal Reasons&quot;</span>, <span class="string">&quot;因法律原因不可用&quot;</span>),</span><br><span class="line">    <span class="comment">// 5xx 服务器错误</span></span><br><span class="line">    FAIL(<span class="number">500</span>, <span class="string">&quot;Internal Server Error&quot;</span>, <span class="string">&quot;内部服务器错误&quot;</span>),</span><br><span class="line">    NOT_IMPLEMENTED(<span class="number">501</span>, <span class="string">&quot;Not Implemented&quot;</span>, <span class="string">&quot;未实现&quot;</span>),</span><br><span class="line">    BAD_GATEWAY(<span class="number">502</span>, <span class="string">&quot;Bad Gateway&quot;</span>, <span class="string">&quot;错误网关&quot;</span>),</span><br><span class="line">    SERVICE_UNAVAILABLE(<span class="number">503</span>, <span class="string">&quot;Service Unavailable&quot;</span>, <span class="string">&quot;服务不可用&quot;</span>),</span><br><span class="line">    GATEWAY_TIMEOUT(<span class="number">504</span>, <span class="string">&quot;Gateway Timeout&quot;</span>, <span class="string">&quot;网关超时&quot;</span>),</span><br><span class="line">    HTTP_VERSION_NOT_SUPPORTED(<span class="number">505</span>, <span class="string">&quot;HTTP Version Not Supported&quot;</span>, <span class="string">&quot;HTTP版本不支持&quot;</span>),</span><br><span class="line">    VARIANT_NEGOTIATES(<span class="number">506</span>, <span class="string">&quot;Variant Also Negotiates&quot;</span>, <span class="string">&quot;变体协商&quot;</span>),</span><br><span class="line">    INSUFFICIENT_STORAGE(<span class="number">507</span>, <span class="string">&quot;Insufficient Storage&quot;</span>, <span class="string">&quot;存储不足&quot;</span>),</span><br><span class="line">    BANDWIDTH_EXCEEDED(<span class="number">509</span>, <span class="string">&quot;Bandwidth Limit Exceeded&quot;</span>, <span class="string">&quot;带宽超限&quot;</span>),</span><br><span class="line">    NOT_EXTENDED(<span class="number">510</span>, <span class="string">&quot;Not Extended&quot;</span>, <span class="string">&quot;未扩展&quot;</span>),</span><br><span class="line">    UNPARSEABLE_HEADERS(<span class="number">600</span>, <span class="string">&quot;Unparseable Response Headers&quot;</span>, <span class="string">&quot;无法解析的响应头&quot;</span>); <span class="comment">// 非标准。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespResult</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RespResult</span><span class="params">(ResultEnum resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = resultEnum.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;T&gt; <span class="title function_">code</span><span class="params">(Integer c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = c;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;T&gt; <span class="title function_">msg</span><span class="params">(String m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = m;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;T&gt; <span class="title function_">data</span><span class="params">(T d)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = d;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;T&gt; <span class="title function_">setCodeAndMsg</span><span class="params">(ResultEnum resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultEnum.getCode();</span><br><span class="line">        <span class="built_in">this</span>.msg = resultEnum.getMsg();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;T&gt; <span class="title function_">setCodeAndMsg</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;&gt;(ResultEnum.SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">success</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.SUCCESS).msg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.SUCCESS).data(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">success</span><span class="params">(String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.SUCCESS).msg(msg).data(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;&gt;(ResultEnum.FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">fail</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.FAIL).msg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">fail</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.FAIL).data(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">fail</span><span class="params">(String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(ResultEnum.FAIL).msg(msg).data(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">result</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">result</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;().code(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">result</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;().msg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">result</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;().code(code).msg(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">result</span><span class="params">(Integer code, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;().code(code).msg(msg).data(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">enumResult</span><span class="params">(ResultEnum resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;&gt;(resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RespResult&lt;T&gt; <span class="title function_">enumResult</span><span class="params">(ResultEnum resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespResult</span>&lt;T&gt;(resultEnum).data(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>响应数据工具类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串渲染到客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 渲染对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string   待渲染的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">renderString</span><span class="params">(HttpServletResponse response, String string)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            response.getWriter().print(string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-JWT-工具类："><a href="#4-JWT-工具类：" class="headerlink" title="4. JWT 工具类："></a>4. JWT 工具类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">JWT_TTL</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>; <span class="comment">// 一个小时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_ISSUER</span> <span class="operator">=</span> <span class="string">&quot;ruoxijun&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JWT_KEY</span> <span class="operator">=</span> <span class="string">&quot;ruoxijun+ruoxijun+ruoxijun+ruoxijun+ruoxijun+ruoxijun&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, <span class="literal">null</span>, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, getUUID());</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(String id, String subject, Long ttlMillis)</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getJwtBuilder(subject, ttlMillis, id);</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JwtBuilder <span class="title function_">getJwtBuilder</span><span class="params">(String subject, Long ttlMillis, String uuid)</span> &#123;</span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowMillis);</span><br><span class="line">        <span class="keyword">if</span> (ttlMillis == <span class="literal">null</span>) &#123;</span><br><span class="line">            ttlMillis = JwtUtil.JWT_TTL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + ttlMillis;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setId(uuid) <span class="comment">//唯一的ID</span></span><br><span class="line">                .setSubject(subject) <span class="comment">// 主题可以是JSON数据</span></span><br><span class="line">                .setIssuer(JWT_ISSUER) <span class="comment">// 签发者</span></span><br><span class="line">                .setIssuedAt(now) <span class="comment">// 签发时间</span></span><br><span class="line">                .signWith(secretKey, signatureAlgorithm) <span class="comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span><br><span class="line">                .setExpiration(expDate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(secretKey)</span><br><span class="line">                .build()</span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Keys.hmacShaKeyFor(JwtUtil.JWT_KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getUUID</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库登录"><a href="#数据库登录" class="headerlink" title="数据库登录"></a>数据库登录</h3><ul><li>由认证流程可知 SpringSecurity 通过 <code>UserDetailsService</code> 的 <code>loadUserByUsername</code> 方法查询用户后返回 <code>UserDetails</code> 用户信息对象。</li></ul><h4 id="1-UserDetails："><a href="#1-UserDetails：" class="headerlink" title="1. UserDetails："></a>1. UserDetails：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123; <span class="keyword">return</span> user.getPassword(); &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123; <span class="keyword">return</span> user.getUsername(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">// 获取权限信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123; <span class="keyword">return</span> <span class="literal">null</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否没有过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否未锁定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 凭据是否未过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否可用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不实现 <code>UserDetails</code> 类，可以采用 <code>User.withUsername...</code> 方式来生成 UserDetails 对象。</li></ul><h4 id="2-UserDetailsService："><a href="#2-UserDetailsService：" class="headerlink" title="2. UserDetailsService："></a>2. UserDetailsService：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImp</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername, username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// todo 查询用户对应权限</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这时想要使用数据库的用户账号密码登录还需要在用户 <strong>数据库的密码前面</strong> 添加 <code>&#123;noop&#125;</code> ，之后就可以使用该账号密码登录了</li></ul><h2 id="JWT-登录"><a href="#JWT-登录" class="headerlink" title="JWT 登录"></a>JWT 登录</h2><h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><ol><li>自定义 <code>/login</code> 登录接口，并在 SpringSecurity 配置文件中让它放行</li><li>在接口中通过 <code>AuthenticationManager</code> 的 <code>authenticate</code> 进行用户认证<ul><li><code>AuthenticationManager</code> 需要在配置文件中注入容器</li><li><code>authenticate</code> 需要一个 <code>Authentication</code> 接口对象我们使用 <code>UsernamePasswordAuthenticationToken</code> 认证成功会返回这个 <code>Authentication</code> 对象否则为 <code>null</code></li></ul></li><li>认证成功后生成 JWT 并存入 Redis ，最后将 JWT（token） 响应给客户端</li><li>自定义 JWT 认证过滤器，之后用户携带 token 访问接口时通过解析 token 获取用户信息，并将信息出入 <code>SecurityContextHolder</code> 中（仅此次请求有效）<ul><li>继承 <code>OncePerRequestFilter</code> 过滤器确保一次请求仅被调用一次，通常一个请求会经过多个过滤器,如果没有限制一个过滤器可能被调用多次</li></ul></li></ol><h4 id="密码加密处理："><a href="#密码加密处理：" class="headerlink" title="密码加密处理："></a>密码加密处理：</h4><ul><li><p>在 SpringSecurity 中，如果使用的是 <strong>明文密码</strong> ，则需要在密码前添加 <code>&#123;noop&#125;</code> 前缀，这是因为SpringSecurity 默认使用加密密码来保护用户密码</p></li><li><p>SpringSecurity 中最常用的是 BCryptPasswordEncoder 使用 bcrypt 哈希算法来加密密码</p></li><li><p>在 SpringSecurity 配置文件中把 <code>BCryptPasswordEncoder</code> 注入容器（@Bean），SpringSecurity 则会使用该 PasswordEncoder 进行密码校验</p></li></ul><h5 id="BCryptPasswordEncoder-常用方法："><a href="#BCryptPasswordEncoder-常用方法：" class="headerlink" title="BCryptPasswordEncoder 常用方法："></a>BCryptPasswordEncoder 常用方法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">BCryptPasswordEncoder bCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="comment">// 密码加密</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(password);</span><br><span class="line">    <span class="comment">// 密码校验</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> bCryptPasswordEncoder.matches(password, encode);</span><br><span class="line">    System.out.println(encode + <span class="string">&quot; &lt;-=-&gt; &quot;</span> + matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LoginService"><a href="#LoginService" class="headerlink" title="LoginService"></a>LoginService</h3><ul><li>controller 登录接口 <code>/login</code> 和 LoginService 接口类请自行实现，这里是登录业务实现：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RespResult <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                user.getUsername(), user.getPassword()); <span class="comment">// 传入用户名和密码</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(authenticate))&#123; <span class="comment">// 认证未通过</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取 UserDetails 对象，使用 userId 生成 token</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authenticate.getPrincipal();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> loginUser.getUser().getId().toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> JwtUtil.createJWT(userId);</span><br><span class="line">        <span class="comment">// authenticate 存入 redis</span></span><br><span class="line">        redisCache.setCacheObject(<span class="string">&quot;login:&quot;</span>+userId, loginUser);</span><br><span class="line">        <span class="comment">// token 响应给前端</span></span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,jwt);</span><br><span class="line">        <span class="keyword">return</span> RespResult.success(<span class="string">&quot;登录成功&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RespResult <span class="title function_">logout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder</span><br><span class="line">                .getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userid</span> <span class="operator">=</span> loginUser.getUser().getId();</span><br><span class="line">        redisCache.deleteObject(<span class="string">&quot;login:&quot;</span> + userid);</span><br><span class="line">        <span class="keyword">return</span> RespResult.success(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JwtAuthenticationFilter"><a href="#JwtAuthenticationFilter" class="headerlink" title="JwtAuthenticationFilter"></a>JwtAuthenticationFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisCache redisCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasText(token)) &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析 token</span></span><br><span class="line">        String userid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtil.parseJWT(token);</span><br><span class="line">            userid = claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;token非法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从 redis 中获取用户信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> <span class="string">&quot;login:&quot;</span> + userid;</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> redisCache.getCacheObject(redisKey);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(loginUser)) &#123;</span><br><span class="line">            <span class="comment">// 存入 SecurityContextHolder</span></span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                            loginUser, <span class="literal">null</span>, loginUser.getAuthorities());</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/api/auth/**&quot;</span>).anonymous()</span><br><span class="line">                        .anyRequest().authenticated()</span><br><span class="line">                )</span><br><span class="line">                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .cors(AbstractHttpConfigurer::disable)</span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable)</span><br><span class="line">                .sessionManagement(conf -&gt; conf</span><br><span class="line">                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 密码加密方式</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 获取 AuthenticationManager（认证管理器），登录时认证使用</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p>在 SpringSecurity 中,会使用默认的 <code>FilterSecurityInterceptor</code> 过滤器来进行权限校验。它会从<code>SecurityContextHolder</code> 中获取当前 <code>Authentication</code> ,并获取其中包含的权限信息,以判断当前用户是否有权访问当前资源。</p><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>在 SpringSecurity 的配置类 <code>SecurityConfig</code> 上添加如下注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableMethodSecurity(prePostEnabled = true)</span></span><br></pre></td></tr></table></figure><p>它启用方法级的安全约束， <code>prePostEnabled=true</code> 表示启用预验证(pre：方法执行前校验)和后验(post：方法执行后校验)拦截器</p><ul><li>假如给 controller <code>/hello</code> 接口方法上方添加如下权限校验注解，它表示执行该方法前它会校验当前用户是否有 admin 权限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;admin&#x27;)&quot;)</span> <span class="comment">// 方法执行之前校验</span></span><br><span class="line"><span class="comment">// @PreAuthorize(&quot;hasAuthority(&#x27;admin&#x27;)&quot;) // 方法执行之后校验</span></span><br></pre></td></tr></table></figure><h3 id="获取权限"><a href="#获取权限" class="headerlink" title="获取权限"></a>获取权限</h3><h4 id="1-UserDetails"><a href="#1-UserDetails" class="headerlink" title="1. UserDetails"></a>1. UserDetails</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUser</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissions;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JSONField(serialize = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SimpleGrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginUser</span><span class="params">(User user, List&lt;String&gt; permissions)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.permissions = permissions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123; <span class="keyword">return</span> user.getPassword(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123; <span class="keyword">return</span> user.getUsername(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(authorities)) &#123;</span><br><span class="line">            <span class="keyword">return</span> authorities;</span><br><span class="line">        &#125;</span><br><span class="line">        authorities = permissions.stream()</span><br><span class="line">                .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否没有过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否未锁定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 凭据是否未过期</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否可用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-UserDetailsService"><a href="#2-UserDetailsService" class="headerlink" title="2. UserDetailsService"></a>2. UserDetailsService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImp</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getUsername, username);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将用户对象与用户权限封装到 UserDetails 中</span></span><br><span class="line">        <span class="comment">// 此处权限应是用户数据库中查询到的权限</span></span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginUser</span>(user, Arrays.asList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> loginUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其它校验"><a href="#其它校验" class="headerlink" title="其它校验"></a>其它校验</h3><h4 id="校验方法："><a href="#校验方法：" class="headerlink" title="校验方法："></a>校验方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;admin&#x27;)&quot;)</span> <span class="comment">// 校验某个权限</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;admin&#x27;, &#x27;admin2&#x27;)&quot;)</span> <span class="comment">// 校验多个权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与上类似</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;admin2&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;admin&#x27;, &#x27;admin2&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="自定义校验："><a href="#自定义校验：" class="headerlink" title="自定义校验："></a>自定义校验：</h4><ul><li>定义一个自定义校验方法的通用接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">checkPermission</span><span class="params">(String authority)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现校验接口与校验方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;psi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PermissionService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPermission</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户权限</span></span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder</span><br><span class="line">                .getContext().getAuthentication();</span><br><span class="line">        <span class="type">LoginUser</span> <span class="variable">loginUser</span> <span class="operator">=</span> (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line">        <span class="comment">// 校验权限</span></span><br><span class="line">        <span class="keyword">return</span> permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用校验方法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @psi 表示 bean 在容器中的名称加上 @ 前缀</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@psi.checkPermission(&#x27;admin&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure><h4 id="配置校验："><a href="#配置校验：" class="headerlink" title="配置校验："></a>配置校验：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">.authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">        .requestMatchers(<span class="string">&quot;/api/auth/**&quot;</span>).anonymous()</span><br><span class="line">        <span class="comment">// 需要 admin 权限才能访问 /hello 接口</span></span><br><span class="line">        .requestMatchers(<span class="string">&quot;/hello&quot;</span>).hasAuthority(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>如果配置和注解包含相同接口，先会校验配置类中的权限再校验注解的权限</li><li>配置中的权限校验发生授权异常时不会被全局异常处理器捕获，而是被授权异常处理器捕获。而到校验注解方式授权异常时会被全局异常捕获</li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="认证异常"><a href="#认证异常" class="headerlink" title="认证异常"></a>认证异常</h3><ul><li>在认证过程中出现的异常会被封装成 <code>AuthenticationException</code> 然后调用 <strong>AuthenticationEntryPoint</strong> 对象的方法去进行异常处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> &#123;</span><br><span class="line">        RespResult&lt;Object&gt; respResult = RespResult.result(</span><br><span class="line">                HttpStatus.UNAUTHORIZED.value(), <span class="string">&quot;身份认证失败&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(respResult);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="授权异常"><a href="#授权异常" class="headerlink" title="授权异常"></a>授权异常</h3><ul><li>授权过程中出现的异常会被封装成 <code>AccessDeniedException</code> 然后调用 <strong>AccessDeniedHandler</strong> 对象的方法去进行异常处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> &#123;</span><br><span class="line">        RespResult&lt;Object&gt; respResult = RespResult.result(</span><br><span class="line">                HttpStatus.FORBIDDEN.value(), <span class="string">&quot;用户权限不足&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(respResult);</span><br><span class="line">        WebUtils.renderString(response, json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><ul><li>在 SecurityConfig 中获取认证与授权异常处理器：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br></pre></td></tr></table></figure><ul><li>增加如下配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">.exceptionHandling(conf -&gt; conf</span><br><span class="line">        <span class="comment">// 授权异常处理</span></span><br><span class="line">        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">        <span class="comment">// 认证异常处理</span></span><br><span class="line">        .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="全局异常"><a href="#全局异常" class="headerlink" title="全局异常"></a>全局异常</h3><p>如果配置了 <code>@ControllerAdvice</code> 全局异常处理，其中处理的异常范围若包括了 <code>AccessDeniedException</code> 那么 <strong>注解权限</strong> 授权异常将被它拦截 SpringSecurity 不再处理，因此我们需要在全局异常中处理注解校验的授权异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// SpringSecurity 授权异常处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(AccessDeniedException.class)</span></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;String&gt; <span class="title function_">handlerAccessDeniedException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RespResult.result(HttpStatus.FORBIDDEN.value(), <span class="string">&quot;权限不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局异常处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;String&gt; <span class="title function_">handlerException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RespResult.fail(<span class="string">&quot;程序异常&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它处理器"><a href="#其它处理器" class="headerlink" title="其它处理器"></a>其它处理器</h2><h3 id="认证成功"><a href="#认证成功" class="headerlink" title="认证成功"></a>认证成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证成功了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证失败"><a href="#认证失败" class="headerlink" title="认证失败"></a>认证失败</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认证失败了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登出成功"><a href="#登出成功" class="headerlink" title="登出成功"></a>登出成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SGLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h3><ul><li>注入：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br></pre></td></tr></table></figure><ul><li>配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">.formLogin(conf -&gt; conf</span><br><span class="line">        <span class="comment">// 登录成功处理</span></span><br><span class="line">        .successHandler(successHandler)</span><br><span class="line">        <span class="comment">// 登录失败处理</span></span><br><span class="line">        .failureHandler(failureHandler)</span><br><span class="line">)</span><br><span class="line">.logout(conf -&gt; conf</span><br><span class="line">        <span class="comment">// 登出成功处理</span></span><br><span class="line">        .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><ul><li>待完善</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableMethodSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtAuthenticationFilter jwtAuthenticationFilter;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPoint authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler successHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler failureHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .authorizeHttpRequests(auth -&gt; auth</span><br><span class="line">                        <span class="comment">// 允许匿名访问</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/api/auth/**&quot;</span>).anonymous()</span><br><span class="line">                        <span class="comment">// 权限控制</span></span><br><span class="line">                        .requestMatchers(<span class="string">&quot;/hello&quot;</span>).hasAuthority(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                        .anyRequest().authenticated() <span class="comment">// 其他请求需要认证</span></span><br><span class="line">                )</span><br><span class="line">                .exceptionHandling(conf -&gt; conf</span><br><span class="line">                        <span class="comment">// 授权异常处理</span></span><br><span class="line">                        .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                        <span class="comment">// 认证异常处理</span></span><br><span class="line">                        .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                )</span><br><span class="line">                .formLogin(conf -&gt; conf</span><br><span class="line">                        <span class="comment">// 登录成功处理</span></span><br><span class="line">                        .successHandler(successHandler)</span><br><span class="line">                        <span class="comment">// 登录失败处理</span></span><br><span class="line">                        .failureHandler(failureHandler)</span><br><span class="line">                )</span><br><span class="line">                .logout(conf -&gt; conf</span><br><span class="line">                        <span class="comment">// 登出成功处理</span></span><br><span class="line">                        .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">                )</span><br><span class="line">                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .cors(Customizer.withDefaults()) <span class="comment">// 跨域配置</span></span><br><span class="line">                .csrf(AbstractHttpConfigurer::disable) <span class="comment">// 关闭 csrf</span></span><br><span class="line">                <span class="comment">// 关闭 session</span></span><br><span class="line">                .sessionManagement(conf -&gt; conf</span><br><span class="line">                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 密码加密方式</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 获取 AuthenticationManager（认证管理器），登录时认证使用</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">(AuthenticationConfiguration authenticationConfiguration)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springsecurity </tag>
            
            <tag> springboot </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arduino</title>
      <link href="/2023/04/20/interest/Arduino/"/>
      <url>/2023/04/20/interest/Arduino/</url>
      
        <content type="html"><![CDATA[<h1 id="Arduino"><a href="#Arduino" class="headerlink" title="Arduino"></a>Arduino</h1><h2 id="ArduinoUno"><a href="#ArduinoUno" class="headerlink" title="ArduinoUno"></a>ArduinoUno</h2><h3 id="组成信息："><a href="#组成信息：" class="headerlink" title="组成信息："></a>组成信息：</h3><p><img src="/images/wlw/arduino/ArduinoUNO.png" alt="ArduinoUNO"></p><h4 id="电源与供电："><a href="#电源与供电：" class="headerlink" title="电源与供电："></a>电源与供电：</h4><ul><li>USB 供电为 5V ，DC 供电电压要求 7～12V 一般取中间值 9V。</li><li>左下角电源接口可给外围模块供电，其中 VIN 输出电压等于主板电源电压</li></ul><h4 id="指示灯："><a href="#指示灯：" class="headerlink" title="指示灯："></a>指示灯：</h4><ul><li>ON：电源指示灯</li><li>L：该 LED 连接到 Arduino 的 13 号引脚（不同主板可能不同）</li><li>TX：串口发送指示灯，RX：串口接收指示灯</li></ul><h3 id="针脚说明："><a href="#针脚说明：" class="headerlink" title="针脚说明："></a>针脚说明：</h3><p><img src="/images/wlw/arduino/ArduinoUNO2.png" alt="ArduinoUNO"></p><h4 id="输入输出："><a href="#输入输出：" class="headerlink" title="输入输出："></a>输入输出：</h4><p>ArduinoUNO 有 14 个数字输入输出端口，6 个模拟输入端口</p><ul><li>0（RX）、1（TX）分别用于接收和发送串口数据</li><li>2、3 可以输入外部中断信号</li><li>带 <strong>~</strong> 号数字引脚（3、5、6、9、10、11）可用于输出模拟值</li><li>带 <strong>A</strong> 前缀引脚模拟输入引脚，读入模拟值</li><li>10（SS）、11（MOSI）、12（MISO）、13（SCK） 可用于 SPI 通信</li><li>A4（SDA）、A5（SCL）和 TWI 接口 可用于 TWI 通信，兼容 I²C 通信</li><li>AREF 模拟输入参考电压输入端口</li></ul><h3 id="ArduinoIDE："><a href="#ArduinoIDE：" class="headerlink" title="ArduinoIDE："></a>ArduinoIDE：</h3><blockquote><p>注意：电脑连接或切换开发板需要在工具中选择对应的开发板和端口</p></blockquote><ul><li>ArduinoUno-ch340 驱动下载地址：</li></ul><p><a href="https://www.wch.cn/downloads/CH341SER_EXE.html">https://www.wch.cn/downloads/CH341SER_EXE.html</a></p><ul><li>添加 ESP8266 开发版 JSON：</li></ul><p><a href="https://arduino.esp8266.com/stable/package_esp8266com_index.json">https://arduino.esp8266.com/stable/package_esp8266com_index.json</a></p><ul><li>ESP8266-cp210 驱动下载地址：</li></ul><p><a href="https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads">https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads</a></p><h2 id="Arduino-1"><a href="#Arduino-1" class="headerlink" title="Arduino"></a>Arduino</h2><h3 id="C-C-基础"><a href="#C-C-基础" class="headerlink" title="C&#x2F;C++ 基础"></a>C&#x2F;C++ 基础</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏定义(可以没有分号结尾)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> led = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="type">int</span>           <span class="comment">// 整型</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>  <span class="comment">// 无符号整型</span></span><br><span class="line"><span class="type">long</span>          <span class="comment">// 长整型</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="comment">// 无符号长整型</span></span><br><span class="line"><span class="type">short</span>         <span class="comment">// 短整型</span></span><br><span class="line"><span class="type">float</span>         <span class="comment">// 浮点型</span></span><br><span class="line"><span class="type">double</span>        <span class="comment">// 双精度浮点型</span></span><br><span class="line"><span class="type">char</span>          <span class="comment">// 字符型</span></span><br><span class="line"><span class="type">bool</span>          <span class="comment">// 布尔型</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>]      <span class="comment">// 数组</span></span><br><span class="line">String        <span class="comment">// 字符串</span></span><br></pre></td></tr></table></figure><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ul><li>使 ArduinoUno 开发板上自带与 13 号引脚连接的 LED 灯闪烁：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    LED_BUILTIN：内置 LED 灯（13 引脚，不同板子可能不同）</span></span><br><span class="line"><span class="comment">    OUTPUT：数字输出模式</span></span><br><span class="line"><span class="comment">    pinMode(引脚, 模式)：将指定引脚配置为数字输入或输出模式</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="built_in">pinMode</span>(LED_BUILTIN, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环执行</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    digitalWrite(引脚, 电平)：将指定引脚输出高电平（HIGH）或低电平（LOW）</span></span><br><span class="line"><span class="comment">    delay(时间毫秒); 让程序延时指定毫秒后执行</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, HIGH);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">  <span class="built_in">digitalWrite</span>(LED_BUILTIN, LOW);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arduino-基础"><a href="#Arduino-基础" class="headerlink" title="Arduino 基础"></a>Arduino 基础</h3><h4 id="数字输入输出："><a href="#数字输入输出：" class="headerlink" title="数字输入输出："></a>数字输入输出：</h4><ul><li>Arduino 针对不同的开发板预定义了不同的引脚，LED_BUILTIN 一般表示开发板自带的 LED 灯相连的引脚</li><li>OUTPUT 输出模式、INPUT 输入模式、INPUT_PULLUP 输入上拉模式</li><li>HIGH 高电平、LOW 低电平</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引脚模式，数字输入输出需要在 setup 中指定引脚模式</span></span><br><span class="line"><span class="built_in">pinMode</span>(pin, mode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">digitalWrite</span>(pin, value); <span class="comment">// 数字写出</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digitalRead</span><span class="params">(pin)</span> <span class="comment">// 数字读入</span></span></span><br></pre></td></tr></table></figure><h4 id="模拟输入输出："><a href="#模拟输入输出：" class="headerlink" title="模拟输入输出："></a>模拟输入输出：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟值读入（A0~5，0～5V 值为 0～1023）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">analogRead</span><span class="params">(pin)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 模拟值写出（3、5、6、9、10、11 引脚，0～255）</span></span></span><br><span class="line"><span class="function"><span class="title">analogWrite</span><span class="params">(pin, value)</span></span></span><br></pre></td></tr></table></figure><ul><li><code>analogRead</code> 它基于 ATmega328P 微控制器的 Arduino 板的 ADC 分辨率为10位。这意味着它可以将输入电压分为2^10 &#x3D; 1024个不同的级别</li><li><code>analogWrite</code> 输出值0到255范围的原因是因为 Arduino 的 PWM 分辨率为8位，这意味着它可以表示2^8 &#x3D; 256个不同的占空比级别，将模拟输入值映射到0到255范围可以充分利用 Arduino 的 PWM 分辨率</li></ul><h4 id="串口通信："><a href="#串口通信：" class="headerlink" title="串口通信："></a>串口通信：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setup 中串口通信初始化，并指定波特率（数据传输的速率）</span></span><br><span class="line">Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"><span class="comment">// 关闭所有的串口通信，并将其释放回给系统</span></span><br><span class="line">Serial.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读到的字符形成了一个完整的字符串，然后将其从串口缓存中读取并返回</span></span><br><span class="line">Serial.<span class="built_in">readString</span>();</span><br><span class="line"><span class="comment">// 等待读取到特定的终止符返回</span></span><br><span class="line">Serial.<span class="built_in">readStringUntil</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">// 读取直到遇到换行符为止的字符串</span></span><br><span class="line"><span class="comment">// 在串口上输出字符串，并自动换行</span></span><br><span class="line">Serial.<span class="built_in">println</span>();</span><br></pre></td></tr></table></figure><p><code>Serial.println</code> 有第二个参数，参数用于控制输出格式：</p><ul><li><code>DEC</code>：输出十进制数字</li><li><code>HEX</code>：输出十六进制数字</li><li><code>OCT</code>：输出八进制数字</li><li><code>BIN</code>：输出二进制数字</li><li><code>BYTE</code>：输出字符的 ASCII 编码值</li></ul><h2 id="模块实例"><a href="#模块实例" class="headerlink" title="模块实例"></a>模块实例</h2><h3 id="按钮模块"><a href="#按钮模块" class="headerlink" title="按钮模块"></a>按钮模块</h3><ul><li>按钮在按下时可能出现震颤现象，这会导致在极小的一段时间里电平不停的高低之间转换（最简单的除颤方法是在电平首次改变时延时一段时间）</li></ul><h4 id="下拉电阻："><a href="#下拉电阻：" class="headerlink" title="下拉电阻："></a>下拉电阻：</h4><h5 id="连接图："><a href="#连接图：" class="headerlink" title="连接图："></a>连接图：</h5><ul><li>示意图：</li></ul><p><img src="/images/wlw/arduino/mode/xiala.jpg" alt="下拉电阻方式"></p><ul><li>实例图：</li></ul><p><img src="/images/wlw/arduino/mode/xiala2.jpg" alt="下拉电阻方式"></p><ul><li><strong>限流电阻</strong> ：一般LED的最大能承受的电流为 <strong>25mA</strong> ，在LED一端串联了 220Ω 的电阻，这样可以控制流过LED的电流，防止损坏LED</li><li><strong>下拉电阻</strong> ：在 2 号引脚到 GND 之前，连接了一个阻值 10K 的电阻。没有该电阻，当未按下按键时，2号引脚会一直处于悬空（没有连接任何电路）状态，会得到一个不稳定的值（可能是高，也可能是低）。电阻到地就是为了稳定引脚的电平，当引脚悬空时，就会识别为低电平。而这种 <strong>将某节点通过电阻接地</strong> 的做法，叫做下拉</li></ul><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> readPin 2 <span class="comment">// 定义 2 号引脚读取按钮状态</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> check = LOW; <span class="comment">// 记录初始状态</span></span><br><span class="line"><span class="type">long</span> i = <span class="number">0</span>; <span class="comment">// 点击次数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  <span class="built_in">pinMode</span>(LED_BUILTIN, OUTPUT);</span><br><span class="line">  <span class="built_in">pinMode</span>(readPin, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> flag = <span class="built_in">digitalRead</span>(readPin);</span><br><span class="line">  <span class="comment">// 按钮按下且按钮电平状态改变时</span></span><br><span class="line">  <span class="keyword">if</span>(flag == HIGH &amp;&amp; flag != check)&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(++i);</span><br><span class="line">    <span class="built_in">digitalWrite</span>(LED_BUILTIN, !<span class="built_in">digitalRead</span>(LED_BUILTIN));</span><br><span class="line">  &#125;</span><br><span class="line">  check = flag;</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="上拉电阻："><a href="#上拉电阻：" class="headerlink" title="上拉电阻："></a>上拉电阻：</h4><h5 id="连接图：-1"><a href="#连接图：-1" class="headerlink" title="连接图："></a>连接图：</h5><ul><li>示意图：</li></ul><p><img src="/images/wlw/arduino/mode/shangla.jpg" alt="上拉电阻方式"></p><ul><li>实例图：</li></ul><p><img src="/images/wlw/arduino/mode/shangla2.jpg" alt="上拉电阻方式"></p><ul><li><strong>上拉电阻</strong> ：同下拉电阻一样，可以稳定 I&#x2F;O 口电平，不同的是电阻连接到 VCC，将引脚稳定在高电位</li></ul><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><ul><li>只需将上面代码中 <code>pinMode(readPin, INPUT);</code> 替换为：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pinMode</span>(readPin, INPUT_PULLUP);</span><br></pre></td></tr></table></figure><ul><li>启动后 LED 灯将默认亮起，因为 <code>INPUT_PULLUP</code> 模式表示将引脚设置为输入模式，并启用内部上拉电阻</li><li>如果没有外部电压施加到该引脚，它将默认读取为高电平（HIGH）。当外部设备将引脚接地时（按下），引脚将读取为低电平（LOW）</li><li>这种模式通常用于连接开关或按钮，因为它可以帮助消除浮动输入的问题</li></ul><h3 id="电位器"><a href="#电位器" class="headerlink" title="电位器"></a>电位器</h3><h4 id="原理图："><a href="#原理图：" class="headerlink" title="原理图："></a>原理图：</h4><p><img src="/images/wlw/arduino/mode/Potentiometer.jpg" alt="电位器原理图"></p><ul><li>电位器一般有 3 个针脚两边针脚任意接电压线和接地线，中间的针脚接模拟输入脚位（带 <strong>A</strong> 前缀的）</li><li>转动电位器时的值为 <strong>0~1023</strong> ，向接电压针脚方向转时值增加，向接地方向时减小</li></ul><h4 id="实例代码："><a href="#实例代码：" class="headerlink" title="实例代码："></a>实例代码：</h4><ul><li><p>A0 针脚读取电位器的值，3 号针脚接蜂鸣器正极并输出模拟值</p></li><li><p>范围值映射： <code>long map(long x, long in_min, long in_max, long out_min, long out_max)</code></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> led 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sensor A0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123; Serial.<span class="built_in">begin</span>(<span class="number">9600</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 它读到返回的值为 0 ~ 1023</span></span><br><span class="line">  <span class="type">int</span> analog = <span class="built_in">analogRead</span>(sensor);</span><br><span class="line">  <span class="comment">// 0~1023 范围的值映射为 0~255 返回</span></span><br><span class="line">  analog = <span class="built_in">map</span>(analog, <span class="number">0</span>, <span class="number">1023</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(analog);</span><br><span class="line">  <span class="comment">// 输出 0~255 的模拟值控制蜂鸣器声音大小</span></span><br><span class="line">  <span class="built_in">analogWrite</span>(led, analog);</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Iot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZeroTermux</title>
      <link href="/2023/04/15/interest/Termux/"/>
      <url>/2023/04/15/interest/Termux/</url>
      
        <content type="html"><![CDATA[<h1 id="Termux"><a href="#Termux" class="headerlink" title="Termux"></a>Termux</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><ul><li><a href="https://github.com/termux/termux-app">termux 官网地址：https://github.com/termux/termux-app</a></li><li><a href="https://github.com/hanxinhao000/ZeroTermux">ZeroTermux 官网地址：https://github.com/hanxinhao000/ZeroTermux</a></li><li><a href="https://od.ixcmstudio.cn/repository/main/ZeroTermux/">下载地址 ：ixcmstudio.cn</a></li></ul></blockquote><h3 id="安装常用软件："><a href="#安装常用软件：" class="headerlink" title="安装常用软件："></a>安装常用软件：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkg update</span><br><span class="line">pkg upgrade</span><br><span class="line">pkg install -y vim git nmap openssh tsu curl wget tree proot</span><br></pre></td></tr></table></figure><h3 id="初始化设置："><a href="#初始化设置：" class="headerlink" title="初始化设置："></a>初始化设置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd</span><br><span class="line"><span class="comment"># 将默认编辑器设置为 vim</span></span><br><span class="line"><span class="built_in">export</span> EDITOR=vim</span><br><span class="line"><span class="comment"># 查看用户名</span></span><br><span class="line"><span class="built_in">whoami</span></span><br><span class="line"><span class="comment"># 查看 ip</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 开启 ssh</span></span><br><span class="line">sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程 ssh 连接(termux 默认 ssh 端口 8022)</span></span><br><span class="line">ssh -p 8022 root@192.168.0.166</span><br></pre></td></tr></table></figure><h3 id="设置或删除启动文字："><a href="#设置或删除启动文字：" class="headerlink" title="设置或删除启动文字："></a>设置或删除启动文字：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$PREFIX</span>/etc/motd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改启动问候语</span></span><br><span class="line">vim <span class="variable">$PREFIX</span>/etc/motd</span><br></pre></td></tr></table></figure><h2 id="安装-Linux-发行版"><a href="#安装-Linux-发行版" class="headerlink" title="安装 Linux 发行版"></a>安装 Linux 发行版</h2><h3 id="以-centos-为例："><a href="#以-centos-为例：" class="headerlink" title="以 centos 为例："></a>以 centos 为例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要工具</span></span><br><span class="line">pkg install proot git python -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 centos（执行命令后按照指引安装即可）</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/sqlsec/termux-install-linux</span><br><span class="line"><span class="built_in">cd</span> termux-install-linux</span><br><span class="line">python termux-linux-install.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 centos</span></span><br><span class="line"><span class="built_in">cd</span> ~/Termux-Linux/CentOS</span><br><span class="line">./start-centos.sh</span><br></pre></td></tr></table></figure><h2 id="搭建服务器环境"><a href="#搭建服务器环境" class="headerlink" title="搭建服务器环境"></a>搭建服务器环境</h2><h3 id="安装-mysql-jdk-redis-nginx："><a href="#安装-mysql-jdk-redis-nginx：" class="headerlink" title="安装 mysql jdk redis nginx："></a>安装 mysql jdk redis nginx：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install mariadb openjdk-17 redis nginx -y</span><br></pre></td></tr></table></figure><h3 id="配置-mariadb-mysql-："><a href="#配置-mariadb-mysql-：" class="headerlink" title="配置 mariadb(mysql)："></a>配置 mariadb(mysql)：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录数据库（默认没有密码，回车即可）：</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 创建可以远程数据库的用户 admin：</span></span><br><span class="line">CREATE USER <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="配置-Redis："><a href="#配置-Redis：" class="headerlink" title="配置 Redis："></a>配置 Redis：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启 redis 服务</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line">WARNING Your kernel has a bug that could lead to data corruption during background save. Please upgrade to the latest stable kernel.</span><br><span class="line"><span class="comment"># 解决方案：</span></span><br><span class="line">vim /data/data/com.termux/files/usr/etc/redis.conf</span><br><span class="line"><span class="comment"># 在配置文件中解除最后一行 ignore-warnings ARM64-COW-BUG 的注释即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在配置文件中设置 Redis 密码：</span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="comment"># 命令行登录：</span></span><br><span class="line">redis-cli -a 123456</span><br></pre></td></tr></table></figure><h3 id="配置-nginx："><a href="#配置-nginx：" class="headerlink" title="配置 nginx："></a>配置 nginx：</h3><ul><li>该 nginx 配置文件中默认启用的 8080 端口，按需求自行修改：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /data/data/com.termux/files/usr/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="配置自启动"><a href="#配置自启动" class="headerlink" title="配置自启动"></a>配置自启动</h2><ul><li>到用户目录下 <code>cd</code> 配置 <code>.bashrc</code> 自启动执行脚本</li><li>termux 启动时自启动 mariadb(mysql) openjdk-17 redis nginx 等</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除脚本</span></span><br><span class="line"><span class="built_in">rm</span> -f .bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入脚本</span></span><br><span class="line"><span class="built_in">cat</span> &gt; .bashrc &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">echo &quot;&lt;------------- init start ! --------------&gt;&quot;</span></span><br><span class="line"><span class="string">echo &quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动 sshd</span></span><br><span class="line"><span class="string">if pgrep -x &quot;sshd&quot; &gt;/dev/null</span></span><br><span class="line"><span class="string">  then</span></span><br><span class="line"><span class="string">    echo &quot;~ &gt; sshd started&quot;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    sshd &gt;/dev/null</span></span><br><span class="line"><span class="string">    echo &quot;~ &gt; sshd start success&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动 mysql</span></span><br><span class="line"><span class="string">if pgrep -x &quot;mysqld_safe&quot; &gt;/dev/null</span></span><br><span class="line"><span class="string">  then</span></span><br><span class="line"><span class="string">    echo &quot;~ &gt; mysql started&quot;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    mysqld_safe -u root &gt;/dev/null  &amp;</span></span><br><span class="line"><span class="string">    echo &quot;~ &gt; mysql start success&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动 redis</span></span><br><span class="line"><span class="string">if pgrep -x &quot;redis-server&quot; &gt;/dev/null</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">  echo &quot;~ &gt; redis-server started&quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  redis-server /data/data/com.termux/files/usr/etc/redis.conf  &gt;/dev/null  &amp;</span></span><br><span class="line"><span class="string">  echo &quot;~ &gt; redis-server start success&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 启动 nginx</span></span><br><span class="line"><span class="string">if pgrep -x &quot;nginx&quot; &gt;/dev/null</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">  echo &quot;~ &gt; nginx started&quot;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  nginx &gt;/dev/null</span></span><br><span class="line"><span class="string">  echo &quot;~ &gt; nginx start success&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;&quot;</span></span><br><span class="line"><span class="string">echo &quot;&lt;-------------- init end ! ---------------&gt;&quot;</span></span><br><span class="line"><span class="string">echo &quot;&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="termux-api"><a href="#termux-api" class="headerlink" title="termux-api"></a>termux-api</h2><h3 id="安装-termux-api："><a href="#安装-termux-api：" class="headerlink" title="安装 termux-api："></a>安装 termux-api：</h3><ol><li>手机屏幕左侧右滑点击 <strong>官方插件 -&gt; Termux:Api</strong> 安装 APP</li><li>安装 termux-api 命令行工具：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install termux-api</span><br></pre></td></tr></table></figure><ul><li>注意：Termux:Api APP 需要在手机应用设置中手动设置 <strong>自启动</strong> 并开启手机的一些相应功能权限才能正常使用</li></ul><h3 id="使用-apt-install-termux-api："><a href="#使用-apt-install-termux-api：" class="headerlink" title="使用 apt install termux-api："></a>使用 apt install termux-api：</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/381044910">Termux:API 扩展用法详解：https://zhuanlan.zhihu.com/p/381044910</a></li></ul><h2 id="内网穿透（nps）"><a href="#内网穿透（nps）" class="headerlink" title="内网穿透（nps）"></a>内网穿透（nps）</h2><h3 id="有公网-IP-服务器："><a href="#有公网-IP-服务器：" class="headerlink" title="有公网 IP 服务器："></a>有公网 IP 服务器：</h3><ul><li><p><a href="https://github.com/ehang-io/nps">ehang-io&#x2F;nps 官网: https://github.com/ehang-io/nps</a></p></li><li><p><a href="https://ehang-io.github.io/nps/#/">官方文档：https://ehang-io.github.io/nps/#/</a></p></li><li><p><a href="https://github.com/ehang-io/nps/releases">ehang-io&#x2F;nps 服务端和客户端下载地址：https://github.com/ehang-io/nps/releases</a></p></li></ul><h3 id="无公网-IP-服务器："><a href="#无公网-IP-服务器：" class="headerlink" title="无公网 IP 服务器："></a>无公网 IP 服务器：</h3><ul><li><p><a href="https://www.zerotier.com/">ZeroTier 官网地址：https://www.zerotier.com/</a></p></li><li><p><a href="https://www.zerotier.com/download/">ZeroTier 客户端下载地址：https://www.zerotier.com/download/</a></p></li><li><p><a href="https://apkpure.com/zerotier-one/com.zerotier.one">ZeroTier 安卓客户端下载地址：https://apkpure.com/zerotier-one/com.zerotier.one</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> zerotermux </tag>
            
            <tag> termux </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> nps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云原生</title>
      <link href="/2023/04/02/interest/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
      <url>/2023/04/02/interest/%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h1><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><img src="/images/linux/docker.png" alt="docker.png"></p><h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><blockquote><p><a href="https://docs.docker.com/engine/install/">官网教程：https://docs.docker.com/engine/install/</a></p></blockquote><h4 id="Ubuntu-Debian-类似-："><a href="#Ubuntu-Debian-类似-：" class="headerlink" title="Ubuntu(Debian 类似)："></a>Ubuntu(Debian 类似)：</h4><ol><li>卸载旧版 Docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="keyword">do</span> sudo apt-get remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian</span></span><br><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> docker.io docker-doc docker-compose podman-docker containerd runc; <span class="keyword">do</span> sudo apt-get remove <span class="variable">$pkg</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="2"><li>更新本地包的索引，安装 Docker 所需的依赖</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><ol start="3"><li>下载 Docker 的 GPG 密钥并设置权限</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian </span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><ol start="4"><li>将 Docker 的官方 APT 源添加到 Ubuntu 系统中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debian</span></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><ol start="5"><li>安装 Docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="CentOS-7-："><a href="#CentOS-7-：" class="headerlink" title="CentOS(7)："></a>CentOS(7)：</h4><ol><li>卸载旧版本以及关联的依赖项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">        docker-client \</span><br><span class="line">        docker-client-latest \</span><br><span class="line">        docker-common \</span><br><span class="line">        docker-latest \</span><br><span class="line">        docker-latest-logrotate \</span><br><span class="line">        docker-logrotate \</span><br><span class="line">        docker-engine</span><br></pre></td></tr></table></figure><ol start="2"><li>安装必要的软件包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="3"><li>添加 Docker 的 GPG 密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>安装最新版本的 Docker 引擎及其所有依赖项</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce \</span><br><span class="line">            docker-ce-cli \</span><br><span class="line">            containerd.io \</span><br><span class="line">            docker-buildx-plugin \</span><br><span class="line">            docker-compose-plugin</span><br></pre></td></tr></table></figure><h4 id="启动与自启"><a href="#启动与自启" class="headerlink" title="启动与自启"></a>启动与自启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker --now <span class="comment"># 相当下面2个命令</span></span><br><span class="line">systemctl start docker      <span class="comment">#启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker     <span class="comment">#开机自启</span></span><br><span class="line">systemctl stop docker       <span class="comment">#停止</span></span><br><span class="line">systemctl restart docker    <span class="comment">#重启</span></span><br><span class="line">systemctl status docker     <span class="comment">#查看状态</span></span><br></pre></td></tr></table></figure><h4 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h4><ul><li><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors/">获取阿里云个人镜像加速地址：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors/</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://cg6pt9r4.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><a href="https://hub.docker.com/">Docker Hub 各类镜像地址 https://hub.docker.com/</a></li><li><strong>对于容器的镜像来说，底层直接使用宿主机的内核空间(命令查看：uname -a &#x2F; uname -r)</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 检查版本</span></span><br><span class="line">docker info <span class="comment">#查看系统信息，镜像和容器数量</span></span><br><span class="line">docker system <span class="built_in">df</span> <span class="comment"># 容器、数据卷、镜像等空间查看</span></span><br></pre></td></tr></table></figure><h4 id="镜像管理："><a href="#镜像管理：" class="headerlink" title="镜像管理："></a>镜像管理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取最新版镜像（nginx:latest 不写默认是 latest）</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="comment"># 拉取指定版本镜像</span></span><br><span class="line">docker pull nginx:1.20.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有本地镜像，-a 含历史镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除镜像，-f 强制删除</span></span><br><span class="line">docker rmi 镜像名:版本号/镜像<span class="built_in">id</span></span><br><span class="line">docker rmi -f 镜像 镜像  <span class="comment"># 删除多个镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)  <span class="comment">#删除所有镜像</span></span><br></pre></td></tr></table></figure><h4 id="容器管理："><a href="#容器管理：" class="headerlink" title="容器管理："></a>容器管理：</h4><ul><li><code>docker run</code> 创建并运行容器：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mynginx -d --restart always -p 88:80 nginx</span><br><span class="line"><span class="comment"># --name ：容器名称</span></span><br><span class="line"><span class="comment"># -d ：后台运行</span></span><br><span class="line"><span class="comment"># --restart always： 开机自启</span></span><br><span class="line"><span class="comment"># -p 本机端口:容器端口： 端口映射（本机有多个 ip 时可指定）</span></span><br><span class="line"><span class="comment"># -p 8080-8090:8080-8090：映射一个端口范围，前后必须对应</span></span><br><span class="line"></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --name my-mysql -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql mysql -uroot -p</span><br><span class="line"><span class="comment"># -it：进入 Docker 容器的交互式终端,通常与 /bin/bash 或 /bin/sh 等 shell 命令一起使用</span></span><br><span class="line"><span class="comment"># --rm ：在容器停止后自动删除</span></span><br><span class="line"><span class="comment"># -e ：设置环境变量（这里设置 mysql 密码）</span></span><br><span class="line"><span class="comment"># 镜像名后跟着的命令，表示启动容器后会自动执行的命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker ps <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps -a <span class="comment"># 查看所有</span></span><br><span class="line">docker ps -n=5 <span class="comment">#显示最近创建的5个容器</span></span><br><span class="line"><span class="comment"># 查看所有停止的容器</span></span><br><span class="line">docker ps -a -f status=exited</span><br></pre></td></tr></table></figure><ul><li>管理容器：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop 容器</span><br><span class="line"><span class="comment"># 停止所有容器</span></span><br><span class="line">docker stop $(dokcer ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start 容器</span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart 容器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除停止的容器</span></span><br><span class="line">docker <span class="built_in">rm</span>  容器</span><br><span class="line"><span class="comment"># 强制删除正在运行中的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f 容器</span><br><span class="line"><span class="comment">#全部删除</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态地更新容器的配置</span></span><br><span class="line">docker update 容器 --restart always</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker create 镜像</span><br></pre></td></tr></table></figure><ul><li>容器信息：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stats <span class="comment"># 运行状态</span></span><br><span class="line">docker logs 容器 <span class="comment"># 查看日志（-f  跟踪日志）</span></span><br><span class="line">docker top 容器 <span class="comment"># 进程信息</span></span><br><span class="line">docker inspect 容器 <span class="comment"># 查看容器元数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器 ip</span></span><br><span class="line">docker inspect \</span><br><span class="line">    --format=<span class="string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> 容器</span><br></pre></td></tr></table></figure><h3 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h3><h4 id="交互模式："><a href="#交互模式：" class="headerlink" title="交互模式："></a>交互模式：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器，开启一个新的终端</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器 /bin/bash</span><br><span class="line"><span class="comment">#进入正在运行的终端，不会启动新进程</span></span><br><span class="line">docker attach 容器</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用一个 mysql 容器进入交互模式控制另一个 mysql 容器,并在退出容器时删除</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> mysql:5.7 mysql -h容器ip -uroot -p</span><br><span class="line">docker run -it centos /bin/bash <span class="comment"># 交互式启动并进入容器</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出交互模式</span></span><br><span class="line">Ctrl+P+Q <span class="comment">#退出不停止</span></span><br></pre></td></tr></table></figure><h4 id="挂载数据："><a href="#挂载数据：" class="headerlink" title="挂载数据："></a>挂载数据：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将主机的 /data/html 挂载到容器 /usr/share/nginx/html 中</span></span><br><span class="line">docker run --name=mynginx -d -p 88:80 \</span><br><span class="line">-v /data/html:/usr/share/nginx/html:ro nginx</span><br><span class="line"><span class="comment"># ro 只读，rw 可读写（默认）</span></span><br></pre></td></tr></table></figure><h4 id="数据拷贝："><a href="#数据拷贝：" class="headerlink" title="数据拷贝："></a>数据拷贝：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 容器 内文件复制至 主机 中</span></span><br><span class="line">docker <span class="built_in">cp</span> 容器:/etc/nginx/nginx.conf /data/conf/nginx.conf</span><br><span class="line"><span class="comment"># 将 主机 中文件复制至 容器 内</span></span><br><span class="line">docker <span class="built_in">cp</span> /data/conf/nginx.conf 容器:/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h4 id="自定义网络："><a href="#自定义网络：" class="headerlink" title="自定义网络："></a>自定义网络：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户自定义网络</span></span><br><span class="line">docker network create my-net</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将已有容器连接到此网络</span></span><br><span class="line">docker network connect my-net db-mysql</span><br><span class="line"><span class="comment"># 创建容器时指定网络（容器之间可以通过容器名进行访问）</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --network my-net mysql:5.7 mysql -hdb-mysql -uroot -p</span><br></pre></td></tr></table></figure><h3 id="镜像制作与保存"><a href="#镜像制作与保存" class="headerlink" title="镜像制作与保存"></a>镜像制作与保存</h3><h4 id="生成镜像："><a href="#生成镜像：" class="headerlink" title="生成镜像："></a>生成镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将一个 容器 保存为一个新的镜像（参数可省略）</span></span><br><span class="line">docker commit -a <span class="string">&quot;作者&quot;</span> -m <span class="string">&quot;信息&quot;</span> 容器名/id 新镜像名[:版本]</span><br></pre></td></tr></table></figure><h4 id="tar-保存镜像："><a href="#tar-保存镜像：" class="headerlink" title="tar 保存镜像："></a>tar 保存镜像：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 镜像 保存成压缩包</span></span><br><span class="line">docker save -o 压缩包名.tar 镜像名[:版本]/id</span><br><span class="line"><span class="comment"># 通过压缩包加载 镜像</span></span><br><span class="line">docker load -i 压缩包名.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># export 与 import 导出和导入镜像快照</span></span><br></pre></td></tr></table></figure><h4 id="镜像推送："><a href="#镜像推送：" class="headerlink" title="镜像推送："></a>镜像推送：</h4><ol><li>为本地的一个镜像添加一个新的标签：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这个标签名应为你要上传的仓库的 命名空间(用户名)/厂库名</span></span><br><span class="line">docker tag 镜像[:版本]/id 新镜像名即标签名[:版本]</span><br><span class="line">docker tag mynginx:1.0 ruoxijun/main:v1.0</span><br></pre></td></tr></table></figure><ol start="2"><li>登录并推送到云端仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录到 DockerHub</span></span><br><span class="line">docker login</span><br><span class="line"><span class="comment"># 登录阿里云镜像仓库</span></span><br><span class="line">docker login --username=ruoxijun registry.cn-chengdu.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push 镜像名即标签名[:版本]</span><br><span class="line">docker push ruoxijun/main:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送完镜像后建议退出</span></span><br><span class="line">docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure><ol start="3"><li>拉取镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取上传的镜像（私有镜像需要登录后才能拉取）</span></span><br><span class="line">docker pull ruoxijun/main:v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索公共仓库（非公共要特殊方法）</span></span><br><span class="line">docker search ruoxijun/main</span><br><span class="line"></span><br><span class="line">docker search --<span class="built_in">limit</span> 5 镜像名称 <span class="comment"># 搜索前5个(默认前20)</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为 Dockerfile 的文件内容如下：</span></span><br><span class="line">FROM openjdk:8-jdk-slim                 <span class="comment"># 使用 openjdk:8-jdk-slim 镜像作为基础镜像</span></span><br><span class="line">LABEL maintainer=leifengyang            <span class="comment"># 作者</span></span><br><span class="line">COPY target/*.jar /app.jar              <span class="comment"># target 下所有 .jar 文件复制到容器中的 / 目录下，改为 app.jar</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]   <span class="comment"># 容器启动后运行特定命令</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Dockerfile 构建镜像（最后的点是构建目录）</span></span><br><span class="line">docker build -t java-demo:v1.0 .</span><br><span class="line"><span class="comment"># 指定文件构建镜像</span></span><br><span class="line">docker build -f /path/to/a/Dockerfile -t &lt;image-name&gt;:&lt;tag&gt; .</span><br><span class="line"><span class="comment"># 查看构建过程的历史记录</span></span><br><span class="line">docker <span class="built_in">history</span> java-demo:v1.0</span><br></pre></td></tr></table></figure><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本操作</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 开启|关闭|重启已经存在的由 docker-compose 维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br><span class="line"><span class="comment"># 运行当前内容，并重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2023/04/01/interest/Linux/"/>
      <url>/2023/04/01/interest/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><blockquote><p>命令主要针对 Linux CentOS 7 版本</p></blockquote><h2 id="认识-Linux"><a href="#认识-Linux" class="headerlink" title="认识 Linux"></a>认识 Linux</h2><h3 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h3><ul><li>Linux 中一切皆文件，它只有一个根目录 <em>&#x2F;</em> 所有的文件都挂载在这个节点下</li></ul><table><thead><tr><th>目录</th><th>作用</th></tr></thead><tbody><tr><td>bin</td><td>是 Binary 的缩写存放着最经常使用的命令</td></tr><tr><td>boot</td><td>存放 Linux 启动时使用的一些核心文件，包括连接文件和镜像文件</td></tr><tr><td>dev</td><td>Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式</td></tr><tr><td><strong>etc</strong></td><td>存放所有系统管理所需的配置文件和子目录</td></tr><tr><td><strong>home</strong></td><td>用户的主目录，在 Linux 中，每个用户都有一个自己的目录</td></tr><tr><td>lib</td><td>系统最基本的动态连接共享库（类似 Windows 的 DLL）</td></tr><tr><td>lost+found</td><td>存放系统突然关机时的一些文件</td></tr><tr><td>media</td><td>自动识别一些设备如U盘、光驱等，自动挂载到该目录下</td></tr><tr><td>mnt</td><td>让用户临时挂载文件系统（如挂载光驱）</td></tr><tr><td><strong>opt</strong></td><td>安装额外软件摆放目录</td></tr><tr><td>proc</td><td>系统内存映射虚拟目录，可通过它获取系统信息</td></tr><tr><td><strong>root</strong></td><td>系统管理员主目录</td></tr><tr><td>sbin</td><td>系统管理员使用的系统管理程序</td></tr><tr><td>srv</td><td>存放一些服务启动之后需要提取的数据</td></tr><tr><td>sys</td><td>安装了 Linux 2.6 内核新出现的一个文件系统 sysfs</td></tr><tr><td><strong>tmp</strong></td><td>存放临时文件目录（安装包等）</td></tr><tr><td><strong>usr</strong></td><td>系统默认软件放置目录</td></tr><tr><td>run</td><td>临时文件系统存储系统启动以来的信息，重启时会被清空</td></tr><tr><td>var</td><td>存放不断扩充的东西（可存放经常修改的目录文件如日志等）</td></tr></tbody></table><h2 id="常用命令操作"><a href="#常用命令操作" class="headerlink" title="常用命令操作"></a>常用命令操作</h2><h3 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h3><ul><li>命令格式：命令 [-选项] [参数]</li><li>多个选项可以写在一起共用一个 <strong>‘-‘</strong></li><li>Linux中选项前加单杠（-）是为简写，双杠（–）为全写，效果一致</li></ul><h3 id="简单命令："><a href="#简单命令：" class="headerlink" title="简单命令："></a>简单命令：</h3><ul><li>关机(shutdown)重启（reboot）命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sync</span> <span class="comment"># 将数据由内存同步到硬盘 (关机或重启前建议执行一次)</span></span><br><span class="line"></span><br><span class="line">shutdown <span class="comment"># 立即关机 (同：shutdown -h now)</span></span><br><span class="line">shutdown -h 10 <span class="comment"># 10分钟后关机(同：shutdown -h +10)</span></span><br><span class="line">shutdown -h 20:25 <span class="comment"># 指定系统时间关机</span></span><br><span class="line"></span><br><span class="line">reboot <span class="comment"># 立即重启 (同：shutdown -r now)</span></span><br><span class="line">shutdown -r +10 <span class="comment"># 十分钟后重启</span></span><br></pre></td></tr></table></figure><ul><li>ls：直接使用时表示列出当前目录下的所有非隐藏文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> 目录名 <span class="comment"># ls 后跟上路径，表示指定路径查询</span></span><br><span class="line"><span class="built_in">ls</span> -a <span class="comment"># 加上 -a选项(--all) 列出当前目录下的所有文件包括隐藏文件</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment"># -l(可加上 h 人性化显示信息)选项表示同时列出文件属性和权限</span></span><br></pre></td></tr></table></figure><ul><li>pwd：显示目前的目录</li><li>clear：清空命令行</li><li>cd 目录名：切换到指定目录</li><li>cat &#x2F;etc&#x2F;redhat-release：系统版本</li><li>修改时区为上海： <code>sudo timedatectl set-timezone Asia/Shanghai</code></li></ul><h3 id="目录命令："><a href="#目录命令：" class="headerlink" title="目录命令："></a>目录命令：</h3><ul><li>mkdir、rmdir 文件夹创建与删除</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 目录名        <span class="comment"># 创建一个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p 多级目录   <span class="comment"># 递归创建多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rmdir</span> 目录名        <span class="comment"># 删除空目录（目录中有文件，需要清空文件才能删除）</span></span><br><span class="line"><span class="built_in">rmdir</span> -p 多级目录   <span class="comment"># 递归删除多级空目录</span></span><br></pre></td></tr></table></figure><ul><li>cp 复制文件或目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [选项] 文件或目录 目标目录 <span class="comment"># 文件可直接复制（目录需要 -a || -r 选项）</span></span><br><span class="line"><span class="built_in">cp</span> -r 原目录 目标目录        <span class="comment"># 加上 -r 选项表示复制目录</span></span><br><span class="line"><span class="built_in">cp</span> -p 原目录 目标目录        <span class="comment"># -p 保留文件原属性复制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件或目录可以是多个使用空格隔开</span></span><br><span class="line"><span class="comment"># 目标目录/不在的文件名(文件夹同理)：则是为复制的文件重命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a：相当于 -d、-p、-r 选项的集合</span></span><br><span class="line"><span class="comment"># -d：如果源文件为软链接（对硬链接无效），则复制出的目标文件也为软链接</span></span><br><span class="line"><span class="comment"># -i：询问，如果目标文件已经存在，则会询问是否覆盖</span></span><br></pre></td></tr></table></figure><ul><li>mv 移动文件或目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> file1 file2 <span class="comment"># 将file1移动到file2（file2不存在则是将file1重命名为file2）</span></span><br><span class="line"><span class="comment"># -f 强制移动</span></span><br></pre></td></tr></table></figure><h3 id="文件命令："><a href="#文件命令：" class="headerlink" title="文件命令："></a>文件命令：</h3><ul><li>rm 删除文件或目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f 文件或目录 <span class="comment"># -f 不出现警告并忽略不存在的文件强制删除，可以不加但删除前会询问输入y确认</span></span><br><span class="line"><span class="built_in">rm</span> -rf  文件或目录 <span class="comment"># -r 删除目录(文件夹和文件夹内所有文件)</span></span><br></pre></td></tr></table></figure><ul><li>文件查看：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 文件名 <span class="comment"># 从第一行开始显示文件内容</span></span><br><span class="line"><span class="built_in">cat</span> -n 文件名 <span class="comment"># 显示内容时同时显示行号（还可使用命令：nl 文件名）</span></span><br><span class="line"><span class="built_in">tac</span> 文件名 <span class="comment"># 从最后一行开始显示（倒着显示）</span></span><br><span class="line"></span><br><span class="line">less 文件名 <span class="comment"># 分页显示文件内容，可用上下箭头一行一行翻页，PgUp|PgDn|空格翻页。</span></span><br><span class="line"><span class="comment"># 还可输入 / 后跟上想搜索的内容回车搜索输入 n 查找下一个 N 上一个，最后按 q 退出阅读</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> -n 行数 文件名 <span class="comment"># 显示前几行内容</span></span><br><span class="line"><span class="built_in">tail</span> -n 行数 文件名 <span class="comment"># 显示最后几行</span></span><br></pre></td></tr></table></figure><ul><li>touch 文件名(空格隔开创建多个)：在当前目录下创建一个空文件，也可改为目录名在指定目录下创建文件</li></ul><h3 id="文件属性："><a href="#文件属性：" class="headerlink" title="文件属性："></a>文件属性：</h3><h4 id="文件属性含义："><a href="#文件属性含义：" class="headerlink" title="文件属性含义："></a>文件属性含义：</h4><ul><li>执行 <code>ls -ll</code> 后每行最前面的 10 位就代表了文件的属性：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -ll</span></span><br><span class="line">lrwxrwxrwx.  1  root root     7 Mar  7  2019 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.  5  root root  4096 Jul 28  2022 boot</span><br><span class="line"><span class="comment"># 文件权限  个数 属主 属组  大小 时间         文件名</span></span><br></pre></td></tr></table></figure><p><code>lrwxrwxrwx</code> ：分别以 0-9 为坐标，0 为表示 <strong>文件类型</strong> ，剩下字符每3个为一组 1-3 表示主权限（root），4-6 表示组权限，7-9 表示其他用户权限。</p><p>文件类型： <strong>d</strong> 目录、 <strong>-</strong> 文件、 <strong>l</strong> 连接文档、 <strong>b</strong> 装置文件中可供存储的接口设备、 <strong>c</strong> 装置文件中串行端口设备（鼠标、键盘）</p><p>权限： <strong>r</strong> 可读、 <strong>w</strong> 可写、 <strong>x</strong> 可执行</p><h4 id="修改文件属性："><a href="#修改文件属性：" class="headerlink" title="修改文件属性："></a>修改文件属性：</h4><ol><li>chgrp 修改文件属组：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> 属组名 文件或目录</span><br><span class="line"><span class="built_in">chgrp</span> -R 属组名 文件或目录 <span class="comment"># 递归更改目录</span></span><br></pre></td></tr></table></figure><ol start="2"><li>chown 修改文件属主：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> 属组名 文件或目录 <span class="comment"># -R 选项递归更改目录</span></span><br><span class="line"><span class="built_in">chown</span> [-R] 属主名：属组名 文件名 <span class="comment"># 同时更改文件属组</span></span><br></pre></td></tr></table></figure><ol start="3"><li>chmod 修改文件权限：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3 组权限每组都可以使用数字表示</span></span><br><span class="line"><span class="comment"># r: 4  w: 2  x: 1</span></span><br><span class="line"><span class="built_in">chmod</span> 777 www <span class="comment"># 将 www 的三组权限都修改为 rwx(r+w+x=7)</span></span><br><span class="line"><span class="built_in">chmod</span> -R 755 www <span class="comment"># 递归将 www 的权限都修改为 drwxr-xr-x</span></span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接:"></a>链接:</h3><ul><li>硬链接：以文件副本的形式存在，不占用实际空间，不允许给目录创建硬链接，同一个文件系统中才能创建</li><li>软链接：链接文件路径，能链接目录文件，也可以跨越文件系统进行链接。当原始文件被删除后，链接文件也将失效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> [选项] 文件 链接名 <span class="comment"># 创建链接（默认硬链接）</span></span><br><span class="line"><span class="comment"># -s 软链接(符号链接)</span></span><br><span class="line"><span class="comment"># -b 覆盖以前建立的链接</span></span><br><span class="line"><span class="comment"># -d 允许超级用户制作目录的硬链接</span></span><br><span class="line"><span class="comment"># -f 强制执行</span></span><br><span class="line"><span class="comment"># -n 把符号链接视为一般目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> f1.txt <span class="comment"># 创建一个文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt;&gt; f1.txt <span class="comment"># 向文件写入文字(文件不存在则创建)</span></span><br><span class="line"><span class="built_in">ln</span> f1.txt fy <span class="comment"># 给 f1.txt 创建一个 fy 的硬链接</span></span><br><span class="line"><span class="built_in">ln</span> -s f1.txt fr <span class="comment"># 给 f1.txt 创建一个 fr 的软链接</span></span><br></pre></td></tr></table></figure><h3 id="磁盘管理："><a href="#磁盘管理：" class="headerlink" title="磁盘管理："></a>磁盘管理：</h3><ul><li>df 检查文件系统的磁盘空间占用情况:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -ahT [目录或文件名]</span><br><span class="line"><span class="comment"># -a ：列出所有的文件系统</span></span><br><span class="line"><span class="comment"># -h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示</span></span><br><span class="line"><span class="comment"># -T ：显示文件系统类型</span></span><br></pre></td></tr></table></figure><ul><li>du 对文件和目录磁盘使用的空间的查看：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [选项] [文件或目录名] <span class="comment"># 不指定目录则列出当前目录下所有文件夹容量（包括隐藏文件夹）</span></span><br><span class="line"><span class="comment"># -a、-h 同 df</span></span><br><span class="line"><span class="comment"># -s ：列出总量而已，而不列出每个各别的目录占用容量</span></span><br><span class="line"><span class="comment"># -S ：不包括子目录下的总计</span></span><br></pre></td></tr></table></figure><ul><li>磁盘挂载与卸除：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/hdc6 /mnt/hdc6 <span class="comment"># 将 /dev/hdc6 挂载到 /mnt/hdc6</span></span><br><span class="line">umount /dev/hdc6 <span class="comment"># 卸载 /dev/hdc6(-f 强制卸除)</span></span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="账号管理："><a href="#账号管理：" class="headerlink" title="账号管理："></a>账号管理：</h3><ul><li>useradd 添加用户：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd 选项 用户名</span><br><span class="line">useradd –d /home/sam -m sam <span class="comment"># -d和-m选项为sam产生一个主目录 /home/sam</span></span><br><span class="line"><span class="comment"># -c comment 指定一段注释性描述</span></span><br><span class="line"><span class="comment"># -d 指定用户主目录，如果此目录不存在，使用 -m 选项，则会创建主目录</span></span><br><span class="line"><span class="comment"># -g 指定用户所属的用户组</span></span><br></pre></td></tr></table></figure><ul><li>userdel 删除用户：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r sam <span class="comment"># 把sam用户的主目录一起删除</span></span><br></pre></td></tr></table></figure><ul><li>usermod 修改用户：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod 选项 用户名 <span class="comment"># 选项与 useradd 相同</span></span><br></pre></td></tr></table></figure><ul><li>passwd 用户密码：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="comment"># 当前用户修改密码</span></span><br><span class="line">passwd 用户名 <span class="comment"># 管理员用户修改指定用户密码</span></span><br><span class="line">passwd -d 用户名 <span class="comment"># 使账号无密码</span></span><br><span class="line"><span class="comment"># -l 锁定口令，即禁用账号</span></span><br><span class="line"><span class="comment"># -f 强迫用户下次登录时修改口令</span></span><br></pre></td></tr></table></figure><h3 id="用户组管理："><a href="#用户组管理：" class="headerlink" title="用户组管理："></a>用户组管理：</h3><blockquote><p> 用户组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">groupadd group1 <span class="comment"># 增加组 group1,组标识号是在当前最大组标识号加 1</span></span><br><span class="line">groupadd -g 101 group2 <span class="comment"># 增加组 group2，同时指定组标识号是 101</span></span><br><span class="line"></span><br><span class="line">groupdel group1 <span class="comment"># 删除组 group1</span></span><br><span class="line"></span><br><span class="line">groupmod -g 102 group2 <span class="comment"># 将组 group2 的组标识号修改为 102</span></span><br><span class="line">groupmod –g 100 -n group3 group2 <span class="comment"># 将组 group2 的标识号改为 100，组名修改为 group3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户同时属于多个用户组，那么用户可以在用户组之间切换</span></span><br><span class="line">newgrp root <span class="comment"># 当前用户切换到root用户组</span></span><br></pre></td></tr></table></figure><h3 id="用户文件"><a href="#用户文件" class="headerlink" title="用户文件"></a>用户文件</h3><ol><li><code>/etc/passwd</code> 文件：</li></ol><p>每个用户都在&#x2F;etc&#x2F;passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line"><span class="comment"># /etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段</span></span><br><span class="line"><span class="comment"># 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span></span><br></pre></td></tr></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="进程管理："><a href="#进程管理：" class="headerlink" title="进程管理："></a>进程管理：</h3><ul><li><code>|</code> : 管道符， <code>grep</code> : 指定文本内容进行过滤，并返回符合条件的行</li></ul><ol><li><code>ps</code> 查看正在服务器上执行的进程相关信息的列表</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br><span class="line">ps -aux|grep nginx <span class="comment"># 查看 nginx 相关进程</span></span><br><span class="line"><span class="comment"># -a：表示显示所有用户的进程列表</span></span><br><span class="line"><span class="comment"># -u：以详细的格式输出进程状态</span></span><br><span class="line"><span class="comment"># -x：表示显示无控制终端的进程</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>pstree</code> 以树状图的方式展现进程之间的派生关系</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pstree -aup</span><br><span class="line"><span class="comment"># -a：显示每个程序的完整指令，包含路径、参数或是常驻服务的标示</span></span><br><span class="line"><span class="comment"># -u：以用户为主的格式列出进程</span></span><br><span class="line"><span class="comment"># -p：在树形结构中显示每个进程的进程编号（PID）</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>kill</code> 终止指定进程</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -15 123 <span class="comment"># 强制停止 PID 为 123 的进程</span></span><br><span class="line"><span class="comment"># -9 或 -SIGKILL：强制停止进程</span></span><br><span class="line"><span class="comment"># -15 或 -SIGTERM：请求进程自行退出，否则强制进程终止（推荐）</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>nohup</code> 使命令在后台运行而不受当前终端断开的影响</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar file.jar &gt; output.log &amp;</span><br><span class="line"><span class="comment"># 输入该命令后，您会看到它进程的 PID</span></span><br><span class="line"><span class="comment"># 将程序运行期间产生的所有输出保存到 output.log</span></span><br><span class="line"><span class="comment"># &amp;：在命令结尾加上“&amp;”符号，意味着在后台运行该程序</span></span><br><span class="line">ps aux | grep file.jar <span class="comment"># 查看该进程</span></span><br></pre></td></tr></table></figure><h3 id="端口管理："><a href="#端口管理：" class="headerlink" title="端口管理："></a>端口管理：</h3><ol><li><strong>CentOS</strong> 端口管理依赖 <strong>firewalld</strong> 防火墙</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld <span class="comment"># 开启防火墙</span></span><br><span class="line">firewall-cmd --list-ports <span class="comment"># 查看所有开启的端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent <span class="comment"># 开放 8080 端口</span></span><br><span class="line"><span class="comment"># --zone 作用域</span></span><br><span class="line"><span class="comment"># --permanent 永久生效，没有此参数重启后失效</span></span><br><span class="line"><span class="comment"># --remove-port 可关闭端口</span></span><br><span class="line"></span><br><span class="line">systemctl restart firewalld.service <span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload <span class="comment"># 重新加载</span></span><br><span class="line"></span><br><span class="line">netstat -ntlp <span class="comment"># 查看当前所有tcp端口</span></span><br><span class="line">netstat -ntulp |grep 8080 <span class="comment"># 查看所有 8080 端口使用情况</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Ubuntu</strong> 一般默认有 <strong>iptables</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install iptables <span class="comment"># sudo 以管理员运行安装 iptables</span></span><br><span class="line"></span><br><span class="line">iptables -I INPUT -p tcp --dport 8080 -j ACCEPT <span class="comment"># 开放 8080 端口</span></span><br><span class="line">iptables-save <span class="comment"># 保存规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器重启上述规则就没有了，需要对规则进行持久化</span></span><br><span class="line">sudo apt-get install iptables-persistent <span class="comment"># 安装 iptables-persistent</span></span><br><span class="line">sudo netfilter-persistent save <span class="comment"># 保存</span></span><br><span class="line">sudo netfilter-persistent reload <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><h2 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h2><h3 id="安装工具："><a href="#安装工具：" class="headerlink" title="安装工具："></a>安装工具：</h3><table><thead><tr><th>功能</th><th>CentOS</th><th>Ubuntu</th></tr></thead><tbody><tr><td>更新软件包列表</td><td><code>yum update</code></td><td><code>apt update</code></td></tr><tr><td>安装软件包</td><td><code>yum install &lt;package&gt;</code></td><td><code>apt install &lt;package&gt;</code></td></tr><tr><td>查看已安装软件包列表</td><td><code>yum list installed</code></td><td><code>dpkg -l</code> 或 <code>apt list</code></td></tr><tr><td>卸载软件包</td><td><code>yum remove &lt;package&gt;</code></td><td><code>apt remove &lt;package&gt;</code></td></tr><tr><td>清理不再使用的依赖</td><td><code>yum autoremove</code></td><td><code>apt autoremove</code></td></tr></tbody></table><ol><li><p>一般Linux 系统基本上分两大类：</p><ul><li><p><strong>RedHat</strong> 系列：Redhat、 <strong>Centos</strong> 、Fedora 等</p></li><li><p><strong>Debian</strong> 系列：Debian、 <strong>Ubuntu</strong> 等</p></li></ul></li><li><p>软件包管理器 <strong>dpkg&#x2F;apt</strong> 是针对基于 Debian 的发行版，而  <strong>yum&#x2F;rpm</strong> 则是针对基于 RedHat 的发行版。</p></li><li><p>apt 是基于 dpkg 的软件包管理器，dpkg 是一个底层工具，可以处理 <strong>.deb</strong> 格式的软件包文件。</p></li><li><p>yum 是基于 rpm 包管理器的软件包管理器，用于处理 <strong>.rpm</strong> 格式的软件包文件。</p></li></ol><h3 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h3><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu 清华软件镜像源 ：https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu</a></p><p><a href="https://developer.aliyun.com/mirror/ubuntu">ubuntu 阿里软件镜像源：https://developer.aliyun.com/mirror/ubuntu</a></p></blockquote><h4 id="1-yum-安装："><a href="#1-yum-安装：" class="headerlink" title="1. yum 安装："></a>1. yum 安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum check-update <span class="comment"># 列出所有可更新的软件清单命令</span></span><br><span class="line">yum update <span class="comment"># 更新所有软件命令</span></span><br><span class="line">yum update &lt;package_name&gt; <span class="comment"># 仅更新指定的软件命令</span></span><br><span class="line"></span><br><span class="line">yum remove &lt;package_name&gt; <span class="comment"># 删除软件包命令</span></span><br><span class="line">yum clean all <span class="comment"># 清除缓存目录下的软件包及旧的 headers</span></span><br><span class="line"></span><br><span class="line">yum -y install &lt;package_name&gt; <span class="comment"># 安装指定的软件，按默认值</span></span><br><span class="line"></span><br><span class="line">yum list <span class="comment"># 列出所有可安裝的软件清单命令</span></span><br><span class="line">yum search &lt;keyword&gt; <span class="comment"># 查找软件包命令</span></span><br></pre></td></tr></table></figure><ul><li><code>yum</code> 与 <code>rpm</code> 类似也能安装本地 rpm 包，它能自动的解决包之间的依赖问题，而 <code>rpm</code> 需要手动解决 rpm 包之间的依赖问题</li><li>yum 换源：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份配置</span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 下载阿里云 yum 配置源</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="comment"># 腾讯云 yum 配置源 https://mirrors.cloud.tencent.com/repo/centos7_base.repo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存，生成新的缓存，更新系统软件包</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="2-rpm-安装："><a href="#2-rpm-安装：" class="headerlink" title="2. rpm 安装："></a>2. rpm 安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep jdk <span class="comment"># 查看所有已安装的软件包中包含 jdk 的软件包名称和版本</span></span><br><span class="line"><span class="comment"># jdk1.8-1.8.0_361-fcs.x86_64 # 假如查到信息，下面用它卸载</span></span><br><span class="line">rpm -e --nodeps jdk1.8-1.8.0_361-fcs.x86_64 <span class="comment"># 卸载程序</span></span><br><span class="line"></span><br><span class="line">rpm -ivh jdk-8u361-linux-x64.rpm <span class="comment"># 安装程序（i：安装，v：安装过程，h：进度条）</span></span><br></pre></td></tr></table></figure><ul><li>因为在 RPM 安装时，程序会自动将相关可执行文件安装到系统默认的路径中，而这些路径已经被添加到系统环境变量 <code>PATH</code> 中，所以可以直接在终端或命令提示符中使用相关命令，无需手动配置环境变量</li></ul><h4 id="3-压缩包安装："><a href="#3-压缩包安装：" class="headerlink" title="3. 压缩包安装："></a>3. 压缩包安装：</h4><h5 id="jdk-安装配置："><a href="#jdk-安装配置：" class="headerlink" title="jdk 安装配置："></a>jdk 安装配置：</h5><ul><li><p>压缩包方式安装 jdk 需要配置环境变量</p></li><li><p>配置有两种方式：</p><ul><li><code>/etc/profile</code> 文件，在文件末尾添加配置</li><li>进入 <code>/etc/profile.d/</code> 目录，在该目录中新建一个 <code>.sh</code> 文件（ <strong>推荐</strong> ）</li></ul></li><li><p>安装前应 <code>java -version</code> 和 <code>rpm -qa|grep jdk</code> 检查 jdk 是否已安装</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u291-linux-x64.tar.gz -C /usr/local/java/ <span class="comment"># 解压安装 jdk</span></span><br><span class="line"><span class="comment"># -zxvf 选项适用于解压缩 .tar.gz 或 .tgz 格式的文件</span></span><br><span class="line"><span class="comment"># -xvf 单纯地解开归档文件，适用于解压缩普通的 .tar 格式文件</span></span><br><span class="line"><span class="comment"># -C 解压到指定目录</span></span><br><span class="line"></span><br><span class="line">vim /etc/profile.d/jdkenv.sh <span class="comment"># 新建并打开 jdkenv.sh</span></span><br><span class="line"><span class="comment"># 在 jdkenv.sh 中添加如下 jdk 配置</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># wq 保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile <span class="comment"># 使配置生效</span></span><br><span class="line">java -version <span class="comment"># 检查是否生效</span></span><br></pre></td></tr></table></figure><h3 id="安装细节："><a href="#安装细节：" class="headerlink" title="安装细节："></a>安装细节：</h3><h4 id="Tomcat-自启动："><a href="#Tomcat-自启动：" class="headerlink" title="Tomcat 自启动："></a>Tomcat 自启动：</h4><p>tomcat 启动前如端口冲突需修改 <code>server.xml</code> 文件中 <code>Connector</code> 与 <code>Server</code> 的 <code>port</code> ，默认重启后不会自启动需要添加自启动服务，同样它也能执行自启动脚本</p><ol><li>创建自启动要执行的脚本：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">sudo /home/ruoxijun/apache-tomcat-9.0.73/bin/shutdown.sh</span><br><span class="line">sudo /home/ruoxijun/apache-tomcat-9.0.73/bin/startup.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>/etc/systemd/system/</code> 下创建自启动服务文件如 <code>startup.service</code> 内容如下：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Startup Script</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">ExecStart=/home/ruoxijun/apache-tomcat-9.0.73/bin/startup.sh</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><code>ExecStart</code> 是你要执行的脚本地址</li></ul><ol start="3"><li>开启自启动服务：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload <span class="comment"># 重载 Systemd 配置</span></span><br><span class="line">systemctl <span class="built_in">enable</span> startup.service <span class="comment"># 启用自启动服务</span></span><br><span class="line">systemctl start startup.service <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><h4 id="MySQL-安装："><a href="#MySQL-安装：" class="headerlink" title="MySQL 安装："></a>MySQL 安装：</h4><ol><li>下载：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></li></ol><p>centos 7 版本应选择的 MySQL 安装包为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release <span class="comment"># 查看系统版本</span></span><br><span class="line"><span class="built_in">uname</span> -m <span class="comment"># 查看服务器架构类型（arm、x86）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载界面选择下载</span></span><br><span class="line">Select Operating System:</span><br><span class="line">Red Hat Enterprise Linux / Oracle Linux <span class="comment"># 选择</span></span><br><span class="line">Select OS Version:</span><br><span class="line">Red Hat Enterprise Linux 7 / Oracle Linux 7 (x86, 64-bit) <span class="comment"># 选择</span></span><br><span class="line">(mysql-8.0.32-1.el7.x86_64.rpm-bundle.tar) <span class="comment"># 下载</span></span><br></pre></td></tr></table></figure><ol start="2"><li>删除自带的 <strong>mariadb</strong> 否则容易导致出错：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb <span class="comment"># 查看现有 mariadb</span></span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64 <span class="comment"># 删除 mariadb</span></span><br></pre></td></tr></table></figure><ol start="3"><li>MySQL 压缩包解压后有大量的 rmp 包：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> mysql</span><br><span class="line">tar -xvf mysql-8.0.32-1.el7.x86_64.rpm-bundle.tar -C ./mysql <span class="comment"># 解压</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只需要安装 common、libs、client、server 4项</span></span><br><span class="line">rpm -ivh mysql-community-common-8.0.32-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.32-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.32-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.32-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.32-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.32-1.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># 其中 libs 需要依赖 client-plugins，server 需要 icu-data-files 注意先后顺序</span></span><br><span class="line"><span class="comment"># 可在每行命令后面添加 --nodeps --force 强制安装且忽略包之间的依赖关系</span></span><br></pre></td></tr></table></figure><ol start="4"><li>启动 MySQL 服务：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld <span class="comment"># 查看 MySQL 服务状态</span></span><br><span class="line">systemctl start mysqld <span class="comment"># 启动 MySQL 服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld <span class="comment"># 开启 MySQL 自启动服务</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> /var/log/mysqld.log|grep password <span class="comment"># 通过日志查看密码</span></span><br><span class="line"><span class="comment"># A temporary password is generated for root@localhost: _6_6jZoiLSzf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行MySQL安全性脚本，进行安全配置修改密码等，通过日志的密码进去</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">mysql -uroot -p <span class="comment"># 登录数据库</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;密码&#x27;</span> <span class="comment"># 也可修改密码</span></span><br><span class="line"><span class="comment"># 1. 开启远程访问 % 表示任意 IP 都能访问</span></span><br><span class="line">create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line"><span class="comment"># 2. 授予 root 用户在所有数据库和表上执行任何操作的权限</span></span><br><span class="line">grant all privileges on *.* to <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> with grant option;</span><br><span class="line"><span class="comment"># 3. 重新加载授权表</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment"># 4. 最后开启 3306 端口即可远程访问</span></span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul><li><a href="https://www.yuque.com/wukong-zorrm/cql6cz">参考：nginx 一小时入门教程 (https://www.yuque.com/wukong-zorrm/cql6cz)</a></li></ul><h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><ol><li>确保已安装以下软件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils net-tools epel-release</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 nginx 的软件包到 yum 存储库中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/nginx.repo &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[nginx-stable]</span></span><br><span class="line"><span class="string">name=nginx stable repo</span></span><br><span class="line"><span class="string">baseurl=http://nginx.org/packages/centos/\$releasever/\$basearch/</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgkey=https://nginx.org/keys/nginx_signing.key</span></span><br><span class="line"><span class="string">module_hotfixes=true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ol start="3"><li>安装 nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><ol start="4"><li>systemctl 启动 nginx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx <span class="comment"># 开启 nginx 服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx <span class="comment"># 开机自启动</span></span><br><span class="line"></span><br><span class="line">systemctl status nginx <span class="comment"># 状态</span></span><br><span class="line">systemctl stop nginx <span class="comment"># 停止服务</span></span><br><span class="line">systemctl reload nginx <span class="comment"># 重载服务</span></span><br></pre></td></tr></table></figure><h3 id="Nginx-基础"><a href="#Nginx-基础" class="headerlink" title="Nginx 基础"></a>Nginx 基础</h3><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nginx <span class="comment"># 启动</span></span><br><span class="line">nginx -s stop <span class="comment"># 立即停止</span></span><br><span class="line">nginx -s quit <span class="comment"># 执行完当前请求再停止</span></span><br><span class="line"></span><br><span class="line">nginx -s reload <span class="comment"># 重新加载配置文件</span></span><br><span class="line">nginx -t <span class="comment"># 测试配置文件</span></span><br><span class="line">nginx -s reopen <span class="comment"># 将日志写入一个新的文件</span></span><br></pre></td></tr></table></figure><ul><li>日志位于： <code>/var/log/nginx/</code></li></ul><h4 id="基础配置："><a href="#基础配置：" class="headerlink" title="基础配置："></a>基础配置：</h4><ul><li>配置文件位于 <code>/etc/nginx/nginx.conf</code> 它的 http 中有这样一句：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br></pre></td></tr></table></figure><ul><li>它表示会引用 <code>/etc/nginx/conf.d</code> 目录下所有的 <code>.conf</code> 文件，而 <code>/etc/nginx/conf.d/default.conf</code> 提供了默认配置：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html; <span class="comment"># 根目录</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm; <span class="comment"># 首页</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件基本结构：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">  server&#123; <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> &#123;&#125;</span><br><span class="line">    <span class="section">location</span> &#123;&#125; <span class="comment"># 可配置多个</span></span><br><span class="line">  &#125;</span><br><span class="line">  server&#123;&#125; <span class="comment"># 可配置多个</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个 <code>server</code> 配置，<code>listen</code> + <code>server_name</code> 不能重复</li><li><code>listen</code> 需要监听的 IP:端口</li><li><code>server_name</code> 主要用于区分 <code>server</code> ，可以随便起</li><li>当多个 <code>server</code> 监听同一端口，那么访问时会根据 <code>server_name</code> 与域名(主机名)匹配</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl http://localhost:80 匹配</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># curl http://nginx-dev:80 匹配</span></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> nginx-dev; <span class="comment">#主机名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><ul><li><code>location</code> 后面的路径会追加到 <code>root</code> 路径后面，访问 <code>location</code> 配置的路径资源将匹配 <code>root</code> + <code>location</code> + 资源路径</li></ul><h4 id="http-反向代理"><a href="#http-反向代理" class="headerlink" title="http 反向代理"></a>http 反向代理</h4><ul><li><p>正向代理：在 <strong>客户端</strong> 代理转发请求称为正向代理(如 VPN)</p></li><li><p>反向代理：在 <strong>服务器端</strong> 代理转发请求称为反向代理</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8001</span>;</span><br><span class="line">  <span class="attribute">server_name</span> ruoyi.localhost;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088; <span class="comment"># 代理地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>proxy_pass</code> + <code>location</code> 与 <code>root</code> + <code>location</code> 类似，前者 http 后者静态代理</li></ul><h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment">#nginx的主机地址</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="comment">#用户端真实的IP，即客户端IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>$host</code> nginx 主机 IP</p></li><li><p><code>$http_host</code> nginx 主机 IP 和端口</p></li><li><p><code>$proxy_host</code> proxy_pass 中配置的主机名和端口</p></li><li><p><code>$remote_addr</code> 客户端 IP</p></li></ul><h4 id="修饰符："><a href="#修饰符：" class="headerlink" title="修饰符："></a>修饰符：</h4><p>location 修饰符按优先级排序如下：</p><ul><li><p><code>=</code> 精确匹配</p></li><li><p><code>^~</code> 普通字符前缀匹配</p></li><li><p><code>~</code> 正则匹配，区分大小写</p></li><li><p><code>~*</code> 正则匹配，不区分大小写</p></li></ul><h4 id="缓冲-buffer"><a href="#缓冲-buffer" class="headerlink" title="缓冲(buffer)"></a>缓冲(buffer)</h4><p>缓冲一般放在内存中，如果超过指定大小，则会将响应写入磁盘临时文件中</p><p>nginx 将响应体读取并缓冲到内存或磁盘中，然后再由 nginx 返回响应给客户端，这样既可以 <strong>提前释放服务端的连接</strong>  又可以避免请求连接耗时过长导致 <strong>连接积压</strong></p><ul><li><code>proxy_buffering on;</code> nginx 默认启用缓冲，关闭设置为 <code>off</code></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">16</span> <span class="number">4k</span>; <span class="comment"># 一个请求的缓冲区数量和大小</span></span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">2k</span>; <span class="comment"># 缓冲响应的头部信息大小(包括但不限于)</span></span><br><span class="line">    <span class="comment"># proxy_max_temp_file_size # 设置临时文件的最大值。</span></span><br><span class="line">    <span class="comment"># proxy_temp_file_write_size # 设置一次写入临时文件的大小</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://localhost:8088;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存-cache"><a href="#缓存-cache" class="headerlink" title="缓存(cache)"></a>缓存(cache)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 定义缓存的本地文件目录，名称和大小</span></span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /nginx/cache keys_zone=nginxcache:<span class="number">10m</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_cache</span> nginxcache; <span class="comment"># 指定使用哪个缓存区</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">404</span>      <span class="number">1m</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> any <span class="number">5m</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://localhost:8000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>proxy_cache_valid</code> 设置不同状态码响应的缓存时间为多少分钟</li></ul><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol><li>轮询(默认使用)</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置负载均衡的服务</span></span><br><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8003</span>;</span><br><span class="line">  <span class="attribute">server_name</span> server;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://my-server; <span class="comment"># 使用负载均衡服务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>最小连接(least-connected)</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮循和最小连接的负载平衡，每个客户端的请求都可能分发到不同的服务器</p><ol start="3"><li>ip_hash</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端的 IP 地址将用作哈希键，来自同一个ip的请求会被转发到相同的服务器(除非此服务器不可用)</p><ol start="4"><li>hash</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 hash key，key 可以是字符串、变量或组合</p><ol start="5"><li>随机(random)</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    <span class="attribute">random</span> two least_conn;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个请求都将传递到随机选择的服务器，two 是可选参数，在考虑服务器权重的情况下随机选择两台服务器，使用指定的方法选择其中一台，默认为选择连接数最少(least_conn)的服务器</p><ol start="6"><li>权重(weight)</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每 3 个请求有两个会到 8080</p><ol start="7"><li>健康检查</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> my-server &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 nginx 无法向服务器发送请求或在 30 秒内请求失败次数超过 3 次，则会将服务器标记为不可用 30 秒</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl</title>
      <link href="/2023/03/02/interest/wsl/"/>
      <url>/2023/03/02/interest/wsl/</url>
      
        <content type="html"><![CDATA[<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p><a href="https://zhuanlan.zhihu.com/p/348813745">安装 WSL2 并下载配置 Ubuntu (zhihu.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>通过Windows Store 直接搜索 Ubuntu，进行安装即可。</p><h3 id="快速进入默认的-Linux-发行版："><a href="#快速进入默认的-Linux-发行版：" class="headerlink" title="快速进入默认的 Linux 发行版："></a>快速进入默认的 Linux 发行版：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><h3 id="迁移-wsl："><a href="#迁移-wsl：" class="headerlink" title="迁移 wsl："></a>迁移 wsl：</h3><blockquote><p>因为通过 Windows Store 安装默认在 C 盘会导致 C 盘压力过大因此我们将系统需要将系统迁移到其它磁盘，来减小 C 盘压力。</p></blockquote><h4 id="1-终止正在运行的-wsl"><a href="#1-终止正在运行的-wsl" class="headerlink" title="1. 终止正在运行的 wsl:"></a>1. 终止正在运行的 wsl:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h4 id="2-查看系统列表名称："><a href="#2-查看系统列表名称：" class="headerlink" title="2. 查看系统列表名称："></a>2. 查看系统列表名称：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l</span><br></pre></td></tr></table></figure><h5 id="显示："><a href="#显示：" class="headerlink" title="显示："></a>显示：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">适用于 Linux 的 Windows 子系统分发版:</span><br><span class="line">Ubuntu-22.04 (默认)</span><br></pre></td></tr></table></figure><p>注意这里的 <code>Ubuntu-22.04 (默认)</code> 字样中 <code>Ubuntu-22.04</code> 是你的 Linux 系统对应名称，后面的默认字样代表这个系统是你的默认Linux发行版。即 <code>wsl</code> 命令默认启动该系统。</p><h4 id="3-将需要迁移的-Linux-进行导出"><a href="#3-将需要迁移的-Linux-进行导出" class="headerlink" title="3. 将需要迁移的 Linux 进行导出:"></a>3. 将需要迁移的 Linux 进行导出:</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu-22.04 D:/ubuntu/export.tar</span><br></pre></td></tr></table></figure><p><code>wsl --export</code> 后面是你查出的系统名称 <code>Ubuntu-22.04</code> ，系统名称后面 <code>D:/ubuntu/export.tar</code> 表示 Linux 导入的路径与文件名。</p><h4 id="4-卸载："><a href="#4-卸载：" class="headerlink" title="4. 卸载："></a>4. 卸载：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu-22.04</span><br></pre></td></tr></table></figure><h4 id="5-将导出的-Linux-导入："><a href="#5-将导出的-Linux-导入：" class="headerlink" title="5. 将导出的 Linux 导入："></a>5. 将导出的 Linux 导入：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu D:/ubuntu/ D:/ubuntu/export.tar --version 2</span><br></pre></td></tr></table></figure><p>参数解析： <code>wsl --import [Linux 系统名称] [存放路径] [导入的 Linux 源文件] --version 2</code></p><p>我的用户名称与密码：ruoxijun 123456</p><h3 id="解决-wsl-中文乱码："><a href="#解决-wsl-中文乱码：" class="headerlink" title="解决 wsl 中文乱码："></a>解决 wsl 中文乱码：</h3><ol><li>打开 wsl 执行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><ol start="2"><li>使用空格键选中 <code>en_US.UTF-8</code> 、 <code>zh_CN.UTF-8</code> ，使用 Tab 键切换至 OK ，再将 <code>en_US.UTF-8</code> 选为默认。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/07/09/vue/TypeScript/"/>
      <url>/2022/07/09/vue/TypeScript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h2 id="TS-环境与常用命令"><a href="#TS-环境与常用命令" class="headerlink" title="TS 环境与常用命令"></a>TS 环境与常用命令</h2><h3 id="1-环境安装："><a href="#1-环境安装：" class="headerlink" title="1. 环境安装："></a>1. 环境安装：</h3><ul><li>安装 TypeScript 编译工具：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><ul><li>查看 TypeScript 版本：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -V</span><br></pre></td></tr></table></figure><h3 id="2-常用命令："><a href="#2-常用命令：" class="headerlink" title="2. 常用命令："></a>2. 常用命令：</h3><ol><li>编译 <strong>ts</strong> 文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc demo.ts</span><br></pre></td></tr></table></figure><p>编译完成后会生成同名 js 文件，使用 node 命令 <code>node demo.js</code> 执行文件。</p><ol start="2"><li>监听 <strong>ts</strong> 文件变化并及时编译：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc demo.ts -w</span><br></pre></td></tr></table></figure><ol start="3"><li>生成 <strong>tsconfig.json</strong> 配置文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>此命令会在当前文件夹中生成 ts 配置文件，并且执行 <code>tsc</code> 命令会自动根据 <strong>tsconfig.json</strong> 配置编译当前文件夹以及子文件夹中的所有 <strong>ts</strong> 文件。</p><p>执行 <code>tsc -w</code> 会监听当前文件夹内（包括子文件夹）的所有 <strong>ts</strong> 文件并及时编译。</p><p>配置文件中 <code>&quot;outDir&quot;: &quot;./&quot;</code> 可以指定文件编译后所在位置。</p><h3 id="3-ts-node"><a href="#3-ts-node" class="headerlink" title="3. ts-node:"></a>3. ts-node:</h3><p>ts-node (非必要安装)可以直接运行 ts 文件不需要我们先编译在执行。</p><ul><li>安装 ts-node:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ts-node</span><br></pre></td></tr></table></figure><ul><li>运行 ts 文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node demo.ts</span><br></pre></td></tr></table></figure><h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><p><strong>tsconfig.json</strong> 是 TypeScript 的配置文件，其中常见配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 配置编译选项</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块化模式（如 es6 模块化模式）</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定编译后的 js 版本</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译时引入的 es 库</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./build&quot;</span><span class="punctuation">,</span> <span class="comment">// 输出目录</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./build/app.js&quot;</span><span class="punctuation">,</span> <span class="comment">// 将编译后的 js 合并到某个文件（module 必须为 amd 或 system）</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许 js 编译</span></span><br><span class="line">    <span class="attr">&quot;checkjs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 检查 js</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 编译后删除注释</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 只检查不编译生成 js 文件</span></span><br><span class="line">    <span class="attr">&quot;noEmitOnError&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 有错误时不生成编译文件</span></span><br><span class="line">    <span class="attr">&quot;alwaysStrict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// js 使用严格模式</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 存在隐式 any 时报错</span></span><br><span class="line">    <span class="attr">&quot;noImplicitReturns&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 不存在 return 时报错</span></span><br><span class="line">    <span class="attr">&quot;noImplicitThis&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// this 可能为 any 时报错</span></span><br><span class="line">    <span class="attr">&quot;strictNullChecks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 严格的检查空值</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 检查的总开关</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定编译</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;./src/**/*&quot;</span><span class="punctuation">,</span> <span class="comment">// 编译src下面已经子目录下面的所有文件</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 排除目录</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span> <span class="comment">// 单独设置需要编译的文件（不常用）</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意使用命令行模式 <code>tsc fileName.ts</code> 方式编译会忽略 <strong>tsconfig</strong> 配置。</p><h2 id="TypeScript-语法"><a href="#TypeScript-语法" class="headerlink" title="TypeScript 语法"></a>TypeScript 语法</h2><h3 id="1-基础类型："><a href="#1-基础类型：" class="headerlink" title="1. 基础类型："></a>1. 基础类型：</h3><ul><li><p>TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准。</p></li><li><p>TypeScript 是一种给 JavaScript 添加特性的语言扩展。</p></li></ul><ol><li>类型声明与基础语法：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test; <span class="comment">// let test:any; // 表示可以是任意类型的值</span></span><br><span class="line">test = <span class="literal">true</span>;</span><br><span class="line">test = <span class="string">&quot;str&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">string</span> = <span class="string">&quot;str&quot;</span>; <span class="comment">// 声明变量同时声明类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isTrue = <span class="literal">true</span>; <span class="comment">// 声明变量时赋值，会使用值的类型作为限制</span></span><br><span class="line"><span class="comment">// isTrue = &quot;str&quot;; // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定方法参数只能为个数2且都为 number 类型，限定返回值为 number</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1:<span class="built_in">number</span>, num2:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// sum 类型也被限定为方法的返回值类型</span></span><br><span class="line"><span class="comment">// sum = &quot;str&quot;; // 报错，sum 只能为 number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">info</span>: <span class="built_in">string</span>|<span class="built_in">number</span>; <span class="comment">// 联合类型，这里表示可以为 string 或 number 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">string</span>|<span class="built_in">number</span>)[]; <span class="comment">// 数组值可以是数字或字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:<span class="number">10</span>; <span class="comment">// 字面量</span></span><br><span class="line"><span class="comment">// num = 11; // 报错，只能为10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sex</span>:<span class="string">&quot;nan&quot;</span>|<span class="string">&quot;nv&quot;</span>; <span class="comment">// 值只能为这两个</span></span><br></pre></td></tr></table></figure><ol start="2"><li>TS 的基础类型：</li></ol><table><thead><tr><th>数据类型</th><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>数字</td><td>number</td><td><code>let num:number = 1;</code></td></tr><tr><td>字符串</td><td>string</td><td><code>let str:string = &quot;str&quot;;</code></td></tr><tr><td>布尔</td><td>boolean</td><td><code>let flag:boolean = true;</code></td></tr><tr><td>数组</td><td>Array 或 []</td><td><code>let arr:number[];</code> 或 <code>let arr:Array&lt;number&gt;;</code></td></tr><tr><td>元组</td><td></td><td><code>let arr:[number, string]</code> 数组长度限定且位置指定类型</td></tr><tr><td>枚举</td><td>enum</td><td><code>enum Color &#123;Red, Green&#125;</code> 使用： <code>let c:Color = Color.Red;//1</code></td></tr><tr><td>void</td><td>void</td><td>标识方法返回值类型，表示该方法没有返回值</td></tr><tr><td>null</td><td>null</td><td>空值</td></tr><tr><td>undefined</td><td>undefined</td><td>变量为未定义的值</td></tr><tr><td>never</td><td>never</td><td>永远不会出现的值（方法中死循环、方法抛出异常）</td></tr><tr><td>any</td><td>any</td><td>任意类型</td></tr><tr><td>unknown</td><td>unknown</td><td>安全类型的 any（不能直接赋值给其它变量，可以赋值给 any）</td></tr></tbody></table><ul><li>unknown 赋值方式：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">test</span>:<span class="built_in">unknown</span> = <span class="number">0</span>;</span><br><span class="line">test = <span class="string">&quot;str&quot;</span>; <span class="comment">// 接收任意类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">string</span> = <span class="string">&quot;str&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// str = test; // 直接赋值报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> test === <span class="string">&quot;string&quot;</span>) &#123; <span class="comment">// 类型判断</span></span><br><span class="line">  str = test;</span><br><span class="line">&#125;</span><br><span class="line">str = test <span class="keyword">as</span> <span class="built_in">string</span>; <span class="comment">// 断言</span></span><br><span class="line">str = &lt;<span class="built_in">string</span>&gt;test;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>:<span class="built_in">any</span> = test; <span class="comment">// any 可以接收 unknown 类型</span></span><br><span class="line">str = s;</span><br></pre></td></tr></table></figure><ul><li>二维元组：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">string</span>,<span class="built_in">number</span>][] = [</span><br><span class="line">  [<span class="string">&quot;str&quot;</span>,<span class="number">1</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>type 别名：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当同一限定类型需要多次使用时我们可以为其取别名</span></span><br><span class="line"><span class="keyword">type</span> myType = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">val</span>:myType = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="2-对象与函数："><a href="#2-对象与函数：" class="headerlink" title="2. 对象与函数："></a>2. 对象与函数：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123; <span class="comment">// 声明时属性已确定</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;o&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// o.age = 18; // 报错，只能操作对象声明的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>:&#123;<span class="attr">name</span>:<span class="built_in">string</span>, age?:<span class="built_in">number</span>&#125;; <span class="comment">// 声明对象模板，问号表示属性为可选属性</span></span><br><span class="line">user = &#123;<span class="attr">name</span>: <span class="string">&quot;user&quot;</span>&#125;</span><br><span class="line"><span class="comment">// let user:&#123;name:string&#125; = &#123;name: &quot;user&quot;&#125;; // 声明时赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在属性不确定时可以使用 [name:string]:any 接收任意属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">userinfo</span>:&#123;<span class="attr">name</span>:<span class="built_in">string</span>, [<span class="attr">name</span>:<span class="built_in">string</span>]:<span class="built_in">any</span>&#125;</span><br><span class="line">userinfo = &#123;<span class="attr">name</span>: <span class="string">&quot;userinfo&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&quot;nv&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp; 类型约束</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>: &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;;</span><br><span class="line">o = &#123;<span class="attr">name</span>:<span class="string">&quot;o&quot;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数约束</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun1</span>:<span class="function">(<span class="params">a:<span class="built_in">number</span>, b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>; <span class="comment">// 两个参数为 number，返回值为number</span></span><br><span class="line">fun1 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a*b;</span><br></pre></td></tr></table></figure><h3 id="3-断言（as）："><a href="#3-断言（as）：" class="headerlink" title="3. 断言（as）："></a>3. 断言（as）：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">n:<span class="built_in">string</span>|<span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">len</span>:<span class="built_in">number</span>;</span><br><span class="line">  len = (n <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>; <span class="comment">// 直接赋值会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体值推断类型转换为字面值类型</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;str&quot;</span> <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 等同：let str:&quot;str&quot;;</span></span><br><span class="line">str = <span class="string">&quot;str&quot;</span>; <span class="comment">// 只能赋值为 &quot;str&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;str&quot;</span>, <span class="number">1</span>] <span class="keyword">as</span> <span class="keyword">const</span>; <span class="comment">// 只读数组（对象同理）</span></span><br><span class="line"><span class="comment">// let arr = &lt;const&gt;[&quot;str&quot;, 1]; // 效果同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断类型数组转换为元组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ew</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&quot;str&quot;</span>, <span class="number">1</span>]; <span class="comment">// 推断返回值类型为 (string|number)[]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b] = <span class="title function_">ew</span>();</span><br><span class="line"><span class="comment">// a.length; // 报错，a 类型为string|number</span></span><br><span class="line"><span class="comment">/** 解决方法：</span></span><br><span class="line"><span class="comment"> * return [&quot;str&quot;, 1] as const; // 推荐使用</span></span><br><span class="line"><span class="comment"> * ew() as [string, number] </span></span><br><span class="line"><span class="comment"> * (a as string).length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启空值检查 dom 操作往往会报错，可以采用非空断言</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">body</span>:<span class="title class_">HTMLBodyElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>)!; <span class="comment">// !表示非空断言</span></span><br><span class="line"><span class="comment">// let body:HTMLBodyElement = document.querySelector(&#x27;body&#x27;) as HTMLBodyElement;</span></span><br></pre></td></tr></table></figure><h3 id="3-TS-函数："><a href="#3-TS-函数：" class="headerlink" title="3. TS 函数："></a>3. TS 函数：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let fun:Function = function(a:number) &#123;&#125;</span></span><br><span class="line"><span class="keyword">type</span> myFun = <span class="function">(<span class="params">n:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">void</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>:myFun = <span class="keyword">function</span>(<span class="params">a:<span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// n? 可选参数，当有必选参数时可选参数必须声明在必选参数之后</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun2</span>:<span class="function">(<span class="params">n?:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">void</span> = <span class="function">()=&gt;</span>&#123;&#125;; <span class="comment">// 可选参数不能设置默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意个参数收集到数组，只能作为最后一个参数声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun3</span>:<span class="function">(<span class="params">...n:<span class="built_in">any</span>[]</span>)=&gt;</span><span class="built_in">void</span> = <span class="function">(<span class="params">...n:<span class="built_in">any</span>[]</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数重载 */</span></span><br><span class="line"><span class="comment">// 定义重载函数签名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disp</span>(<span class="params">s1:<span class="built_in">string</span></span>):<span class="built_in">void</span>; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disp</span>(<span class="params">n1:<span class="built_in">number</span>,s1:<span class="built_in">string</span></span>):<span class="built_in">void</span>; </span><br><span class="line"><span class="comment">// 实现重载函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">disp</span>(<span class="params">x:<span class="built_in">any</span>,y?:<span class="built_in">any</span></span>):<span class="built_in">void</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x); </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(y); </span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">disp</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="title function_">disp</span>(<span class="number">1</span>,<span class="string">&quot;xyz&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-面向对象："><a href="#4-面向对象：" class="headerlink" title="4. 面向对象："></a>4. 面向对象：</h3><h4 id="1-类的基础："><a href="#1-类的基础：" class="headerlink" title="1. 类的基础："></a>1. 类的基础：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">person.<span class="title function_">say</span>(); <span class="comment">// John</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// extends 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="attr">school</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:<span class="built_in">string</span>, school:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name); <span class="comment">// 调用父类构造方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">school</span> = school;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写（覆盖）父类方法</span></span><br><span class="line">  <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">say</span>(); <span class="comment">// 调用父类方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">school</span>+ <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;myScholl&quot;</span>);</span><br><span class="line">student.<span class="title function_">say</span>(); <span class="comment">// student，myScholl student</span></span><br></pre></td></tr></table></figure><h4 id="2-访问修饰符："><a href="#2-访问修饰符：" class="headerlink" title="2. 访问修饰符："></a>2. 访问修饰符：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 默认 public</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span>; <span class="comment">// private 私有（私有属性名建议使用下划线开头）</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">sex</span>: <span class="built_in">string</span>; <span class="comment">// protected 只能自身或子类访问</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">sfz</span>: <span class="built_in">string</span>; <span class="comment">// readonly 只读属性（只允许初始化赋值或构造方法赋值一次）</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">num</span>: <span class="built_in">number</span>; <span class="comment">// static 静态属性</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">say</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-存取器："><a href="#3-存取器：" class="headerlink" title="3. 存取器："></a>3. 存取器：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>; <span class="comment">// 定义私有属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存取器（建议使用此方式为属性添加 get、set 方法）</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>; <span class="comment">// 存值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 取值</span></span><br></pre></td></tr></table></figure><h4 id="4-抽象类与接口："><a href="#4-抽象类与接口：" class="headerlink" title="4. 抽象类与接口："></a>4. 抽象类与接口：</h4><ol><li>抽象类：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有一个（或以上）抽象属性（方法）的类就只能被声明为抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 抽象属性</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>; <span class="comment">// 抽象方法没有方法体</span></span><br><span class="line">  <span class="comment">// 抽象类中允许有非抽象属性（方法）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类必须实现所有抽象属性（方法），否则子类也只能为抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">run</span>(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接口（接口名称建议以大写 <strong>I</strong> 开头）：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface 接口只能有抽象属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类必须实现所有抽象属性（方法），或者继承接口成为接口类（接口允许多继承、多实现）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">run</span>(): <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>接口类型约束：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类作为类型约束</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>:<span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>:<span class="title class_">Person</span> = &#123;<span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj1</span> = &#123;<span class="attr">name</span>:<span class="built_in">string</span>, <span class="attr">age</span>:<span class="built_in">number</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">myObj</span>:<span class="title class_">MyObj1</span> = &#123;<span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个类作为类型约束</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj2</span> = &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; | &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyObj3</span> = &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口作为类型约束</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">interface1</span>:<span class="title class_">Interface1</span> = &#123;<span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个同名结合会自动合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  sex?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>:A = &#123;<span class="attr">name</span>: <span class="string">&#x27;A&#x27;</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性类型不限制个数</span></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>:B = &#123;<span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-泛型："><a href="#5-泛型：" class="headerlink" title="5. 泛型："></a>5. 泛型：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型定义函数（可以有多个泛型使用逗号隔开）</span></span><br><span class="line"><span class="keyword">function</span> fun&lt;T&gt;(<span class="attr">arg</span>:T):T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:<span class="built_in">number</span> = fun&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">o</span>:&#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; = fun&lt;&#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125;&gt;(&#123;<span class="attr">name</span>: <span class="string">&quot;name&quot;</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:<span class="built_in">string</span> = <span class="title function_">fun</span>(<span class="string">&quot;str&quot;</span>); <span class="comment">// 自动推断类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数泛型指定默认类型</span></span><br><span class="line"><span class="keyword">const</span> fun2 = &lt;T=<span class="built_in">number</span>&gt;(<span class="attr">arg</span>:T):<span class="function"><span class="params">T</span> =&gt;</span> arg;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title function_">fun2</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型约束</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123;</span><br><span class="line">  <span class="attr">length</span>:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> getLength&lt;T <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">arg</span>:T):<span class="built_in">number</span> &#123; <span class="comment">// 泛型继承接口约束类型</span></span><br><span class="line">  <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getLength(123); // 报错，数字没有 length 属性</span></span><br><span class="line"><span class="title function_">getLength</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="title function_">getLength</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;1&quot;</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类（接口）泛型默认类型</span></span><br><span class="line"><span class="keyword">interface</span> IA&lt;T1=<span class="built_in">string</span>,T2=<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="variable constant_">T1</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="variable constant_">T2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">ia1</span>:<span class="variable constant_">IA</span>&lt;<span class="built_in">number</span>, <span class="built_in">number</span>&gt; = &#123; <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">age</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">ia2</span>:<span class="variable constant_">IA</span> = &#123;</span><br><span class="line">  <span class="comment">// name: 2, // 报错未指定泛型类型时，类型推断优先使用默认类型</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;2&quot;</span>, <span class="attr">age</span>: <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-命名空间："><a href="#5-命名空间：" class="headerlink" title="5. 命名空间："></a>5. 命名空间：</h3><ol><li>同文件内：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">One</span> &#123;</span><br><span class="line">  <span class="comment">// 如果想让外界访问到需 export 导入</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Two</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n:<span class="built_in">string</span></span>):<span class="built_in">string</span> &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">One</span>.<span class="title function_">add</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Two</span>.<span class="title function_">add</span>(<span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li>不同文件中：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* One.ts 中将命名空间导出 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">One</span> &#123;</span><br><span class="line">  <span class="comment">// 如果想让外界访问到需 export 导入</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* two.ts 中将命名空间导出 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">Two</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n:<span class="built_in">string</span></span>):<span class="built_in">string</span> &#123; <span class="keyword">return</span> n; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main.ts 中导入并使用 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">One</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./One&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Two</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Two&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">One</span>.<span class="title function_">add</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Two</span>.<span class="title function_">add</span>(<span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><p>还能添加子命名空间等。</p><h2 id="描述文件声明"><a href="#描述文件声明" class="headerlink" title="描述文件声明"></a>描述文件声明</h2><ul><li><p>在 TS 中使用第三方 js 文件库需要在项目中配置后缀名为 <strong>.d.ts</strong> 的文件，此文件可以在项目中的任意位置它将会自动被扫描。</p></li><li><p>只有配置了该文件才能获得代码补全，接口提示等功能。</p></li></ul><ol><li>在某 js 文件中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ewhost = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ewshop</span>(<span class="params">n</span>)&#123; <span class="keyword">return</span> n &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;John&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>config**.d.ts** 中：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明需要使用的成员的描述</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">ewhost</span>: <span class="built_in">string</span>; <span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">ewshop</span>(<span class="params">n:<span class="built_in">number</span></span>):<span class="built_in">number</span>; <span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;<span class="attr">name</span>:<span class="built_in">string</span>;&#125;; <span class="comment">// 类</span></span><br><span class="line"><span class="comment">// 命名空间（如页面中引入了 jquery）</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> $ &#123;</span><br><span class="line">  <span class="comment">// $.get(&quot;apy&quot;, function(res)&#123;&#125;);</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url: <span class="built_in">string</span>, fn:(res:<span class="built_in">object</span>)=&gt;<span class="built_in">void</span></span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;mymodule&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span>  <span class="keyword">function</span> <span class="title function_">join</span>(<span class="params">arr:<span class="built_in">any</span>[]</span>):<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 在 ts 中使用</span></span><br><span class="line"><span class="comment">import mymodule from &quot;mymodule&quot;;</span></span><br><span class="line"><span class="comment">mymodule.join(&quot;1&quot;,&quot;2&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的 png 图片，作为一个模块</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*.png&quot;</span>;</span><br><span class="line"><span class="comment">// ts 中使用 import myimg from &quot;./myimg&quot;;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types">DefinitelyTyped</a> 中为我们提供好了常用的第三方 js 库的 <strong>.d.ts</strong> 配置文件，在 <a href="https://www.typescriptlang.org/dt/search?search=">TypeScript: Search for typed packages (typescriptlang.org)</a> 中搜索我们需要使用的库的配置文件然后安装即可。</li></ol><h2 id="Vue3-与-TS"><a href="#Vue3-与-TS" class="headerlink" title="Vue3 与 TS"></a>Vue3 与 TS</h2><h3 id="1-shims-vue-d-ts："><a href="#1-shims-vue-d-ts：" class="headerlink" title="1. shims-vue.d.ts："></a>1. shims-vue.d.ts：</h3><p>shims-vue.d.ts 是为了 typescript 做的适配定义文件，因为 vue 文件不是一个常规的文件类型，ts 是不能理解 vue 文件是干嘛的，加这一段是是告诉 ts，vue 文件是这种类型的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123; <span class="comment">// 表明 ts 项目中 vue 文件是一个模块</span></span><br><span class="line">  <span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">// 将组件定义作为一个类型</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt; <span class="comment">// 表明我们定义的每一个组件必须是此类型</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-defineComponent："><a href="#2-defineComponent：" class="headerlink" title="2. defineComponent："></a>2. defineComponent：</h3><ul><li>原来 vue 中使用 <code>export default &#123;&#125;</code> 定义组件属性，对于编辑器而言 {} 只是一个 Object 的类型，无法有针对性的提示我们对于 vue 组件来说 {} 里应该有哪些属性。</li><li>在 TypeScript 中 {} 就变成了 defineComponent 的参数，那么对参数类型的提示，就可以实现对 {} 中属性的提示，外还可以进行对参数的一些类型推导等操作。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里 lang 表示使用 ts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 不建议使用 export default &#123;&#125; 而是使用 export default defineComponent(&#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">HelloWorld</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="3-选项式-API："><a href="#3-选项式-API：" class="headerlink" title="3. 选项式 API："></a>3. 选项式 API：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作类型约束成员建议单独写在一个 ts 文件中，在需要时导入即可（不需要 .ts 后缀）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123; <span class="attr">name</span>:<span class="built_in">string</span> &#125; <span class="comment">// 定义接口作为约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">User</span>&gt;, <span class="comment">// PropType 作 props 属性类型约束</span></span><br><span class="line">      <span class="title function_">default</span>():<span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;Hello&#x27;</span> <span class="keyword">as</span> <span class="built_in">string</span>, <span class="comment">// 断言</span></span><br><span class="line">      <span class="attr">stu</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">User</span>, <span class="comment">// 断言添加类型约束</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>():<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-组合式-API："><a href="#4-组合式-API：" class="headerlink" title="4. 组合式 API："></a>4. 组合式 API：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">User</span> &#123; <span class="attr">name</span>:<span class="built_in">string</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> msg = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 限定类型</span></span><br><span class="line">    <span class="keyword">const</span> stu = reactive&lt;<span class="title class_">User</span>&gt;(&#123;<span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>&#125;); <span class="comment">// 接口类型约束</span></span><br><span class="line">    <span class="title function_">onMounted</span>(():<span class="function"><span class="params">void</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="property">value</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; msg, stu, &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> vue3 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2022/02/12/vue/vue3/"/>
      <url>/2022/02/12/vue/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><blockquote><ul><li><p>npm （全称 Node Package Manager，即node 包管理器）</p></li><li><p>Node.js 默认使用 npm 作为软件包管理系统（安装 nodejs 即会默认安装 npm）</p></li></ul></blockquote><h3 id="1-npm-nodejs-安装："><a href="#1-npm-nodejs-安装：" class="headerlink" title="1. npm(nodejs) 安装："></a>1. npm(nodejs) 安装：</h3><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><ul><li><a href="http://nodejs.cn/">Node.js 下载地址 (nodejs.cn)</a></li></ul><p>下载 nodejs 安装（安装过程直接默认下一步即可）。</p><h4 id="npm-配置修改："><a href="#npm-配置修改：" class="headerlink" title="npm 配置修改："></a>npm 配置修改：</h4><ul><li><code>npm install cnpm -g</code> ：安装 cnpm 淘宝镜像（不建议使用，使用易出错）</li><li><del><code>npm config set registry https://registry.npm.taobao.org/</code> ：npm 使用淘宝镜像路径</del></li><li><code>npm config set registry https://registry.npmmirror.com/</code> ：npm 使用淘宝镜像路径（<strong>推荐</strong>）</li><li><code>npm config get registry</code> ：查看镜像配置</li><li>npm 依赖缓存位置修改：<ul><li><code>npm get cache</code> 或 <code>npm get prefix</code> ：查看缓存或保存模块地址</li><li><code>npm config set cache &quot;E:\myfile\nodejs\data\node_cache&quot;</code> ：缓存地址</li><li><code>npm config set prefix &quot;E:\myfile\nodejs\data\node_global&quot;</code> ：全局模块地址<ul><li>注意由于 node 全局模块大多需要命令访问因此，应在系统环境变量 <strong>PATH</strong> 中添加 node 的全局模块保存地址。</li></ul></li></ul></li></ul><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><ul><li><p><code>node -v</code>： 查看 nodejs 版本(检查是否安装成功)</p></li><li><p><code>npm -v</code> ：查看 npm 版本</p></li><li><p><code>npm install npm -g</code> ：npm 更新与全局安装</p></li><li><p><code>npm install jquery</code> ：npm 安装软件包命令，在当前文件夹下安装（这里以jquery为例，在后面加上 -g 表示全局安装）</p><ul><li>如需指定版本 <code>npm install jquery@3.0.0 </code>（ ‘软件名@版本号’ ），且它会自动清理当前项目之前安装的版本使用你指定的版本</li><li><code>npm install bootstrap -save-dev</code> ：表示开发环境使用</li></ul></li><li><p><code>npm list -g</code> ：查看全局安装的软件包（去除 -g 查看当前文件夹项目下安装的所有软件包）</p></li><li><p><code>npm list jquery</code> ：查看某个软件包的版本</p></li></ul><h3 id="2-Package-json："><a href="#2-Package-json：" class="headerlink" title="2. Package.json："></a>2. Package.json：</h3><ul><li><code>npm init</code> ：为当前项目生成 package.json 文件（可初始化 npm 项目）</li><li><code>npm run 配置命令</code> ：运行 package.json 文件 scripts 配置中的命令</li><li><code>npm install</code> ：根据 package.json 文件 dependencies 与 devDependencies 配置为项目安装软件包</li><li><strong>“jquery”: “^3.0.0”</strong> ：版本配置 <strong>‘^’</strong> 符号表示 3 的大版本不会改变，后面两位数的版本自动更新。去除该符号则版本不会自动更新。此外使用 <strong>‘~’</strong> 符号表示最后一位数版本自动更新。</li><li><strong>“main”: “index.js”</strong> ：配置当前项目的主入口文件，一般默认为当前项目 <strong>src</strong> 目录下的 <strong>index.js</strong> 文件。</li></ul><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><blockquote><p>  webpack 是一个模块打包器（构建工具）。它主要目标是将 JavaScript 文件打包在一起，打包后的文件用于浏览器中使用，其次它还能 <strong>转换、打包、包裹</strong> 任何资源（默认只能打包 js 文件，对其它资源打包需要使用到插件）。</p></blockquote><p>webpack 官网：<a href="https://webpack.js.org/">webpack</a></p><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><ul><li>树结构：在一个入口文件中引入所有资源，形成树状依赖关系。</li><li>模块：对于 webpack 来说所有的资源都称之为模块（.js，.css…）</li><li>chunk：打包过程中被操作的模块文件被称之为 chunk。</li><li>bundel：最终打包完成的文件。可能和 chunk 一样，大部分情况下它是多个 chunk 的集合。</li></ul><h3 id="2-安装与使用："><a href="#2-安装与使用：" class="headerlink" title="2. 安装与使用："></a>2. 安装与使用：</h3><p><code>npm install webpack -g</code> ：安装 webpack 软件包。<br><code>npm install webpack-cli -g</code>：安装 webpack 脚手架，即命令行执行程序。</p><p><code>npm install webpack webpack-cli -g</code>：两个包同时安装命令。</p><p><code>npm i webpack webpack-cli -D</code>：不全局安装仅为当前项目安装（i -&gt; install，d -&gt; 开发环境）</p><h4 id="打包-js-文件："><a href="#打包-js-文件：" class="headerlink" title="打包 js 文件："></a>打包 js 文件：</h4><ol><li>在空项目中初始化 npm <code>npm init -y</code> 。</li><li>创建 <strong>src</strong> 目录与 <strong>index.js</strong> 主文件（npm 中有介绍默认寻找 src 目录下 index.js），再根据需要创建其它的 JS 文件或者目录，但必须以 .&#x2F;src&#x2F;index.js 文件为主文件与其它文件相关联形成树状关系。</li><li>打包 <code>webpack --mode=development</code> （开发环境），<code>webpack --mode=production</code> （生产环境）</li><li>打包成功以后会在项目下生成 <strong>dist</strong> 目录，目录中的 <strong>main.js</strong> 就是打包成功后的 JS 文件。</li></ol><h3 id="3-核心配置："><a href="#3-核心配置：" class="headerlink" title="3. 核心配置："></a>3. 核心配置：</h3><p>在 webpack 项目中新建 <strong>webpack.config.js</strong> （webpack 默认会按此文件配置打包）。</p><h4 id="1-配置选项："><a href="#1-配置选项：" class="headerlink" title="1. 配置选项："></a>1. 配置选项：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 使用 nodejs 来定位项目目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的配置都是可选的</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 以哪个文件作为入口开始打包（默认 ./src/index.js）</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 打包后的资源输出到哪里以及如何命名</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;build.js&quot;</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>) <span class="comment">// 保存的目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置处理非 js 资源</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="comment">// 指示 webpack 使用相应模式的配置（development开发，production生产）</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多入口多出口："><a href="#2-多入口多出口：" class="headerlink" title="2. 多入口多出口："></a>2. 多入口多出口：</h4><ul><li>entry 为数组类型：多个入口文件打包形成一个 chunk 并最后输出一个文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: [<span class="string">&#x27;./src/index.js&#x27;</span>,<span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;build.js&quot;</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>) <span class="comment">// 保存的目录</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>entry 为对象类型：多个入口文件打包形成多个 chunk 并最后输出多个文件（如下生成 one.js、two.js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">one</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">two</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// 对象的 key 为文件名输出</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>) <span class="comment">// 保存的目录</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>混合模式：对象中使用数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">one</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">two</span>: [<span class="string">&#x27;./src/index.js&#x27;</span>,<span class="string">&#x27;./src/main.js&#x27;</span>],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>, <span class="comment">// 对象的 key 为文件名输出</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;build&#x27;</span>) <span class="comment">// 保存的目录</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="3-打包-HTML-文件："><a href="#3-打包-HTML-文件：" class="headerlink" title="3. 打包 HTML 文件："></a>3. 打包 HTML 文件：</h4><ul><li>安装打包插件（仅开发环境使用）： <code>npm i html-webpack-plugin -D</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 引入 html-webpack-plugin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 module.exports 中配置 plugins</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 使用插件，参数为空时默认将生成一个空的模板 index.html 打包的 js/css 在此文件的 body 中引入</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(),</span><br><span class="line">    <span class="comment">// 打包多个 html 可配置多个</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">htmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">// 指定 html 模板最后打包 js/css 文件在此模板 body 最后引入</span></span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;main.html&#x27;</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line">        <span class="attr">chunks</span>: [<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>], <span class="comment">// 此 html 中需要引入的 js,entry 配置的 key</span></span><br><span class="line">        <span class="attr">minify</span>: &#123;</span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 移除空格</span></span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span> <span class="comment">// 移除注释</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="4-打包-CSS-文件："><a href="#4-打包-CSS-文件：" class="headerlink" title="4. 打包 CSS 文件："></a>4. 打包 CSS 文件：</h4><p>安装 css-loader 和 style-loader ，css-loader 打包单个文件并处理 @import 和 URL 等外部资源。style-loader 在 head 标签中插入 style 标签并将打包的 css 样式利用 js 嵌入其中（只是单纯打包 css 文件可以忽略此插件）。</p><p>安装命令： <code>npm i css-loader style-loader -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./style.css&#x27;</span>); <span class="comment">// 在 js 文件中引入 css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置文件中配置</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 规则</span></span><br><span class="line">        <span class="comment">// 遵循从右到左从下到上，因此注意&#x27;style-loader&#x27;,&#x27;css-loader&#x27;的顺序</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-打包图片、字体图标，eslint-js语法检查-略-："><a href="#5-打包图片、字体图标，eslint-js语法检查-略-：" class="headerlink" title="5. 打包图片、字体图标，eslint js语法检查(略)："></a>5. 打包图片、字体图标，eslint js语法检查(略)：</h4><p><a href="https://zhuanlan.zhihu.com/p/355825312">webpack打包详解</a></p><h4 id="6-DevServer："><a href="#6-DevServer：" class="headerlink" title="6. DevServer："></a>6. DevServer：</h4><ul><li><p>安装： <code>npm i webpack-dev-server -D</code></p></li><li><p>开启服务： <code>webpack serve</code></p></li><li><p>webpack5 支持自动刷新需要在 webpack.config.js 中 module.exports 内添加属性（修改配置文件后需要重启服务）：</p></li></ul><p><code>target: &quot;web&quot;</code></p><ul><li><p>修改访问端口： <code>webpack serve --port 8081</code></p></li><li><p>除向像上方使用命令修改 devserver 配置外，也能在 webpack.config.js 配置：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    port<span class="punctuation">:</span> <span class="number">8081</span><span class="punctuation">,</span></span><br><span class="line">    compress<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 编译时压缩</span></span><br><span class="line">    open<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 自动开启浏览器</span></span><br><span class="line">    <span class="comment">// 自动刷新默认是重新加载所有的文件，开启热替换只重新加载修改的文件</span></span><br><span class="line">    hot<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="7-去除无用的-js、css-略-："><a href="#7-去除无用的-js、css-略-：" class="headerlink" title="7. 去除无用的 js、css (略)："></a>7. 去除无用的 js、css (略)：</h4><h2 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h2><h3 id="1-let、const-："><a href="#1-let、const-：" class="headerlink" title="1. let、const ："></a>1. let、const ：</h3><p><code>var</code> ： 可以重复声明、无法限制修改、没有块级作用域。</p><p><code>let</code> ： 不能重复声明、拥有块级作用域。</p><p><code>const</code> ： 与 let 类似但仅作为常量使用。</p><h3 id="2-箭头函数与-this-指向："><a href="#2-箭头函数与-this-指向：" class="headerlink" title="2. 箭头函数与 this 指向："></a>2. 箭头函数与 this 指向：</h3><ol><li>箭头函数返回对象问题：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">o</span> = (<span class="params"></span>)=&gt;&#123;<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="attr">num</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">o</span>()); <span class="comment">// 报错：VM387:1 Uncaught SyntaxError: Unexpected token &#x27;:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">o</span> = (<span class="params"></span>)=&gt;&#123;<span class="keyword">return</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>&#125;&#125;; <span class="comment">// 使用 return 返回对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o); <span class="comment">// ()=&gt;&#123;return &#123;name:&#x27;hello&#x27;&#125;&#125;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">o</span> = (<span class="params"></span>)=&gt;(&#123;<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,<span class="attr">num</span>:<span class="number">1</span>&#125;); <span class="comment">// 使用括号包裹对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">o</span>()); <span class="comment">// &#123;name: &#x27;hello&#x27;, num: 1&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>普通函数 this 指向它的调用者。</li><li>箭头函数 this 指向它定义时所处位置的外层 this 。</li></ol><h3 id="3-数组方法："><a href="#3-数组方法：" class="headerlink" title="3. 数组方法："></a>3. 数组方法：</h3><p>map 映射： <code>arr.map(function(values,index,array)&#123;&#125;)</code> 函数返回值为映射数组元素的值。</p><p>filter 过滤： <code>arr.filter(function(values)&#123;&#125;)</code> 函数返回值 true 表示保留当前数组元素。</p><p>forEach ： <code>arr.forEach(function(values)&#123;&#125;)</code> 迭代器遍历。</p><p>reduce 汇总：<code>arr.reduce((newValue,nextValue,index)=&gt;&#123;&#125;,?initialValue)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">newValue,nextValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,nextValue); <span class="comment">// 0 2, 2 3, 5 4, 最后返回值为 9</span></span><br><span class="line">    <span class="keyword">return</span> newValue+nextValue;</span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">// 参2 指定 函数参1 初始化值</span></span><br><span class="line">array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">newValue,nextValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,nextValue); <span class="comment">// 2 3, 5 4, 最后返回值为 9</span></span><br><span class="line">    <span class="keyword">return</span> newValue+nextValue;</span><br><span class="line">&#125;); <span class="comment">// 注意 未指定参2 时循环次数少 1</span></span><br></pre></td></tr></table></figure><h3 id="4-Module-模块化："><a href="#4-Module-模块化：" class="headerlink" title="4. Module 模块化："></a>4. Module 模块化：</h3><p>注意模块化必须在服务器中使用，本地无效。vscode 可以使用 <strong>Live Server</strong> ，idea 直接点击浏览器图标即可。</p><h4 id="1-main-html-中引入主-main-js-："><a href="#1-main-html-中引入主-main-js-：" class="headerlink" title="1. main.html 中引入主 main.js ："></a>1. main.html 中引入主 main.js ：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-export-和-import-："><a href="#2-export-和-import-：" class="headerlink" title="2. export 和 import ："></a>2. export 和 import ：</h4><ul><li>js1.js 中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;js1.js b()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;a,b&#125;; <span class="comment">// 集体导出</span></span><br></pre></td></tr></table></figure><ul><li>js2.js 中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span>; <span class="comment">// 单个导出</span></span><br><span class="line"><span class="comment">// 一个 js 只能有一个 export default，可以在我们导入时自定义名字</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;js2.js default&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js 中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a <span class="keyword">as</span> a1,b&#125; <span class="keyword">from</span> <span class="string">&quot;./js1.js&quot;</span>; <span class="comment">// 指定导入(as 重命名)</span></span><br><span class="line"><span class="comment">// import * as o from &quot;./js1.js&quot;; // 导入所有，并都放入 o 对象中</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">&quot;./js2.js&quot;</span>; <span class="comment">// 必须使用&#123;&#125;，否则 a 为 default 的导出</span></span><br><span class="line"><span class="keyword">import</span> def <span class="keyword">from</span> <span class="string">&quot;./js2.js&quot;</span>; <span class="comment">// 导入 default 的方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1,a);</span><br><span class="line"><span class="title function_">b</span>();</span><br><span class="line"><span class="title function_">def</span>();</span><br><span class="line"><span class="comment">// o.b();</span></span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><h3 id="1-ES6-Promise："><a href="#1-ES6-Promise：" class="headerlink" title="1. ES6 Promise："></a>1. ES6 Promise：</h3><blockquote><ul><li>主要用于异步计算</li><li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</li><li>可以在对象之间传递和操作 promise，帮助我们处理队列</li></ul></blockquote><p><strong>基本用法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* promise 承诺 resolve 解决 reject 拒绝 then 然后 catch 抓住 */</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行方法 promise1&quot;</span>);</span><br><span class="line">    <span class="comment">// 表示执行成功，参数为你需要返回的值（可以是任意类型）</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;方法 promise1 执行完成&quot;</span>);</span><br><span class="line">    <span class="comment">// return Promise.resolve(&quot;&quot;); // 作用同上</span></span><br><span class="line">    <span class="comment">// return &quot;&quot;; // 作用同上</span></span><br><span class="line">    <span class="comment">// 表示执行错误，resolve 与 reject 作用与 return 类似会阻断方法的执行 </span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;方法 pormise1 执行错误&quot;</span>);</span><br><span class="line">    <span class="comment">// return Promise.reject(&quot;&quot;); // 作用同上</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行方法 promise2&quot;</span>);</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;方法 promise2 执行错误&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 此处执行 promise1 then 中返回的 promise2 then</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/* 上面有错误发生并未处理时在此处统一处理 */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise.all(Promise[]) 并发处理:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;promise1 执行完成&quot;</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;promise2 执行完成&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="comment">// [&#x27;promise1 执行完成&#x27;, &#x27;promise2 执行完成&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2-简单使用"><a href="#2-简单使用" class="headerlink" title="2. 简单使用:"></a>2. 简单使用:</h3><ul><li><a href="https://www.axios-http.cn/">Axios 中文文档 | Axios 中文官网 (axios-http.cn)</a></li></ul><p><a href="https://cdnjs.com/">在 cdnjs 中搜索 axios 引入 js 文件</a> ：</p><p><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/0.27.2/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认 get 请求</span></span><br><span class="line"><span class="title function_">axios</span>(<span class="string">&#x27;/api&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">rul</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>, <span class="comment">// 指定请求方式</span></span><br><span class="line">    <span class="attr">params</span>: &#123; <span class="comment">// 注意此参数是将值添加到 URL 路径中</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ruoxijun&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="comment">// 值存储在请求体中传递</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ruoxijun&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ruoxijun&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br><span class="line"><span class="comment">// 如果 post 参数2为字符串，会拼接到 URL 中作为参数。axios.get 不支持</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/api&#x27;</span>,<span class="string">&#x27;name=ruoxijun&amp;age=18&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><p><strong>axios 并发请求处理</strong> ：</p><p>axios.all 与 Promise.all 方法类似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>),</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res)) <span class="comment">// 请求结果集中到数组返回</span></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>),</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;/api&#x27;</span>),</span><br><span class="line">]).<span class="title function_">then</span>(</span><br><span class="line">    <span class="comment">// 将请求结果作为方法参数</span></span><br><span class="line">    axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res1,res2);</span><br><span class="line">    &#125;)</span><br><span class="line">).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(err));</span><br></pre></td></tr></table></figure><h3 id="3-全局配置与封装："><a href="#3-全局配置与封装：" class="headerlink" title="3. 全局配置与封装："></a>3. 全局配置与封装：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost&quot;</span>; <span class="comment">// 请求路径前缀</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">5000</span>; <span class="comment">// 请求超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装（每一个都可以认为是一个单独的 axios）</span></span><br><span class="line"><span class="keyword">let</span> git = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseurl</span>: <span class="string">&quot;https://github.com/&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> local = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseurl</span>: <span class="string">&quot;https://localhost&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">git.<span class="title function_">get</span>(<span class="string">&quot;/api&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><h3 id="4-拦截器："><a href="#4-拦截器：" class="headerlink" title="4. 拦截器："></a>4. 拦截器：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config; <span class="comment">// 放行</span></span><br><span class="line">&#125;,<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> config; <span class="comment">// 放行</span></span><br><span class="line">&#125;,<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Vue3-1"><a href="#Vue3-1" class="headerlink" title="Vue3"></a>Vue3</h2><h3 id="1-初识-vue3"><a href="#1-初识-vue3" class="headerlink" title="1. 初识 vue3:"></a>1. 初识 vue3:</h3><ul><li><a href="https://v3.cn.vuejs.org/">官网（旧版） Vue.js (vuejs.org)</a></li><li><a href="https://staging-cn.vuejs.org/">最新 Vue3 文档官网 Vue.js (vuejs.org)</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* // vue2 创建实例与挂载元素</span></span><br><span class="line"><span class="comment">const app = new vue(&#123;</span></span><br><span class="line"><span class="comment">    el: &#x27;#app&#x27;,</span></span><br><span class="line"><span class="comment">    data: &#123;</span></span><br><span class="line"><span class="comment">        message: &#x27;hello world&#x27;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;); */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3 创建实例与挂载元素</span></span><br><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(app).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line">vm.<span class="property">message</span> = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 可直接访问（包括方法）</span></span><br><span class="line">vm.<span class="property">$data</span>.<span class="property">message</span> = <span class="string">&#x27;world&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-vue-cli："><a href="#2-vue-cli：" class="headerlink" title="2. vue-cli："></a>2. vue-cli：</h3><p>Vue-Cli（Command Line Interface） 是 vue 官方提供的脚手架工具。默认已经帮我们搭建好了一套利用 Webpack 管理 vue 的项目结构。</p><h4 id="1-命令须知："><a href="#1-命令须知：" class="headerlink" title="1. 命令须知："></a>1. 命令须知：</h4><ul><li>安装命令： <code>npm install -g @vue/cli</code></li><li>检查版本： <code>vue -version</code> 或 <code>vue -V</code></li><li>创建项目： <code>vue create 项目名称</code></li><li>卸载命令： <code>npm uninstall -g vue-cli</code></li></ul><h4 id="2-项目创建："><a href="#2-项目创建：" class="headerlink" title="2. 项目创建："></a>2. 项目创建：</h4><ol><li>执行 <code>vue create vue3-demo1</code> 命令开始创建项目：</li></ol><p><img src="/images/vue/vue3/vuecreate.png" alt="vue项目创建"></p><p>此处使用上下键加回车进行选择，前两个选项表示创建默认的 <strong>vue3</strong> 或 <strong>vue2</strong> 项目。默认创建的项目中包含两个插件：</p><p><strong>babel</strong> : 检查 es6转es5</p><p><strong>eslint</strong> : 检查 es 语法与修复</p><p>第三个选项 <code>Manually select features</code> 表示手动创建项目，建议使用。</p><ol start="2"><li>默认的 vue3 项目结构：</li></ol><p><img src="/images/vue/vue3/vueproject.png" alt="vue项目创建"></p><ol start="3"><li>手动创建项目：</li></ol><p><img src="/images/vue/vue3/manuallyselect.png" alt="vue项目创建"></p><p>选择 <code>Manually select features</code> 后进入上界面，通过上下键与空格选择或取消，选择完成后回车进入下一步。</p><p>之后对项目以及插件进行配置操作如下：</p><p><img src="/images/vue/vue3/vueprojectconfig.png" alt="vue项目创建"></p><p>如果最后对项目配置进行了保存删除 <code>C:\当前用户文件夹\.vuerc</code> 文件中可以去除保存的配置。</p><h4 id="3-vue-config-js"><a href="#3-vue-config-js" class="headerlink" title="3. vue.config.js:"></a>3. vue.config.js:</h4><p>当我们需要对 webpack 或插件进行配置时只需要在项目的根路径下新建 <code>vue.config.js</code> ，vue-cli 提供了方便的配置方法，我们也可以选择使用 webpack 原生的配置方法进行配置。</p><p><a href="https://cli.vuejs.org/config/">配置详情请参照： Configuration Reference | Vue CLI (vuejs.org)</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 设置项目编译后的文件夹（vue-cli 提供的配置方法）</span></span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123; <span class="comment">// 使用 webpack 原生方法配置</span></span><br><span class="line">        <span class="attr">plugins</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Vue3-语法："><a href="#3-Vue3-语法：" class="headerlink" title="3. Vue3 语法："></a>3. Vue3 语法：</h3><h4 id="1-基础语法："><a href="#1-基础语法：" class="headerlink" title="1. 基础语法："></a>1. 基础语法：</h4><ol><li>插值表达式： <code>&#123;&#123;msg&#125;&#125;</code> 注意只接受表达式，不能使用语句</li><li>简单指令 <code>v-指令</code> :<ul><li><code>v-pre</code> ：不解析该标签中的 vue 语法</li><li><code>v-once</code> ：该标签中的 vue 语法只解析一次</li><li><code>v-text</code> ：向该标签中插入文本</li><li><code>v-html</code> ：向改标签中插入 html（v-html&#x3D;”不能在此直接书写html”）</li><li><code>v-show</code> ：是否显示该标签</li><li><code>v-if , v-else , v-else-if</code> ：是否渲染该标签</li><li><code>v-cloak</code> ：防止弱网络环境下渲染闪烁问题</li></ul></li></ol><h4 id="2-v-bind："><a href="#2-v-bind：" class="headerlink" title="2. v-bind："></a>2. v-bind：</h4><ol><li>简单使用：</li></ol><p><code>v-bind:属性名</code> 主要对标签的属性进行绑定,除此它还有一种简写的方式 <code>:属性名</code> 。</p><ol start="2"><li>绑定 style：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 绑定的样式与原有的样式会根据先后顺序以及优先级关系覆盖（如下宽200被宽100覆盖）</span></span><br><span class="line">&lt;div :style=<span class="string">&quot;[&#x27;font-size:22px&#x27;,&#x27;width:200px&#x27;,fontcolor,styles]&quot;</span></span><br><span class="line">    style=<span class="string">&quot;width:100px;&quot;</span> &gt; div <span class="number">1</span> &lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:&#x27;18px&#x27;&#125;&quot;</span>&gt;</span> div 3 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">/* javascript */</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">fontcolor</span>: <span class="string">&#x27;color:red&#x27;</span>, <span class="comment">// 字体颜色</span></span><br><span class="line">        <span class="attr">styles</span>: &#123;<span class="attr">backgroundColor</span>: <span class="string">&#x27;#123&#x27;</span>&#125;, <span class="comment">// 背景</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>绑定 class：</li></ol><p>style 与 class 的属性绑定都支持 <strong>字符串、数组、对象（常用）、方法</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :<span class="keyword">class</span>=<span class="string">&quot;one&quot;</span>&gt; div <span class="number">3</span> &lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;one:isone,istwo&#125;&quot;</span>&gt;</span> div 4 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">/* javascript */</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">one</span>: <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">        <span class="attr">isone</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">istwo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* style */</span>    </span><br><span class="line">.<span class="property">one</span> &#123;<span class="attr">color</span>: blue;&#125;</span><br><span class="line">.<span class="property">istwo</span> &#123;font-<span class="attr">size</span>:18px;&#125;</span><br></pre></td></tr></table></figure><h4 id="3-computed："><a href="#3-computed：" class="headerlink" title="3. computed："></a>3. computed：</h4><ul><li>html：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值方式： &#123;&#123;name + msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>方法返回： &#123;&#123;getTitle()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计算属性： &#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用 set： &#123;&#123;setTitle()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>javascript：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return ’hi‘ set 方法会返回设置的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title2</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">title2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">title</span>(<span class="params"></span>) &#123; <span class="comment">// 为方法是默认为计算属性的 get 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">title2</span>:&#123; <span class="comment">// 使用对象为属性添加 set、get 方法</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">msg</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVla</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">msg</span> = newVla;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算属性只有在 get 方法中 vue 的属性值发生改变时，才会重新计算否则都将使用缓存的数据。而普通方法看你在页面中调用了多少次则运行多少次。</p><h4 id="4-v-on："><a href="#4-v-on：" class="headerlink" title="4. v-on："></a>4. v-on：</h4><ul><li><code>v-on:click</code> ：绑定一个点击事件，简写 <code>@click</code></li></ul><p>当调用事件方法时没有传入参数，且声明方法时只有一个参数，默认该参数的值就是事件 <code>event</code> 对象。当有多个参数且我们需要事件对象时 <code>$event</code> 作为参数它就代表了当前事件对象（<code>@click=&quot;click(val,$event)&quot;</code>）； </p><p><strong>事件修饰符：</strong></p><ul><li><code>stop</code> ：阻止事件冒泡</li><li><code>self</code> ：当前事件由该元素本身触发时才执行</li><li><code>capture</code> ：事件捕获模式（如点击事件触发且冒泡时，会优先执行添加该修饰符的外层）</li><li><code>prevent</code> ：阻止默认事件</li><li><code>once</code> ：事件只触发一次</li></ul><h4 id="5-v-for："><a href="#5-v-for：" class="headerlink" title="5. v-for："></a>5. v-for：</h4><p><code>v-for</code> 可以循环渲染标签</p><ul><li><code>v-for=&quot;(item, [index]) in arr&quot;</code> ：循环数组</li><li><code>v-for=&quot;(val, [key], [index]) in obj&quot;</code> ：循环对象</li></ul><p>vue 对于循环的标签提供了一个 <code>:key</code> 唯一标识符属性，当循环的数组或者对象改变时它会去对比这个 key 值，只重新渲染改变了的数据,而不去影响未改变的数据增加渲染效率。</p><p><code>&lt;div v-for=&quot;(v,i) in arr&quot; :key=&quot;i&quot;&gt;&lt;/div&gt;</code> ：使用唯一标识符的循环</p><ul><li>在 vue3 中 <code>v-if</code> 优先级大于 <code>v-for</code> ，vue2 反之。</li></ul><h4 id="6-v-model："><a href="#6-v-model：" class="headerlink" title="6. v-model："></a>6. v-model：</h4><ul><li><code>&lt;input v-model=&quot;val&quot; /&gt;</code> ：</li></ul><p><strong>修饰符：</strong></p><ul><li><code>lazy</code> ：懒加载</li><li><code>number</code> ：让绑定值（默认 string）转换为 number 类型</li><li><code>trim</code> ：去除绑定值两端的空格</li></ul><p><strong>单选框与多选框：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>性别：&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">男：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">女：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">协议：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;type&quot;</span>&gt;</span> &#123;&#123;type&#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>爱好：&#123;&#123;like&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">java：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;like&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">html：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;html&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;like&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">php：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;like&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;select&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selects&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>v-model</code> 就代表了它们的 name 属性同时与 value 绑定。</p><p>radio 需要默认选中时将绑定的变量设置为你需要的 value 即可。</p><p>checkbox 单个时绑定的属性为值为 true&#x2F;false 表示它是否选中。多个时绑定一个数组，数组的值可以设置为需要默认选中的 value 数组值。</p><p>select 标签使用上同理多选绑定数组即可。</p><h4 id="7-watch"><a href="#7-watch" class="headerlink" title="7. watch:"></a>7. watch:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>:&#123; <span class="comment">// 属性监听</span></span><br><span class="line">    <span class="title function_">message</span>(<span class="params">newVal, oldVal</span>)&#123;&#125;, <span class="comment">// 监听 data 中 message 的变化</span></span><br><span class="line">    <span class="attr">obj</span>: &#123; <span class="comment">// 监听 data 中 obj 属性的变化</span></span><br><span class="line">        <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>)&#123;&#125;, <span class="comment">// 触发方法</span></span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 初始化是否执行一次</span></span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 开启深度监听</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-Teleport："><a href="#8-Teleport：" class="headerlink" title="8. Teleport："></a>8. Teleport：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将内容传送到指定 dom 节点，不受父级影响，disabled 是否传送默认true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Teleport</span> <span class="attr">:disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span> <span class="comment">&lt;!-- 类：.main , id：#main --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> Hello from the modal! <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-component："><a href="#9-component：" class="headerlink" title="9. component："></a>9. component：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Foo</span> <span class="keyword">from</span> <span class="string">&#x27;./Foo.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Bar</span> <span class="keyword">from</span> <span class="string">&#x27;./Bar.vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">Foo</span>, <span class="title class_">Bar</span> &#125;, <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">view</span>: <span class="string">&#x27;Foo&#x27;</span> <span class="comment">// 组件名</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定组件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直接绑定组件（直接绑定组件 is 可以不需要 v-bind） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Foo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-组件化开发："><a href="#4-组件化开发：" class="headerlink" title="4. 组件化开发："></a>4. 组件化开发：</h3><h4 id="1-创建组件："><a href="#1-创建组件：" class="headerlink" title="1. 创建组件："></a>1. 创建组件：</h4><p>我在 components 文件夹中创建了一个名为 MyComponent.vue 文件，这是组件化开发一个组件的基本格式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Demo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;this is MyComponent&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- style 中的样式一般子组件也能使用 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- scoped 表示此 style 中的样式只允许当前组件中使用，该组件中的子组件不能使用 --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000041314876">关于 lang&#x3D;”scss” 使用：学习Scss-看这篇就够了 - SegmentFault 思否</a></p><h4 id="2-引用组件："><a href="#2-引用组件：" class="headerlink" title="2. 引用组件："></a>2. 引用组件：</h4><p>在 App.vue 中引用 MyComponent.vue 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件，以下两种方式均可使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">“my-style”</span>&gt;</span><span class="tag">&lt;/<span class="name">MyComponent</span>&gt;</span> <span class="comment">&lt;!-- 当组件只有一个根节点时样式会作用到该根节点上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> <span class="comment">&lt;!-- 推荐使用小写加横杠方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/MyComponent&#x27;</span>; <span class="comment">// 引入要使用的组件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">MyComponent</span>, <span class="comment">// 注册组件</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-props（父传子）："><a href="#3-props（父传子）：" class="headerlink" title="3. props（父传子）："></a>3. props（父传子）：</h4><ol><li>props 数组定义组件属性：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在子组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>接收的父类消息: &#123;&#123;parentMsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;parentMsg&#x27;</span>, ], <span class="comment">// 定义属性方便父组件传递数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:parent-msg</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将 msg 绑定到该属性上，可以绑定任意值（如字符串、对象等） --&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>props 对象定义组件属性并添加验证：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">  <span class="attr">propA</span>: <span class="title class_">Number</span>, <span class="comment">// 给组件定义了一个 prop-a 属性</span></span><br><span class="line">  <span class="comment">// 多个可能的类型</span></span><br><span class="line">  <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 必填的字符串</span></span><br><span class="line">  <span class="attr">propC</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 带有默认值的数字</span></span><br><span class="line">  <span class="attr">propD</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 带有默认值的对象</span></span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="attr">default</span>: &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;,</span><br><span class="line">    <span class="comment">// 在 vue2 时对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">    <span class="comment">// default: function () &#123;</span></span><br><span class="line">    <span class="comment">//   return &#123; message: &#x27;hello&#x27; &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义验证函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type 可以是如下类型，type 也可以是一个自定义构造器，使用 instanceof 检测：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><h4 id="4-emit（子传父）："><a href="#4-emit（子传父）：" class="headerlink" title="4. $emit（子传父）："></a>4. $emit（子传父）：</h4><ul><li>子组件无法直接改变 props 接收到的数据，可以通过向父组件传递数据方式通知父组件来改变数据。</li><li>官方建议：强烈建议使用 <code>emits</code> 记录每个组件所触发的所有事件（与 props 属性类似）。</li></ul><ol><li>在子组件中：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>接收的父类数据: &#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addNumber(2)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;number&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// emits 不是必须的，但是建议使用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">emits</span>: [<span class="string">&#x27;addNumber&#x27;</span>], <span class="comment">// 可以使用对象 &#123;addNumber: val=&gt;val&gt;0&#125; 并添加验证</span></span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addNumber</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 为此组件定义了一个方法供父组件使用，并向该方法返回数据（可以为任意类型数据）</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addNumber&#x27;</span>,num);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在父组件中：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;number&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:number</span>=<span class="string">&quot;number&quot;</span> @<span class="attr">add-number</span>=<span class="string">&quot;addNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/MyComponent&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">MyComponent</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">number</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addNumber</span>(<span class="params">num</span>) &#123; <span class="comment">// 该方法与子组件绑定，并接收子组件返回的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">number</span> += num;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-父子间直接访问："><a href="#5-父子间直接访问：" class="headerlink" title="5. 父子间直接访问："></a>5. 父子间直接访问：</h4><ul><li><code>$parent</code> ：在子组件中使用该属性可直接调用父组件的方法或属性</li><li><code>$root</code> ：直接访问根组件中的属性（一般是 App.vue）</li><li><code>$children</code> ：vue2 中使用该属性访问子组件属性（vue3 已<strong>弃用</strong>）</li><li><code>$refs</code> ： 访问子组件属性或获取 dom 元素:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 ref 绑定子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">ref</span>=<span class="string">&quot;com1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">ref</span>=<span class="string">&quot;com2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- $refs 通过 ref 的值来访问指定的子组件 --&gt;</span></span><br><span class="line">this.$refs.com1.msg=&quot;msg1&quot;;</span><br><span class="line">this.$refs.com2.msg=&quot;msg2&quot;;</span><br></pre></td></tr></table></figure><p><code>ref</code> 作用在普通 html 标签中时获取到的是标签 dom 元素。</p><ul><li><code>ref</code> 与 <code>v-for</code> 一同使用时，vue2 时 <code>$refs</code> 会返回循环的 dom&#x2F;组件 数组，vue3 中为了效率需要给 <code>ref</code> 绑定一个函数处理 <code>ref</code> 。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;i in 10&quot;</span> <span class="attr">:ref</span>=<span class="string">&quot;setItemRef&quot;</span>&gt;</span> &#123;&#123; i &#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">setItemRef(el) &#123; // 参1为循环得到的 dom/组件</span><br><span class="line">  this.divArr.push(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-slot-插槽："><a href="#6-slot-插槽：" class="headerlink" title="6. slot 插槽："></a>6. slot 插槽：</h4><ol><li>基本使用：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>缺省内容（默认内容）<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>slot</strong> 标签表示一个插槽，当使用该组件未插入任何内容时，会将 <strong>slot</strong> 标签中的内容作为默认内容显示。</p><ol start="2"><li>具名插槽：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在子组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为 slot 添加name属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 未添加 name 属性的 slot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span>3<span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">templat</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 template 标签写入要插入的内容，v-slot 指定要插入的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>插入 one 中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- # 简写方式等于 v-slot (不建议使用简写) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">two</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>插入 two 中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- default 表示没有 name 属性值的插槽 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>插入 default 中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当子组件中有多个插槽时，插入的内容默认会插入所有没有 <code>name</code> 属性值的插槽中（<code>name=&quot;&quot;</code> 不会）。</p><ol start="3"><li>插槽传值：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在子组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:val</span>=<span class="string">&quot;msg&quot;</span>&gt;</span>使用 v-bind 定义 val 属性绑定 msg，可以定义多个属性，绑定任意值<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;this is child msg&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在父组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给传递的属性定义一个接收的对象，并使用插槽属性传递的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;child_val&quot;</span>&gt;</span> <span class="comment">&lt;!-- 具名插槽同理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>插入 default 中 - &#123;&#123;child_val.val&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>动态插槽：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过切换 slotName 属性值来动态切换插槽 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #[<span class="attr">slotName</span>]&gt;</span> &#123;&#123; slotName &#125;&#125; <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; <span class="attr">slotName</span>: <span class="string">&quot;one&quot;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-keep-alive："><a href="#7-keep-alive：" class="headerlink" title="7. keep-alive："></a>7. keep-alive：</h4><p><strong>官方解释：</strong> </p><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</p><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换时，它的 <code>mounted</code> 和 <code>unmounted</code> 生命周期钩子不会被调用，取而代之的是 <code>activated</code> 和 <code>deactivated</code>。(这会运用在 <code>&lt;keep-alive&gt;</code> 的直接子节点及其所有子孙节点。)</p><p>主要用于保留组件状态或避免重新渲染。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>include</code> &#x2F; <code>exclude</code> （包含&#x2F;排除）：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以英文逗号分隔的字符串(标签名或组件名)，max 通过算法缓存指定个数内常用的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (需使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (需使用 `v-bind` ，可以是字符串与正则表达式混合数组) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-组件生命周期函数："><a href="#8-组件生命周期函数：" class="headerlink" title="8. 组件生命周期函数："></a>8. 组件生命周期函数：</h4><h5 id="1-组件生命周期图："><a href="#1-组件生命周期图：" class="headerlink" title="1. 组件生命周期图："></a>1. 组件生命周期图：</h5><p><img src="/images/vue/vue3/lifecycle.svg" alt="vue3 组件生命周期函数"></p><h5 id="2-组件生命周期方法："><a href="#2-组件生命周期方法：" class="headerlink" title="2. 组件生命周期方法："></a>2. 组件生命周期方法：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例刚刚被创建&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例已经创建完成&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模板编译之前&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模板编译完成&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据更新之前&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据更新完成&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keep-alive 缓存的组件激活时&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">deactivated</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;keep-alive 缓存的组件停用时&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例销毁之前&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">unmounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;实例销毁完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-nexTick-："><a href="#3-nexTick-：" class="headerlink" title="3. $nexTick ："></a>3. $nexTick ：</h5><p><strong>官方解释：</strong>将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 操作更新后的 Dom</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>例如在 <strong>created</strong> 中 Dom 还未创建完成，这时我们可以使用 <strong>$nexTick</strong> 写入即将对 Dom 进行的操作，等待 Dom 更新创建完成后将执行该操作。</li><li>列如一个很大的数组做了很大的改动你需要 Dom 更新完成之后做些什么，这时你可以在数组操作完的下一句使用 <code>$nextTick</code> 它会在 Dom 改动且渲染完成后做出操作。</li></ul><h2 id="Axios-与-Vue"><a href="#Axios-与-Vue" class="headerlink" title="Axios 与 Vue"></a>Axios 与 Vue</h2><h3 id="1-Vue-中使用-Axios："><a href="#1-Vue-中使用-Axios：" class="headerlink" title="1. Vue 中使用 Axios："></a>1. Vue 中使用 Axios：</h3><ul><li>项目中安装 Axios：<code>npm i axios -S</code></li><li>在组件中直接使用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在需要 axios 的组件中导入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>新建 js 文件封装 axios（以 src 下新建 @&#x2F;utils&#x2F;request.js 文件为例）：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span> <span class="comment">// 引入 axios</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 axios 实例</span></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// config</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 创建其它实例或实例配置等... */</span></span><br><span class="line"><span class="comment">// 导出需要使用的实例或者方法等...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>在组件中直接引入使用即可： <code>import &#123;request&#125; from &quot;@/utils/request&quot;</code></p><h3 id="2-Vue-封装-Axios-模板："><a href="#2-Vue-封装-Axios-模板：" class="headerlink" title="2. Vue 封装 Axios 模板："></a>2. Vue 封装 Axios 模板：</h3><p><strong>内容展示省略（TODO）</strong></p><h2 id="VueRouter"><a href="#VueRouter" class="headerlink" title="VueRouter"></a>VueRouter</h2><h3 id="1-认识路由："><a href="#1-认识路由：" class="headerlink" title="1. 认识路由："></a>1. 认识路由：</h3><ul><li><a href="https://router.vuejs.org/zh/">官网 Vue Router (vuejs.org)</a></li><li>安装 axios： <code>npm install vue-router@4</code></li></ul><h4 id="1-基础使用："><a href="#1-基础使用：" class="headerlink" title="1. 基础使用："></a>1. 基础使用：</h4><ol><li>vue 中使用路由参照 vue-cli 创建路由项目（src 下 <strong>router&#x2F;index.js</strong>）：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HomeView from <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">routes</span> <span class="operator">=</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    component: HomeView</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">router</span> <span class="operator">=</span> createRouter(&#123;</span><br><span class="line">  history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>路由中导入组件 <code>import from</code> 方式打包时会将所有组件与路由打包到同一个 js 中。</p><p><code>() =&gt; import(&#39;组件&#39;)</code> 会将组件打包为单个 js 文件实现懒加载，推荐使用。</p><ol start="2"><li>在 <strong>main.js</strong> 中注册路由：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>在 <strong>App.vue</strong> 中使用路由：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由跳转地址（与 a 标签作用类似，不建议使用a标签） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span><span class="comment">&lt;!-- 路由视图展示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 当前所在路由对应 router-link 激活的样式 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-class">.router-link-exact-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#42b983</span>; <span class="comment">/* 如当前在首页时 Home 展示此样式 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-路由模式："><a href="#2-路由模式：" class="headerlink" title="2. 路由模式："></a>2. 路由模式：</h4><p><code>Hash</code> ：使用 URL 的 hash值来作为路由，且 URL 中会带有 <strong># 号</strong>。</p><p><code>History</code> ：历史模式借助 HTML5 History API 实现。</p><p>切换 Hash 模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// history: createWebHistory(process.env.BASE_URL), // 历史模式</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(process.<span class="property">env</span>.<span class="property">BASE_URL</span>), <span class="comment">// Hash 模式（默认）</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-重定向与别名："><a href="#3-重定向与别名：" class="headerlink" title="3. 重定向与别名："></a>3. 重定向与别名：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeView.vue&#x27;</span>),</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">  <span class="comment">// alias: &#x27;/home&#x27;, // 别名</span></span><br><span class="line">  <span class="attr">alias</span>: [<span class="string">&#x27;/index.html&#x27;</span>,<span class="string">&#x27;/home&#x27;</span>],</span><br><span class="line">  <span class="comment">// alias: [&#x27;/home:id&#x27;] // 当此路径有使用 params 传参时，别名也需要将参数带上（params 传参下方有介绍）</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 重定向</span></span><br><span class="line">  <span class="comment">// redirect: &#123;name:&#x27;home&#x27;&#125;, // 也可以使用 path 路径方式</span></span><br><span class="line">  <span class="comment">/* 函数返回一个对象，函数参数就是 $route</span></span><br><span class="line"><span class="comment">  redirect: route=&gt;&#123;</span></span><br><span class="line"><span class="comment">    return &#123;path:&#x27;/&#x27;,query:&#123;id:route.params.id&#125;&#125; // query 传参下方有介绍</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="2-router-link："><a href="#2-router-link：" class="headerlink" title="2. router-link："></a>2. router-link：</h3><ul><li>为路由激活状态的 router-link 设置 class:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- active-class 指点激活样式 class，target=&quot;_blank&quot; 重新打开一个网页到首页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义路由方式与常用 API：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用插槽方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>About<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!-- 替换 a 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 访问新的页面并添加历史记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.push(&#x27;/user&#x27;)&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 访问新页面并直接替换当前记录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.replace(&#x27;/about&#x27;)&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 返回上一页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$router.go(-1)&quot;</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当前路由路径（注意这里是 route 不是 router） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;$route.path&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用命名视图（了解）：</li></ul><p>可以为 router-view 设置 <strong>name</strong> 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 展示默认组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 展示相应名称组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;about&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置路由时使用 components 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="comment">// component: ()=&gt; import(&#x27;../views/HomeView.vue&#x27;),</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeView.vue&#x27;</span>), <span class="comment">// 没有对应命名视图时默认显示组件</span></span><br><span class="line">    <span class="attr">home</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeView.vue&#x27;</span>), <span class="comment">// name 为 home 的视图展示该组件</span></span><br><span class="line">    <span class="attr">about</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="3-嵌套路由："><a href="#3-嵌套路由：" class="headerlink" title="3. 嵌套路由："></a>3. 嵌套路由：</h3><ol><li>路由中定义子路由：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>),</span><br><span class="line">  <span class="comment">// redirect: &#x27;/about/Children1&#x27;, // 重定向</span></span><br><span class="line">  <span class="attr">children</span>: [ <span class="comment">// children 数组定义子路由</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span>, <span class="comment">// 相当于设置 &#x27;/about&#x27; 路径时默认显示的组件（优先与重定向）</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Children1.vue&#x27;</span>)</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;children1&#x27;</span>, <span class="comment">// 子路由路径不需要 &#x27;/&#x27;</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Children1.vue&#x27;</span>)</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;children2&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Children2.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol start="2"><li>使用子路由（这里是 AboutView.vue 中）：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/children1&quot;</span>&gt;</span>Children1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="comment">&lt;!-- to 需要写全路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/children2&quot;</span>&gt;</span>Children1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意 <strong>父级路由</strong> 不能设置 <strong>name</strong> 属性。</p><h3 id="4-动态路由与参数传递："><a href="#4-动态路由与参数传递：" class="headerlink" title="4. 动态路由与参数传递："></a>4. 动态路由与参数传递：</h3><h4 id="1-params-与-query-传参："><a href="#1-params-与-query-传参：" class="headerlink" title="1. params 与 query 传参："></a>1. params 与 query 传参：</h4><ol><li>路由定义：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;children1/:msg&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Children1.vue&#x27;</span>)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;children2&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;children2&#x27;</span>, <span class="comment">// 定义路由名</span></span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Children2.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用路由并传递参数：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- router4 版本 params 方式不传参会报错 No match found for location with path --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/children1/1&quot;</span>&gt;</span>子路由页面 - 1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- query 不传参不会报错 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/children2?name=user&amp;age=18&quot;</span>&gt;</span>子路由页面 - 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/about/children2&#x27;,query:&#123;name:&#x27;user&#x27;,age:18&#125;&#125;&quot;</span>&gt;</span>子路由页面 - 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;children2&#x27;,query:&#123;name:&#x27;user&#x27;,age:18&#125;&#125;&quot;</span>&gt;</span>子路由页面 - 2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在对应组件中接收参数值：</li></ol><ul><li><p>params：参数接收方式： <code>$route.params.id</code></p></li><li><p>query 参数接收方式： <code>$route.query.name</code></p></li></ul><h4 id="2-props-传参："><a href="#2-props-传参：" class="headerlink" title="2. props 传参："></a>2. props 传参：</h4><p><a href="https://router.vuejs.org/zh/guide/essentials/passing-props.html">将 props 传递给路由组件 | Vue Router (vuejs.org)</a></p><ol><li>在 params 传参基础之上定义路由时添加 <code>props: true</code> 属性值。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="comment">// 定义一个路径参数变量名为 id</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="literal">true</span>, <span class="comment">// 使用 props 传参</span></span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/UserView.vue&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在此对应路由组件 <strong>props</strong> 属性中定义一个与路径变量名同名的属性类接收此参数值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>], <span class="comment">// 保证名称与变量名一致</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-导航守卫："><a href="#5-导航守卫：" class="headerlink" title="5. 导航守卫："></a>5. 导航守卫：</h3><ul><li>扩展路由 meta 原信息:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeView.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">meta</span>: &#123; <span class="comment">// 路由原信息（可以存储任意信息）</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-全局守卫："><a href="#1-全局守卫：" class="headerlink" title="1. 全局守卫："></a>1. 全局守卫：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局前置守卫，to 准备跳转的路由，from 当前路由（next 参数3支持但不建议使用）</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// path 路由路径，fullPath 完整路径（包括 query 参数） </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>,<span class="keyword">from</span>.<span class="property">fullPath</span>);</span><br><span class="line">  <span class="comment">// return &#x27;/login&#x27;; // 重定向</span></span><br><span class="line">  <span class="comment">// return &#123;name: &quot;Login&quot;&#125;;</span></span><br><span class="line">  <span class="comment">// return false; // 取消导航</span></span><br><span class="line">  <span class="comment">/* 注意添加 next 参数后必须由 next 控制跳转，</span></span><br><span class="line"><span class="comment">  return 将不起作用，且不 next() 时也不能默认跳转下一页面 */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局解析守卫（每次导航时都会触发）</span></span><br><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="function"><span class="params">to</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// return false;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局后置钩子，to 调转到的路由，from 之前的路由，failure 导航是否成功（不支持 next 参数）</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 将页面标题更改为 meta.title 属性的值</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-路由守卫："><a href="#2-路由守卫：" class="headerlink" title="2. 路由守卫："></a>2. 路由守卫：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/UserView.vue&#x27;</span>),</span><br><span class="line">  <span class="comment">// 路由守卫，同一路由只有 params、query 改变时不会触发</span></span><br><span class="line">  <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// return false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 也可以是函数数组</span></span><br><span class="line">  <span class="comment">// beforeEnter: [removeQueryParams, removeHash],</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-组件守卫："><a href="#3-组件守卫：" class="headerlink" title="3. 组件守卫："></a>3. 组件守卫：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt; </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this`，因为当守卫执行时，组件实例还没被创建</span></span><br><span class="line">    <span class="comment">// 可以使用 next 的 vm 参数方位实例（仅 beforeRouteEnter 可使用）</span></span><br><span class="line">    <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开该组件的对应路由时调用</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-导航流程："><a href="#4-导航流程：" class="headerlink" title="4. 导航流程："></a>4. 导航流程：</h4><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h3 id="6-keep-alive-与-transition："><a href="#6-keep-alive-与-transition：" class="headerlink" title="6. keep-alive 与 transition："></a>6. keep-alive 与 transition：</h3><ul><li>vue2 时可以直接使用 <code>transition</code> 或 <code>keep-alive</code> 包裹组件。</li><li>vue3 需使用下方式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-认识-Vuex："><a href="#1-认识-Vuex：" class="headerlink" title="1. 认识 Vuex："></a>1. 认识 Vuex：</h3><ul><li><a href="https://vuex.vuejs.org/zh/index.html">Vuex 官网 (vuejs.org)</a></li><li><a href="https://pinia.vuejs.org/">Pinia 官网</a></li><li><a href="https://pinia.web3doc.top/">Pinia 中文文档 (web3doc.top)</a></li><li>安装： <code>npm install vuex@next --save</code></li></ul><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><p><img src="/images/vue/vue3/vuex.png" alt="Vuex 工作原理图"></p><h4 id="引入方式："><a href="#引入方式：" class="headerlink" title="引入方式："></a>引入方式：</h4><ol><li>在 <strong>src&#x2F;store</strong> 目录下新建 <strong>index.js</strong> 内容如下：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <strong>main.js</strong> 中注册 Vuex ：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(store).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 注册 Vuex</span></span><br></pre></td></tr></table></figure><h3 id="2-核心概念："><a href="#2-核心概念：" class="headerlink" title="2.核心概念："></a>2.核心概念：</h3><h4 id="1-State（状态）："><a href="#1-State（状态）：" class="headerlink" title="1. State（状态）："></a>1. State（状态）：</h4><ul><li>在 Vuex 的 state（<em>src&#x2F;store&#x2F;index.js</em>）中可以存储记录任意属性值，因此也被称之为 Vuex 的状态。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ruoxijun&#x27;</span>, <span class="comment">// 这里声明了一个那么属性值</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在组件中读取状态值：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.name&#125;&#125; - &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 访问 Vuex 状态中的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">name</span>, <span class="comment">// 已经注册在 vue 中，vue 的属性必须用 this 访问</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Mutation（改变）"><a href="#2-Mutation（改变）" class="headerlink" title="2. Mutation（改变）:"></a>2. Mutation（改变）:</h4><p>组件中使用 <code>$store.state</code> 访问状态属性，也可以直接修改属性值，但并不推荐。官方推荐我们使用 <strong>mutations</strong> 搭配 <strong>$store.commit</strong> 的方式来修改状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********** Vuex 中 ************/</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 默认会将 state 作为第一个参数传入你的方法中</span></span><br><span class="line"><span class="comment">   * 参数2来接收用户传入的数据（payload 官方称之为载荷，并表示其应该是一个对象）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">setStateName</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">name</span> = payload; <span class="comment">// 修改状态</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** 组件中 ************/</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">setStateName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 使用 commit 来修改 Vuex 状态</span></span><br><span class="line"><span class="comment">      * 参数1为在 mutations 中需要被调用的方法名</span></span><br><span class="line"><span class="comment">      * 参数2为你需要传递的参数值（有多个值需要传递时使用对象或数组）</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setStateName&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>使用对象风格 commit：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********** 组件中 ************/</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;setStateName&#x27;</span>, <span class="comment">// 使用 type 属性指定方法名称</span></span><br><span class="line">    <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span> <span class="comment">// 参数值（属性名可以自定义）</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** Vuex 中 ************/</span></span><br><span class="line"><span class="title function_">setStateName</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意接收到的参数值作为对象在参2中</span></span><br><span class="line">    state.<span class="property">name</span> = payload.<span class="property">name</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="3-Getter（属性）"><a href="#3-Getter（属性）" class="headerlink" title="3. Getter（属性）:"></a>3. Getter（属性）:</h4><ul><li>Vuex 中 getters 与 vue 中的计算属性类似：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 默认会将 state、getters 分别传入参1、2中</span></span><br><span class="line">    <span class="title function_">nameAndNum</span>(<span class="params">state, getters</span>)&#123;</span><br><span class="line">        <span class="comment">// 可以使用参2（getters）调用 getters 中的其它方法</span></span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">name</span> + state.<span class="property">loginUser</span>.<span class="property">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>组件中使用 <code>$store.getters</code> 进行访问：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> geteer：&#123;&#123;$store.getters.nameAndNum&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>传参技巧：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">functionName</span>(state, getters)&#123;</span><br><span class="line">    <span class="comment">// 返回带参的函数，调用时传入参数即可</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">parameter</span> =&gt;</span> &#123;<span class="comment">/* ... */</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Action（异步）"><a href="#4-Action（异步）" class="headerlink" title="4. Action（异步）:"></a>4. Action（异步）:</h4><p>Action 可以包含任意异步操作，常用做异步请求之类操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">// 参数1是 Vuex 上下文对象</span></span><br><span class="line">  <span class="title function_">action1</span>(<span class="params">context</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(context),<span class="number">1500</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 基本使用与 mutations 中类似（除参1不同）</span></span><br><span class="line">  <span class="title function_">action2</span>(<span class="params">&#123;state, commit, getters, dispatch&#125;, payload</span>)&#123;</span><br><span class="line">    <span class="comment">/* context 解构大概有这几个属性 */</span></span><br><span class="line">    <span class="comment">// state.name // 访问状态</span></span><br><span class="line">    <span class="comment">// commit(&#x27;setStateName&#x27;, payload) // 依然推荐使用 commit 方式修改数据</span></span><br><span class="line">    <span class="comment">// getters.nameAndNum // 访问 getters 属性</span></span><br><span class="line">    <span class="comment">// dispatch(&#x27;action1&#x27;, payload) // 调用 actions 中的其它方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>组件中使用 <code>$store.dispatch</code> 调用方法：<code>this.$store.dispatch(&quot;action1&quot;)</code></p><p>使用大致与 <code>commit</code> 类似，它的参2也用来接收参数（同样支持对象风格的 dispatch）</p><p><strong>context</strong> 中还包含了 <code>rootState</code> 和 <code>rootGetters</code> 两个属性，这是在下面模块中需要用到的。</p><h4 id="5-Module（模块）"><a href="#5-Module（模块）" class="headerlink" title="5. Module（模块）:"></a>5. Module（模块）:</h4><p>Vuex 允许我们将 store 分割成 <strong>模块（module）</strong>，每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块。</p><ol><li>state（子模块状态）：</li></ol><p>注册一个子模块 module1 ： <code>modules: &#123; module1 &#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> module1 = &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">()=&gt;</span>&#123; <span class="comment">// 与组件类似，子模块的state需要使用函数封装</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// $store.state.module1.module1Name 组件中访问方式</span></span><br><span class="line">            <span class="attr">module1Name</span>: <span class="string">&#x27;module1Name&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>getters、mutations、actions：</li></ol><p><strong>默认</strong> 情况下，<strong>模块内部</strong> 的 <strong>getters、mutations、actions</strong> 仍然是注册在 <strong>全局命名空间</strong> 的——这样使得多个模块能够对同一个 getters、mutations、actions 作出响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// $store.commit(&#x27;setName&#x27;,payload) // 默认全局注册</span></span><br><span class="line">  <span class="title function_">setName</span>(<span class="params">state, payload</span>)&#123;</span><br><span class="line">    <span class="comment">// state 只能访问子模块状态</span></span><br><span class="line">    state.<span class="property">module1Name</span> = payload;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> state       默认子模块中的 state 只能访问子模块的状态</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> getters     只能访问模块的 getters</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rootState   访问根模块的状态</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> rootGetters 访问根模块的 getters</span></span><br><span class="line"><span class="comment">   * 组件访问方式：$store.getters.getModule1Name // 默认全局</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getModule1Name</span>(<span class="params">state, getters, rootState, rootGetters</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> module1Name + rootState.<span class="property">name</span>; <span class="comment">// 访问根组件的状态属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * actions 参1 context 中除根节点介绍过的属性外，</span></span><br><span class="line"><span class="comment">   * 还有 rootState、rootGetters 来访问根节点。</span></span><br><span class="line"><span class="comment">   * 组件访问方式：$store.dispatch(&quot;module1Actions&quot;, payload) // 默认全局</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">module1Actions</span>(<span class="params">&#123;rootState, rootGetters&#125;, payload</span>)&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">modules</span>: &#123; <span class="comment">/* 嵌套子模块 */</span> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>命名空间：</li></ol><p>getters、mutations、actions 默认是与根模块整合的（同名属性根模块优先），如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> module1 = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">  <span class="comment">// 嵌套子模块</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">myPage</span>: &#123; <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">      <span class="attr">getters</span>: &#123;</span><br><span class="line">        profile () &#123;&#125; <span class="comment">// -&gt; getters[&#x27;module1/profile&#x27;]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">posts</span>: &#123;</span><br><span class="line">      <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">      <span class="attr">getters</span>: &#123;</span><br><span class="line">        popular () &#123;&#125; <span class="comment">// -&gt; getters[&#x27;module1/posts/popular&#x27;]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问方式(state 自带命名空间)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$store.<span class="property">getters</span>[<span class="string">&#x27;module1/getModule1Name&#x27;</span>]</span><br><span class="line">$store.<span class="title function_">commit</span>(<span class="string">&#x27;module1/setName&#x27;</span>, payload)</span><br><span class="line">$store.<span class="title function_">dispatch</span>(<span class="string">&quot;module1/setName&quot;</span>, payload)</span><br></pre></td></tr></table></figure><ol start="4"><li>Vuex 模块化编程：</li></ol><p>将 getters、mutations、actions、modules 抽取出来形成单独的 JS 文件，使用 <code>export default</code> 导出并在 Vuex 主文件导入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuex 核心概念</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span>; <span class="comment">// 不需要 js 的后缀</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">&#x27;./mutations&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span>;</span><br><span class="line"><span class="comment">// 模块（可以根据不同的模块来细分）</span></span><br><span class="line"><span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module/module1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;<span class="comment">/* 状态 */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    module1,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><h3 id="1-setup："><a href="#1-setup：" class="headerlink" title="1. setup："></a>1. setup：</h3><p><strong>setup</strong> 函数是一个新的组件选项，作为组件中组合式 API 的入口，函数在 <strong>beforeCreate</strong> 生命周期钩子执行之前执行，实例还没生成，<em><strong>没有 this</strong></em>。</p><p>setup 有两个可选参数 <strong>props</strong> 与 <strong>context</strong> ，props 是访问组件 props 属性值的对象。context 包含 4 个属性 <strong>attrs、slots、emit、expose</strong>。</p><ul><li>父组件中：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com-a-p-i</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">title</span>=<span class="string">&quot;home&quot;</span> @<span class="attr">comfun</span>=<span class="string">&quot;comfun&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>slot<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com-a-p-i</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>实例组件中：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;count&#125;&#125; <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params">props, &#123; attrs, slots, emit, expose &#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setup&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;props&quot;</span>, props.<span class="property">name</span>); <span class="comment">// 访问组件 props</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 访问组件标签属性(props 定义的属性无法访问)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;attrs&quot;</span>, attrs.<span class="property">title</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;slots&quot;</span>, slots.<span class="title function_">a</span>()); <span class="comment">// 拿到具名插槽内容对象（default() 默认插槽对象）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&quot;comfun&quot;</span>, <span class="string">&quot;向父组件传递数据&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; <span class="attr">count</span>:<span class="number">1</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeCreate&quot;</span>); <span class="comment">// 在 setup 之后</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>context 的 expose 能显式地限制该组件暴露出的 property，当父组件通过 <a href="https://staging-cn.vuejs.org/guide/essentials/template-refs.html#ref-on-component">模板 ref</a> 访问该组件的实例时，将仅能访问 <code>expose</code> 函数暴露出的内容。</li><li>setup 发返回值为一个对象，该对象中的属性值是暴露给组件访问的。属性值只有是 composition api 创建的响应式对象才能够像 data 中的属性一样响应式的改变。</li></ul><h3 id="2-常用-API："><a href="#2-常用-API：" class="headerlink" title="2. 常用 API："></a>2. 常用 API：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Composition API 都必须导入才能使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRef, toRefs, readonly, isRef, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">1</span>; <span class="comment">// 基本类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ref 为单个数据提供响应式代理</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// ref 定义的对象在 setup 中必须使用 value 访问或修改（视图中可以直接访问）</span></span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// reactive 只能为对象或数组提供响应式代理</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>:<span class="string">&quot;hi&quot;</span>, <span class="attr">age</span>:<span class="number">18</span> &#125;);</span><br><span class="line">    user.<span class="property">age</span>++; <span class="comment">// 正常使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toRef 从对象响应式数据中提取单个数据作为响应式数据</span></span><br><span class="line">    <span class="keyword">const</span> name = <span class="title function_">toRef</span>(user,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    name.<span class="property">value</span> = <span class="string">&quot;ha&quot;</span>; <span class="comment">// user.name 或 name 改变双方都会发生改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toRefs 对象响应式数据转普通对象，但属性只修改为响应式数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123; age &#125; = <span class="title function_">toRefs</span>(user); <span class="comment">// age 为响应式数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// readonly 响应式数据类型转普通数据类型</span></span><br><span class="line">    <span class="comment">// const user2 = readonly(user);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// isRef 判断某属性是否是响应式对象</span></span><br><span class="line">    <span class="keyword">const</span> userIsRef = <span class="title function_">isRef</span>(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义方法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params"></span>)=&gt; count.<span class="property">value</span>++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 计算属性 */</span></span><br><span class="line">    <span class="comment">// let nameNum = computed(()=&gt; user.name + count.value); // 返回一个不可修改的 ref （只有 get）</span></span><br><span class="line">    <span class="keyword">let</span> nameNum = <span class="title function_">computed</span>(&#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">()=&gt;</span> user.<span class="property">name</span> + count.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="function"><span class="params">val</span>=&gt;</span> user.<span class="property">name</span> + count.<span class="property">value</span> + val <span class="comment">// 添加 set 方法后该属性可以修改</span></span><br><span class="line">    &#125;);</span><br><span class="line">    nameNum.<span class="property">value</span> = <span class="number">1</span>; <span class="comment">// 计算属性返回的是一个 ref 对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      num, <span class="comment">// 返回原生数据是无法响应式的改变的</span></span><br><span class="line">      count, <span class="comment">// 响应式数据</span></span><br><span class="line">      <span class="comment">// user, // 对象类型响应式数据</span></span><br><span class="line">      ...<span class="title function_">toRefs</span>(user), <span class="comment">// 响应式对象解构为单个的响应式数据</span></span><br><span class="line">      add, <span class="comment">// 与 methods 中方法一样</span></span><br><span class="line">      nameNum, <span class="comment">// 暴露计算属性</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-watch-与-watchEffect："><a href="#3-watch-与-watchEffect：" class="headerlink" title="3. watch 与 watchEffect："></a>3. watch 与 watchEffect：</h3><ol><li>监听属性值变化：</li></ol><p>监听属性方法同样需要导入：<code>import &#123; watch, watchEffect &#125; from &#39;vue&#39;;</code></p><p>如下两方法初始时都会默认执行一次，且当方法内的某个属性发生改变时就会执行一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watch&quot;</span>, count.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// watchEffect 只能默认监听方法中使用到的数据变化局限性大</span></span><br><span class="line"><span class="keyword">const</span> stop = <span class="title function_">watchEffect</span>(<span class="function">(<span class="params">oninvalidate</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watchEffect&quot;</span>, count.<span class="property">value</span>);</span><br><span class="line">    <span class="title function_">oninvalidate</span>(<span class="function">()=&gt;</span>&#123; <span class="comment">// 回调函数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>); <span class="comment">// 在上面代码之前执行</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,&#123; <span class="comment">/* 可选配置参数与 watch 相同 */</span> &#125;);</span><br><span class="line"><span class="title function_">stop</span>(); <span class="comment">// 返回的函数执行将停止监听</span></span><br></pre></td></tr></table></figure><ol start="2"><li>指定监听：</li></ol><ul><li>watch 参数1 指定要监听的响应式数据</li><li>参数2 监听方法，newV 监听的新值, oldV 旧值（默认初始化时为 undefined）</li><li>参数3 为监听配置对象，指定监听后默认初始化是不会执行一次的 immediate 为 true 时可以使监听方法初始化时执行一次。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="number">9</span>);</span><br><span class="line"><span class="comment">// 监听 a 数据变化（注意这里不需要使用 value）</span></span><br><span class="line"><span class="title function_">watch</span>(a, <span class="function">(<span class="params">newV, oldV</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watch&quot;</span>, count.<span class="property">value</span>); <span class="comment">// count 变化无影响</span></span><br><span class="line">&#125;, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;); <span class="comment">// 参数3 中的 immediate 默认为 false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听多个属性时使用数组</span></span><br><span class="line"><span class="title function_">watch</span>([a,count],</span><br><span class="line">    <span class="comment">// 监听方法中，第一个数组为新值，第二个数组为旧值</span></span><br><span class="line">    <span class="function">(<span class="params">[newA, newCount], [oldA, oldCount]</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watch&quot;</span>, newA, oldA, newCount, oldCount);</span><br><span class="line">&#125;, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>监听对象响应式数据的某个属性或想监听响应式数据的 value 时需要使用函数方式返回：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 a 和 user 的 name 变化（监听 user 整个对象则无需使用函数方式）</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>a.<span class="property">value</span>,<span class="function">()=&gt;</span>user.<span class="property">name</span>], <span class="function">(<span class="params">[newA, newName], [oldA, oldName]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;watch&quot;</span>, newA, oldA, newName, oldName);</span><br><span class="line">&#125;, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>如果监听 ref 且 ref.value 是深层次对象时需要配置 <code>deep: true</code> 开启深层次监听，而 reactive 默认开启：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(refV, <span class="function">(<span class="params">newV, oldV</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 且对象（引用类型）属性值监听它的 newV, oldV 都一样</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 开启深层次监听</span></span><br><span class="line">    <span class="attr">flush</span>: <span class="string">&quot;pre&quot;</span> <span class="comment">// 默认 pre 组件更新前调用，sync 同步执行，post 更新之后</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-生命周期："><a href="#4-生命周期：" class="headerlink" title="4. 生命周期："></a>4. 生命周期：</h3><p>注意使用以下生命周期 API 也需要导入如：<code>import &#123; onMounted &#125; from &#39;vue&#39;</code></p><table><thead><tr><th>选项式 API</th><th>Hook inside <code>setup</code></th><th></th></tr></thead><tbody><tr><td><code>beforeCreate</code></td><td>Not needed*(setup)</td><td></td></tr><tr><td><code>created</code></td><td>Not needed*(setup)</td><td></td></tr><tr><td><code>beforeMount</code></td><td><code>onBeforeMount</code></td><td>创建之前</td></tr><tr><td><code>mounted</code></td><td><code>onMounted</code></td><td>创建完成</td></tr><tr><td><code>beforeUpdate</code></td><td><code>onBeforeUpdate</code></td><td>更新之前</td></tr><tr><td><code>updated</code></td><td><code>onUpdated</code></td><td>更新完成</td></tr><tr><td><code>beforeUnmount</code></td><td><code>onBeforeUnmount</code></td><td>卸载（销毁）之前</td></tr><tr><td><code>unmounted</code></td><td><code>onUnmounted</code></td><td>卸载完成</td></tr><tr><td><code>errorCaptured</code></td><td><code>onErrorCaptured</code></td><td></td></tr><tr><td><code>renderTracked</code></td><td><code>onRenderTracked</code></td><td></td></tr><tr><td><code>renderTriggered</code></td><td><code>onRenderTriggered</code></td><td></td></tr><tr><td><code>activated</code></td><td><code>onActivated</code></td><td>keep-alive 缓存的组件激活</td></tr><tr><td><code>deactivated</code></td><td><code>onDeactivated</code></td><td>keep-alive 缓存的组件停用</td></tr></tbody></table><p>当选项 API 与组合式 API 生命周期同时存在时会先执行 setup 中的，也就是先执行组合式 API 生命周期方法。</p><h4 id="nextTick："><a href="#nextTick：" class="headerlink" title="nextTick："></a>nextTick：</h4><p><code>$nextTick</code> 在 setup 中使用 <code>nextTick</code> 代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; nextTick &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const change = async ()=&gt;&#123;</span><br><span class="line">  await nextTick(); // 同步调用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-provide-与-inject："><a href="#5-provide-与-inject：" class="headerlink" title="5. provide 与 inject："></a>5. provide 与 inject：</h3><ul><li>provide、inject 是 vue 让父组件给子组件提供数据访问的一种方式，使多层子组件（如孙子组件）下依然可以访问到父组件的属性值。</li></ul><h4 id="1-选项式-API："><a href="#1-选项式-API：" class="headerlink" title="1. 选项式 API："></a>1. 选项式 API：</h4><ol><li>如 App.vue 中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;this is App msg&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="variable language_">this</span>.<span class="property">msg</span>, <span class="comment">// 提供 msg 属性</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在第 3 层的子组件中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 与 props 类似，接收的数据不是响应式的（this.msg = &quot;xx&quot; App.vue 中无变化）</span></span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;msg&#x27;</span>], <span class="comment">// 注入父组件的属性（this.msg 或 &#123;&#123;msg&#125;&#125; 访问）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-组合式-API："><a href="#2-组合式-API：" class="headerlink" title="2. 组合式 API："></a>2. 组合式 API：</h4><ol><li>App.vue 中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; <span class="comment">// 引入 provide</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&quot;this is App msg&quot;</span>);</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;msgStr&#x27;</span>, msg); <span class="comment">// 将 msg 提供出去</span></span><br><span class="line">    <span class="comment">// 多个数据使用多个 provide 方法</span></span><br><span class="line">    <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>子组件中：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>; <span class="comment">// 引入 inject</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msgStr = <span class="title function_">inject</span>(<span class="string">&#x27;msgStr&#x27;</span>); <span class="comment">// 注入（参数二可设置默认值）</span></span><br><span class="line">  <span class="comment">// 需要注入多个使用多个 inject</span></span><br><span class="line">  <span class="keyword">return</span> &#123;msgStr&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组合式 API 使用 provide、inject 注入的父属性是 <strong>响应式</strong> 的，即我们在这里修改 msgStr 的值父组件 msg 也会相应改变。</li></ul><h3 id="6-VueRouter："><a href="#6-VueRouter：" class="headerlink" title="6. VueRouter："></a>6. VueRouter：</h3><p><a href="https://router.vuejs.org/zh/guide/advanced/composition-api.html">Vue Router 和 组合式 API | Vue Router (vuejs.org)</a></p><ul><li><code>this.$router</code> 与 <code>this.$route</code> 在 setup 中无法直接访问，因此 VueRouter 提供了 <code>useRouter</code> 和 <code>useRoute</code> 函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute, useRouter, onBeforeRouteLeave, onBeforeRouteUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意必须在 setup 最外层获取路由对象</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>(); <span class="comment">// 当前路由对象</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">useRouter</span>(); <span class="comment">// 全局路由对象</span></span><br><span class="line">    <span class="comment">// 监听路由参数变化</span></span><br><span class="line">    <span class="title function_">watch</span>(<span class="function">()=&gt;</span>route.<span class="property">params</span>, <span class="function">(<span class="params">newId, oldId</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newId.<span class="property">id</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导航守卫函数</span></span><br><span class="line">    <span class="title function_">onBeforeRouteLeave</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span> &#123;&#125;);</span><br><span class="line">    <span class="title function_">onBeforeRouteUpdate</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>)=&gt; &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意 useRoute、useRouter（包括 Vuex 的 useStore） 等方法获取对象必须在 setup 中的最外层，如果在方法中使用 useRouter() 会是 undefined。</li></ul><h3 id="7-Vuex："><a href="#7-Vuex：" class="headerlink" title="7. Vuex："></a>7. Vuex：</h3><p><a href="https://vuex.vuejs.org/zh/guide/composition-api.html">组合式API | Vuex (vuejs.org)</a></p><ul><li>对于 <code>this.$store</code> Vuex 提供了 <code>useStore</code> 函数</li><li>为了访问 <strong>state</strong> 和 <strong>getter</strong>，需要创建 <code>computed</code> 引用以保留响应性，这与在选项式 API 中创建计算属性等效</li></ul><figure class="highlight plaintext"><figcaption><span>javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; computed &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;; // 引入 useStore</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup () &#123;</span><br><span class="line">    const store = useStore(); // 必须在 setup 最外层获取对象</span><br><span class="line">    // store.commit(&#x27;increment&#x27;) store.dispatch(&#x27;asyncIncrement&#x27;)</span><br><span class="line">    return &#123;</span><br><span class="line">      // 在 computed 函数中访问 state</span><br><span class="line">      count: computed(() =&gt; store.state.count),</span><br><span class="line">      // 在 computed 函数中访问 getter</span><br><span class="line">      double: computed(() =&gt; store.getters.double)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vite-TS"><a href="#Vite-TS" class="headerlink" title="Vite + TS"></a>Vite + TS</h2><h3 id="创建项目："><a href="#创建项目：" class="headerlink" title="创建项目："></a>创建项目：</h3><ul><li><a href="https://vitejs.dev/">Vite 官网地址（vitejs.dev）</a></li><li>npm 创建 Vite 项目：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><ul><li>创建 Vite vue3 项目：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><h3 id="Ref-全家桶："><a href="#Ref-全家桶：" class="headerlink" title="Ref 全家桶："></a>Ref 全家桶：</h3><ul><li><code>ref</code> 、 <code>Ref</code> 、 <code>isRef</code> ：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">Ref</span>, isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">type T = &#123;<span class="attr">name</span>: string&#125;</span><br><span class="line"><span class="comment">// 当值是一个复杂类型时使用 Ref 指定类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name</span>:<span class="title class_">Ref</span>&lt;T&gt; = <span class="title function_">ref</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;ruoxijun&#x27;</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(name)); <span class="comment">// 判断是否是 Ref 对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 获取 dom 元素</span></span><br><span class="line"><span class="keyword">const</span> myDiv = ref&lt;<span class="title class_">HTMLDivElement</span>&gt;(); <span class="comment">// &lt;div ref=&quot;myDiv&quot;&gt;&lt;/div&gt; ref 值与变量名保持一致</span></span><br><span class="line">myDiv.<span class="property">value</span> <span class="comment">// 因为此时 dom 还未被渲染因此获取不到</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  myDiv.<span class="property">value</span>.<span class="property">innerText</span> = <span class="string">&quot;myDiv&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>shallowRef</code> 与 <code>triggerRef</code>：</li></ul><p>shallowRef 只支持 <strong>浅层次</strong> 数据响应，注意 ref 底层有调用 triggerRef（如同一方法中同时更改 ref 与 shallowRef 的值时，shallowRef 视图也会被更新）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowRef, triggerRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="title function_">shallowRef</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;haha&quot;</span>&#125;);</span><br><span class="line">o.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&quot;xx&quot;</span>; <span class="comment">// 实际值改变，但页面视图不会更新</span></span><br><span class="line"><span class="title function_">triggerRef</span>(o); <span class="comment">// 强制更新</span></span><br><span class="line">o.<span class="property">value</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;oo&quot;</span> &#125;; <span class="comment">// 视图更新</span></span><br></pre></td></tr></table></figure><h3 id="Reactive-全家桶："><a href="#Reactive-全家桶：" class="headerlink" title="Reactive 全家桶："></a>Reactive 全家桶：</h3><ul><li><code>reactive</code> 与 <code>readonly</code> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, readonly &#125; from <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="type">type</span> <span class="variable">T</span> <span class="operator">=</span> string[] <span class="comment">// 与 ref 一样可指定类型</span></span><br><span class="line"><span class="type">const</span> <span class="variable">o</span> <span class="operator">=</span> reactive&lt;T&gt;([]);</span><br><span class="line">o.push(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">read</span> <span class="operator">=</span> readonly(o);</span><br><span class="line"><span class="comment">// read 只读，但它会收原始对象的 o 的影响，如修改 o 时它的值也改变</span></span><br></pre></td></tr></table></figure><ul><li><code>shallowReactive</code> ：</li></ul><p>它与 <code>shallowRef</code> 类似提供浅层数据响应，且会被 <code>ref</code> 与 <code>reactive</code> 影响（每次对 ref 或者 reactive 的更改都会将所有的组件模板渲染更新为最新数据）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowReactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">shallowReactive</span>(&#123;<span class="attr">one</span>: &#123;<span class="attr">two</span>: <span class="string">&quot;two&quot;</span>&#125;&#125;);</span><br><span class="line">obj.<span class="property">one</span>.<span class="property">two</span> = <span class="string">&quot;hh&quot;</span>; <span class="comment">// 视图无变化</span></span><br><span class="line">obj.<span class="property">one</span> = &#123;<span class="attr">two</span>: <span class="string">&quot;xx&quot;</span>&#125; <span class="comment">// 视图更新</span></span><br></pre></td></tr></table></figure><h3 id="To-全家桶："><a href="#To-全家桶：" class="headerlink" title="To 全家桶："></a>To 全家桶：</h3><ul><li><code>toRef</code> 将响应式对象属性提取为 ref：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;ruoxijun&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">toRef</span>(o, <span class="string">&quot;name&quot;</span>); <span class="comment">// 提取响应式对象的某个 key 为 ref</span></span><br><span class="line">name.<span class="property">value</span> = <span class="string">&quot;haha&quot;</span>; <span class="comment">// o.name 值同时改变</span></span><br><span class="line">o.<span class="property">name</span> = <span class="string">&quot;xx&quot;</span>; <span class="comment">// name.value 值同时改变</span></span><br></pre></td></tr></table></figure><ul><li><code>toRefs</code> 将响应式对象的每个属性都转为 ref 对象并解构：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;ruoxijun&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> &#123;name, age&#125; = <span class="title function_">toRefs</span>(o);</span><br></pre></td></tr></table></figure><ul><li><code>toRaw</code> 为响应式对象生成一个普通对象：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;ruoxijun&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">toRaw</span>(o);</span><br></pre></td></tr></table></figure><h3 id="computed："><a href="#computed：" class="headerlink" title="computed："></a>computed：</h3><ul><li><code>computed</code> 计算属性：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">Ref</span>, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">count</span>: <span class="title class_">Ref</span>&lt;number&gt; = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> con = computed&lt;number&gt;(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> count.<span class="property">value</span> + <span class="number">1</span>; <span class="comment">// 当 count 属性值变化时 con 的值改变</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="less："><a href="#less：" class="headerlink" title="less："></a>less：</h3><ol><li>安装 less 到开发环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader -D</span><br></pre></td></tr></table></figure><ol start="2"><li>在 style 标签上添加 <code>lang=&quot;less&quot;</code> ：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传值："><a href="#组件传值：" class="headerlink" title="组件传值："></a>组件传值：</h3><h4 id="父传子："><a href="#父传子：" class="headerlink" title="父传子："></a>父传子：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 非 TypeScript</span></span><br><span class="line"><span class="comment">const prop = defineProps(&#123;</span></span><br><span class="line"><span class="comment">  msg:&#123;</span></span><br><span class="line"><span class="comment">    type: String,</span></span><br><span class="line"><span class="comment">    default: &quot;&quot;,</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">prop.msg // 值可以直接在模板中使用 &#123;&#123; msg &#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const prop = defineProps&lt;&#123; msg: string &#125;&gt;();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript 也提供了设置默认值的方式</span></span><br><span class="line"><span class="title function_">withDefaults</span>(defineProps&lt;&#123; <span class="attr">msg</span>: <span class="built_in">string</span> &#125;&gt;(),&#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="function">()=&gt;</span> <span class="string">&quot;默认值&quot;</span> <span class="comment">// 如果是复杂类型需要使用函数返回方式</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="子传父："><a href="#子传父：" class="headerlink" title="子传父："></a>子传父：</h4><ul><li>父组件中：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 定义接收参数的方法</span><br><span class="line">const send = (msg:string)=&gt; &#123;</span><br><span class="line">  console.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt; &lt;!-- 绑定子组件的传参事件 --&gt;</span><br><span class="line">  &lt;HelloWorld @on-click=&quot;send&quot; msg=&quot;Vite + Vue&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件中：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义组件传参事件名</span></span><br><span class="line"><span class="comment">// const emit = defineEmits([&#x27;on-click&#x27;]);</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123; <span class="comment">// TypeScript 方式定义</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&quot;on-click&quot;</span>, <span class="attr">msg</span>: <span class="title class_">String</span>):<span class="built_in">void</span></span><br><span class="line">&#125;&gt;();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">send</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 向指定事件传递参数</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&quot;on-click&quot;</span>, <span class="string">&quot;传参值&quot;</span>); <span class="comment">// 可多个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="暴露组件属性："><a href="#暴露组件属性：" class="headerlink" title="暴露组件属性："></a>暴露组件属性：</h4><ul><li>子组件中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴露组件的属性</span></span><br><span class="line"><span class="title function_">defineExpose</span>(&#123;</span><br><span class="line">  count,</span><br><span class="line">  send</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>父组件中：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;HelloWorld ref=&quot;hello&quot;/&gt;</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="title function_">ref</span>();</span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hello.<span class="property">value</span>.<span class="property">count</span>); <span class="comment">// 获取使用组件中的属性</span></span><br><span class="line">  hello.<span class="property">value</span>.<span class="title function_">send</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="递归组件："><a href="#递归组件：" class="headerlink" title="递归组件："></a>递归组件：</h4><ol><li>使用递归组件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &quot;vue&quot;;</span><br><span class="line">import Tree from &quot;./components/Tree.vue&quot;; // 引入递归组件</span><br><span class="line"></span><br><span class="line">interface Tree &#123; // 定义递归数据类型</span><br><span class="line">  name: string;</span><br><span class="line">  checked: boolean;</span><br><span class="line">  children?: Tree[];</span><br><span class="line">&#125;</span><br><span class="line">const data = reactive&lt;Tree[]&gt;([ // 递归数据</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;1&quot;,</span><br><span class="line">    checked: false,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;1-1&quot;,</span><br><span class="line">        checked: true,</span><br><span class="line">        children: [],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;2&quot;,</span><br><span class="line">    checked: false,</span><br><span class="line">    children: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;3&quot;,</span><br><span class="line">    checked: true,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;3-1&quot;,</span><br><span class="line">        checked: false,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;3-1-1&quot;,</span><br><span class="line">            checked: true,</span><br><span class="line">            children: [],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; &lt;!-- 使用递归组件并传入递归数据 --&gt;</span><br><span class="line">    &lt;Tree :data=&quot;data&quot;&gt;&lt;/Tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现递归组件 Tree.vue ：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;item in data&quot; @click.stop=&quot;treeClick($event)&quot; class=&quot;tree&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; v-model=&quot;item.checked&quot;&gt;&lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 当前组件递归，v-if 停止递归条件 --&gt;</span><br><span class="line">    &lt;Tree v-if=&quot;item?.children?.length&quot; :data=&quot;item?.children&quot;&gt;&lt;/Tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  interface Tree &#123; // 递归数据类型</span><br><span class="line">    name: string;</span><br><span class="line">    checked: boolean;</span><br><span class="line">    children?: Tree[];</span><br><span class="line">  &#125;</span><br><span class="line">  const props = defineProps&lt;&#123;</span><br><span class="line">    data?: Tree[] // 接收递归数据</span><br><span class="line">  &#125;&gt;();</span><br><span class="line">  </span><br><span class="line">  const treeClick = (e: Event)=&gt; &#123;</span><br><span class="line">    console.log(e.currentTarget);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Tree&quot; // 默认使用文件名作为组件名</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.tree&#123;</span><br><span class="line">  margin-left: 25px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>可选链操作符：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;).<span class="property">a</span> <span class="comment">// undefined</span></span><br><span class="line">(&#123;&#125;).<span class="property">a</span>.<span class="property">b</span> <span class="comment">// 报错</span></span><br><span class="line">(&#123;&#125;)?.<span class="property">a</span>?.<span class="property">b</span> <span class="comment">// undefined</span></span><br><span class="line">(<span class="literal">null</span> || <span class="literal">undefined</span>) ?? [] <span class="comment">// [] （只针对 null、undefined）</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model:"></a>v-model:</h4><ol><li>父组件中：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;./components/A.vue&quot;;</span><br><span class="line"></span><br><span class="line">const isShow = ref&lt;boolean&gt;(true);</span><br><span class="line">const text = ref&lt;string&gt;(&quot;hello&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; 父组件 - isShow:&#123;&#123;isShow&#125;&#125; - text:&#123;&#123;text&#125;&#125; &lt;/div&gt;</span><br><span class="line">  &lt;div&gt; &lt;button @click=&quot;isShow = !isShow&quot;&gt; 开关 &lt;/button&gt; &lt;/div&gt;</span><br><span class="line">  &lt;A v-model=&quot;isShow&quot; v-model:textVal=&quot;text&quot;&gt;&lt;/A&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>子组件中：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;modelValue&quot;&gt;</span><br><span class="line">    &lt;div&gt; A - isShow:&#123;&#123;modelValue&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;input :value=&quot;textVal&quot; @input=&quot;textValChange&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;close&quot;&gt; 关闭 &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  modelValue: boolean, // v-model 默认为 modelValue 接收</span><br><span class="line">  textVal: string // 接收 v-model:textVal</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const emits = defineEmits([&#x27;update:modelValue&#x27;, &#x27;update:textVal&#x27;]);</span><br><span class="line">const close = ()=&gt;&#123;</span><br><span class="line">  emits(&#x27;update:modelValue&#x27;, false);</span><br><span class="line">&#125;</span><br><span class="line">const textValChange = (e:Event)=&gt;&#123;</span><br><span class="line">  // e.target 默认 EventTarget 类型需要断言为 HTMLInputElement 才能获取到 value 值</span><br><span class="line">  const el = e.target as HTMLInputElement;</span><br><span class="line">  emits(&#x27;update:textVal&#x27;, el.value);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>自定义修饰符：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">modelValue</span>: boolean, <span class="comment">// v-model 默认为 modelValue 接收</span></span><br><span class="line">  <span class="attr">textVal</span>: string <span class="comment">// 接收 v-model:textVal</span></span><br><span class="line">  textValModifiers?:&#123; <span class="comment">// v-model: 后面的名字+Modifiers</span></span><br><span class="line">    <span class="attr">isAdd</span>: boolean <span class="comment">// 自定义修饰符名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;();</span><br></pre></td></tr></table></figure><p>组件上 <code>v-model:textVal.isAdd=&quot;text&quot;</code> ，组件内 <code>props?.textValModifiers?.isAdd</code> 有使用修饰符值为 true 。</p><h3 id="动态组件："><a href="#动态组件：" class="headerlink" title="动态组件："></a>动态组件：</h3><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><ol><li>对象方式实现动态组件：</li></ol><ul><li>如果使用 <code>ref</code> 或者 <code>reactive</code> 包装组件 vue 会代理组件属性监听变化，而这会耗费性能且 vue 会在控制台给出警告。因此建议在对象中使用 <code>markRaw</code> 包裹组件而普通变量使用 <code>shallowRef</code> 包裹组件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, markRaw, shallowRef &#125; from &quot;vue&quot;;</span><br><span class="line">import A from &quot;./components/A.vue&quot;;</span><br><span class="line">import B from &quot;./components/B.vue&quot;;</span><br><span class="line">import C from &quot;./components/C.vue&quot;;</span><br><span class="line">interface o &#123; name: string; com: any; &#125;</span><br><span class="line"></span><br><span class="line">const comIndex = ref(0);</span><br><span class="line">const componentId = shallowRef(A); // 不建议使用 ref</span><br><span class="line">const data = reactive&lt;o[]&gt;([</span><br><span class="line">  &#123; name: &quot;A&quot;, com: markRaw(A), &#125;, // 使用 markRaw 包裹</span><br><span class="line">  &#123; name: &quot;B&quot;, com: markRaw(B), &#125;,</span><br><span class="line">  &#123; name: &quot;C&quot;, com: markRaw(C), &#125;,</span><br><span class="line">]);</span><br><span class="line">const swTab = (com: any, index: number)=&gt;&#123;</span><br><span class="line">  componentId.value = com;</span><br><span class="line">  comIndex.value = index;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tab&quot;&gt;</span><br><span class="line">    &lt;div :class=&quot;&#123; active: comIndex === index &#125;&quot; class=&quot;tab_item&quot;</span><br><span class="line">      @click=&quot;swTab(item.com, index)&quot;</span><br><span class="line">      v-for=&quot;(item, index) in data&quot; &gt;</span><br><span class="line">      &#123;&#123; item.name &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;component :is=&quot;componentId&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串方式实现动态组件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;;</span><br><span class="line">interface o &#123; name: string; com: any; &#125;</span><br><span class="line"></span><br><span class="line">const comIndex = ref(0);</span><br><span class="line">const componentId = ref(&quot;A&quot;); // 使用组件字符串名</span><br><span class="line">const data = reactive&lt;o[]&gt;([</span><br><span class="line">  &#123; name: &quot;A&quot;, com: &quot;A&quot;, &#125;,</span><br><span class="line">  &#123; name: &quot;B&quot;, com: &quot;B&quot;, &#125;,</span><br><span class="line">  &#123; name: &quot;C&quot;, com: &quot;C&quot;, &#125;,</span><br><span class="line">]);</span><br><span class="line">const swTab = (com: any, index: number)=&gt;&#123;</span><br><span class="line">  componentId.value = com;</span><br><span class="line">  comIndex.value = index;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;./components/A.vue&quot;;</span><br><span class="line">import B from &quot;./components/B.vue&quot;;</span><br><span class="line">import C from &quot;./components/C.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components:&#123; A, B, C &#125;// 注册组件</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="异步组件："><a href="#异步组件：" class="headerlink" title="异步组件："></a>异步组件：</h4><ul><li>异步导入组件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import A from &quot;./components/A.vue&quot;;</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./components/A.vue&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="transition："><a href="#transition：" class="headerlink" title="transition："></a>transition：</h3><h4 id="基础使用："><a href="#基础使用：" class="headerlink" title="基础使用："></a>基础使用：</h4><ol><li>使用 <code>transition</code> 标签包裹需要添加动画的元素， <strong>name</strong> 的值是定义动画 class 的前缀：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义动画：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 显示 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-from</span>&#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125; <span class="comment">/* 进入之前 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>&#123; <span class="attribute">transition</span>: all .<span class="number">5s</span> ease; &#125; <span class="comment">/* 过度曲线 */</span></span><br><span class="line"><span class="selector-class">.fade-enter-to</span>&#123; <span class="attribute">opacity</span>: <span class="number">1</span>; &#125; <span class="comment">/* 结束 */</span></span><br><span class="line"><span class="comment">/* 隐藏 */</span></span><br><span class="line"><span class="selector-class">.fade-leave-from</span>&#123; <span class="attribute">opacity</span>: <span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-class">.fade-leave-active</span>&#123; <span class="attribute">transition</span>: all .<span class="number">5s</span> ease; &#125;</span><br><span class="line"><span class="selector-class">.fade-leave-to</span>&#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h4 id="animate-css："><a href="#animate-css：" class="headerlink" title="animate.css："></a>animate.css：</h4><ul><li><code>transition</code> 也支持指定动画的 class 名：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-from-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-to-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-from-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-to-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>安装 animate.css：</li></ol><p><a href="https://animate.style/">Animate.css 官网</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install animate.css</span><br></pre></td></tr></table></figure><ol start="2"><li>在组件中引入 animate.css：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;animate.css&quot;;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用：</li></ol><p>新版中都需要添加 animate__animated 类， <code>duration</code> 属性可以指定执行时间（毫秒），还可通过对象属性方式单独设置显示和隐藏的动画时间 <code>&#123;enter: 500, leave: 500&#125;</code> 。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:duration</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__rubberBand&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__swing&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a>生命周期：</h4><table><thead><tr><th>生命周期方法</th><th>对应 Class</th><th>时期</th></tr></thead><tbody><tr><td>@before-enter</td><td>enter-from-class</td><td>显示动画之前</td></tr><tr><td>@enter</td><td>enter-active-class</td><td>显示过度</td></tr><tr><td>@after-enter</td><td>enter-to-class</td><td>显示结束</td></tr><tr><td>@enter-cancelled</td><td></td><td>显示过度被打断</td></tr><tr><td>@before-leave</td><td>leave-from-class</td><td>隐藏动画之前</td></tr><tr><td>@leave</td><td>leave-active-class</td><td>隐藏过度</td></tr><tr><td>@after-leave</td><td>leave-to-class</td><td>隐藏结束</td></tr><tr><td>@leave-cancelled</td><td></td><td>隐藏过度被打断</td></tr></tbody></table><ul><li>所有生命周期方法参数 1 是动画元素对象，而 <strong>过度方法</strong> 接收参数 <strong>2</strong> 它是过度回调代表过度执行完成，默认它在动画结束后自动执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">enterActive</span> = (<span class="params">el: Element, done: <span class="built_in">Function</span></span>)=&gt;&#123;</span><br><span class="line">  <span class="title function_">done</span>(); <span class="comment">// 过度完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="appear："><a href="#appear：" class="headerlink" title="appear："></a>appear：</h4><ul><li>appear 页面初次加载效果，只在页面初始化后执行一次：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear-from-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear-active-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">appear-to-class</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="TransitionGroup："><a href="#TransitionGroup：" class="headerlink" title="TransitionGroup："></a>TransitionGroup：</h4><ul><li>为列表添加动画属性，使用方式与 transition 大体一致。</li><li>默认不会给列表多包装一层，可使用 <code>tag</code> 属性指定包装一层元素。</li><li>列表必须添加 <code>key</code> 属性。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tag</span>=<span class="string">&quot;div&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__animated animate__wobble&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__animated animate__rubberBand&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">move-class</span>=<span class="string">&quot;列表元素平移动画（元素位置改变）&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="gsap-js："><a href="#gsap-js：" class="headerlink" title="gsap.js："></a>gsap.js：</h4><ul><li>安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gsap</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import gsap from &quot;gsap&quot;;</span><br><span class="line">const number = reactive(&#123;</span><br><span class="line">  numberVal: 0,</span><br><span class="line">  showNumber: 0</span><br><span class="line">&#125;);</span><br><span class="line">const numberChange = (n: number)=&gt;&#123;</span><br><span class="line">  gsap.to(number, &#123;</span><br><span class="line">    duration: 0.3, // 过度时间</span><br><span class="line">    showNumber: n // 注意该属性名与显示动画的属性值名要相同</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;number&quot; v-model=&quot;number.numberVal&quot; @input=&quot;numberChange(number.numberVal)&quot; &gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123; number.showNumber.toFixed(0) &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Mitt"><a href="#Mitt" class="headerlink" title="Mitt:"></a>Mitt:</h3><ul><li>vue 中 <code>import</code> 第一次加载文件时执行 js 并将获取到的内容放入缓存中，之后 import 文件都是从缓存中获取，因此 import 获取的对象实例都是 <strong>单例</strong> 。</li></ul><ol><li>安装 mitt：</li></ol><p>Vue2 使用 EventBus 进行组件通信，而 Vue3 推荐使用 mitt 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mitt -S</span><br></pre></td></tr></table></figure><ol start="2"><li>main.ts 中全局挂载：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>; <span class="comment">// 引入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mitt</span> = <span class="title function_">mitt</span>(); <span class="comment">// 执行</span></span><br><span class="line"><span class="comment">// TypeScript 类型注册，才能获得提示</span></span><br><span class="line">declare <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> interface <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$Bus</span>: <span class="keyword">typeof</span> <span class="title class_">Mitt</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vue3 挂载全局 API</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span> = <span class="title class_">Mitt</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>组件中使用：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* A.vue 中 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">emit</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// emit(自定义事件, ...参数);</span></span><br><span class="line">  instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">emit</span>(<span class="string">&quot;on-emit&quot;</span>, <span class="string">&quot;传递参数值（可多个）&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* B.vue 中 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line"><span class="comment">// on(监听事件, 回调函数(接收参数));</span></span><br><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">on</span>(<span class="string">&quot;on-emit&quot;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听所有事件，回调函数参数 1 是事件类型，之后参数为接收的参数值</span></span><br><span class="line">instance?.<span class="property">proxy</span>?.<span class="property">$Bus</span>.<span class="title function_">on</span>(<span class="string">&quot;*&quot;</span>,<span class="function">(<span class="params">type,data</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(type, data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// instance?.proxy?.$Bus.off(&quot;on-emit&quot;, function); // 删除某监听事件</span></span><br><span class="line"><span class="comment">// instance?.proxy?.$Bus.all.clear(); // 删除所有监听事件</span></span><br></pre></td></tr></table></figure><h3 id="unplugin-auto-import："><a href="#unplugin-auto-import：" class="headerlink" title="unplugin-auto-import："></a>unplugin-auto-import：</h3><p><a href="https://github.com/antfu/unplugin-auto-import">antfu&#x2F;unplugin-auto-import</a></p><ol><li>安装：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D unplugin-auto-import</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 vite.config.ts ：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">    <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>], <span class="comment">// 自动导入项</span></span><br><span class="line">    <span class="attr">dts</span>: <span class="string">&#x27;src/auto-import.d.ts&#x27;</span> <span class="comment">// 声明文件位置</span></span><br><span class="line">  &#125;),]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>不用 import 在组件中直接使用 ref 等。</li></ol><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令:"></a>自定义指令:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Directive, DirectiveBinding, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import A from &quot;./components/A.vue&quot;;</span><br><span class="line"></span><br><span class="line">type Dir = &#123; val: string &#125;</span><br><span class="line">// 自定义指令 v-my,赋值函数方式是 mounted 与 updated 同时触发相同行为的简写</span><br><span class="line">const vMy:Directive = (el, binding:DirectiveBinding&lt;Dir&gt;)=&gt; &#123;</span><br><span class="line">  console.log(binding.value.val);</span><br><span class="line">&#125;</span><br><span class="line">/* 完整写法与生命周期：</span><br><span class="line">const vMy:Directive = &#123;</span><br><span class="line">  created()&#123;&#125;,</span><br><span class="line">  beforeMount()&#123;&#125;,</span><br><span class="line">  mounted()&#123;&#125;,</span><br><span class="line">  beforeUpdate()&#123;&#125;,</span><br><span class="line">  updated()&#123;&#125;,</span><br><span class="line">  beforeUnmount()&#123;&#125;,</span><br><span class="line">  unmounted()&#123;&#125;,</span><br><span class="line">&#125; */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;A v-my=&quot;&#123;val: &#x27;hello&#x27;&#125;&quot;&gt;&lt;/A&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Hooks："><a href="#Hooks：" class="headerlink" title="Hooks："></a>Hooks：</h3><h4 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins:"></a>Mixins:</h4><p>在 vue2 中常使用 Mixins 抽取公共属性，mixins 中的属性会被组件中的同名属性覆盖，mixins 中的生命周期函数会比组件中同名生命周期函数先执行（不会覆盖）。</p><ul><li>mixins.js （名称可自定义）中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;...&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件中使用：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import mixin from &#x27;./mixins&#x27;; // 引入 mixins.js</span><br><span class="line">export default &#123;</span><br><span class="line">    mixins:[mixin], // mixins 数组，属性自动注入组件中</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="Hooks：-1"><a href="#Hooks：-1" class="headerlink" title="Hooks："></a>Hooks：</h4><p>在 vue3 中推荐使用 Hooks 使用函数导出与引入的方式。</p><ul><li>hooks&#x2F;index.ts （名称可自定义）中：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Ref</span>, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>; <span class="comment">// 与组件中一样可引入属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>):<span class="title class_">Ref</span>&lt;<span class="built_in">string</span>&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> hello = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> hello;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在组件中：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hook <span class="keyword">from</span> <span class="string">&quot;./hooks&quot;</span>; <span class="comment">// 引入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="title function_">hook</span>(); <span class="comment">// 使用</span></span><br></pre></td></tr></table></figure><h3 id="定义全局变量："><a href="#定义全局变量：" class="headerlink" title="定义全局变量："></a>定义全局变量：</h3><h4 id="vue2："><a href="#vue2：" class="headerlink" title="vue2："></a>vue2：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$my</span> = <span class="string">&quot;hello&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="vue3："><a href="#vue3：" class="headerlink" title="vue3："></a>vue3：</h4><ul><li>main.ts 中：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TypeScript 类型注册，才能获得提示，且编辑器不报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$My</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">$MyFun</span>: <span class="title class_">Function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vue3 定义全局变量或函数</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$My</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$MyFun</span> = <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>组件中：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getCurrentInstance &#125; from &quot;vue&quot;;</span><br><span class="line">const app = getCurrentInstance(); // 获取当前实例</span><br><span class="line">app?.proxy?.$MyFun();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; 直接调用 - &#123;&#123; $My &#125;&#125; &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="样式穿透："><a href="#样式穿透：" class="headerlink" title="样式穿透："></a>样式穿透：</h3><ul><li>vue2 中使用 <code>/deep/</code> ：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/deep/<span class="selector-class">.el-switch__core</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>vue3 推荐使用 <code>:deep()</code> ：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">deep</span>(.el-switch__core) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>:slotted()</code> 插槽选择器</p></li><li><p><code>:global()</code> 全局选择器</p></li><li><p>动态 css：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const color = ref&lt;string&gt;(&quot;red&quot;);</span><br><span class="line">const style = ref(&#123; color: &quot;red&quot; &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">div&#123;</span><br><span class="line">  color: v-bind(color);</span><br><span class="line">  background-color: v-bind(&#x27;style.color&#x27;); // 对象需要引号方式包裹</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><h3 id="安装使用："><a href="#安装使用：" class="headerlink" title="安装使用："></a>安装使用：</h3><p>Pinia 官网地址：<a href="https://pinia.vuejs.org/">Pinia (vuejs.org)</a></p><ol><li>安装 Pinia：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia -S</span><br></pre></td></tr></table></figure><ol start="2"><li>在 main.ts 中注册引入：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>; <span class="comment">// 引入 Pinia</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createPinia</span>(); <span class="comment">// 创建</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(store); <span class="comment">// 注册 Pinia</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>在 store\index.ts 内：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">()=&gt;</span>(&#123;</span><br><span class="line">    <span class="comment">// 如 data</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 如 computed</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 如 methods ， 主要提交 state（同步异步均可）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>组件中使用：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="state"><a href="#state" class="headerlink" title="state:"></a>state:</h3><h4 id="1-直接修改："><a href="#1-直接修改：" class="headerlink" title="1. 直接修改："></a>1. 直接修改：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">name</span> = <span class="string">&quot;ruoxijun&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="2-patch（推荐）："><a href="#2-patch（推荐）：" class="headerlink" title="2. $patch（推荐）："></a>2. $patch（推荐）：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象方式 $patch(&#123;&#125;)</span></span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 函数方式 $patch(state=&gt;&#123;&#125;) 推荐</span></span><br><span class="line">store.$patch(<span class="function">(<span class="params">state:<span class="built_in">any</span></span>)=&gt;</span>&#123;</span><br><span class="line">  state.<span class="property">name</span> = <span class="string">&quot;ooo&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-state："><a href="#3-state：" class="headerlink" title="3. $state："></a>3. $state：</h4><p>此方式需要修改 state 中的所有属性，才能使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;ccc&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="4-actions（推荐）："><a href="#4-actions（推荐）：" class="headerlink" title="4. actions（推荐）："></a>4. actions（推荐）：</h4><ol><li>在 store 的 actions 中定义方法：</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">()=&gt;</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;haha&quot;</span> &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用方法修改 state 中的属性</span></span><br><span class="line">    <span class="title function_">setName</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">void</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>在组件中使用方法：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="title function_">setName</span>(<span class="string">&quot;ddd&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="5-storeToRefs："><a href="#5-storeToRefs：" class="headerlink" title="5. storeToRefs："></a>5. storeToRefs：</h4><p>store 可以直接解构出 state 中的属性但不具有响应式，因此 Pinia 提供了 storeToRefs：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line">name.<span class="property">value</span> = <span class="string">&quot;yyy&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="getters、actions："><a href="#getters、actions：" class="headerlink" title="getters、actions："></a>getters、actions：</h3><p>getters、actions 中定义的方法可以使用 this 调用 store 中的属性或方法。</p><h3 id="API："><a href="#API：" class="headerlink" title="API："></a>API：</h3><h4 id="reset："><a href="#reset：" class="headerlink" title="$reset："></a>$reset：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.$reset(); <span class="comment">// 重置 state</span></span><br></pre></td></tr></table></figure><h4 id="subscribe："><a href="#subscribe：" class="headerlink" title="$subscribe："></a>$subscribe：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 state 变化，有属性值改变时触发</span></span><br><span class="line">store.$subscribe(<span class="function">(<span class="params">mutations, state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mutations, state);</span><br><span class="line">&#125;, &#123; <span class="attr">detached</span>: <span class="literal">true</span> &#125;);  <span class="comment">// 参数 2 （可选）表示组件销毁后，依然执行此监听</span></span><br></pre></td></tr></table></figure><h4 id="onAction："><a href="#onAction：" class="headerlink" title="$onAction："></a>$onAction：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听 actions 调用</span></span><br><span class="line">store.$onAction(<span class="function">(<span class="params">context</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(context);</span><br><span class="line">&#125;, <span class="literal">true</span>); <span class="comment">// 参数 2 （可选）表示组件销毁后，依然执行此监听</span></span><br></pre></td></tr></table></figure><h3 id="持久化存储："><a href="#持久化存储：" class="headerlink" title="持久化存储："></a>持久化存储：</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> vue3 </tag>
            
            <tag> es6 </tag>
            
            <tag> vuex </tag>
            
            <tag> webpack </tag>
            
            <tag> npm </tag>
            
            <tag> vueRouter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>struts2速览</title>
      <link href="/2021/09/06/java/javaweb/ssh/struts2%E9%80%9F%E8%A7%88/"/>
      <url>/2021/09/06/java/javaweb/ssh/struts2%E9%80%9F%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="struts2速览"><a href="#struts2速览" class="headerlink" title="struts2速览"></a>struts2速览</h1><h2 id="1-环境搭建："><a href="#1-环境搭建：" class="headerlink" title="1. 环境搭建："></a>1. 环境搭建：</h2><h3 id="1-导入Struts依赖："><a href="#1-导入Struts依赖：" class="headerlink" title="1. 导入Struts依赖："></a>1. 导入Struts依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.struts/struts2-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-web-xml配置："><a href="#2-web-xml配置：" class="headerlink" title="2. web.xml配置："></a>2. web.xml配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- struts2 核心过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 过滤所有请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-action书写类："><a href="#3-action书写类：" class="headerlink" title="3. action书写类："></a>3. action书写类：</h3><p>在Struts中所有的请求都对应了一个 <code>action</code> 的方法，通过方法的返回值映射相应的 <code>result</code> 处理请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloAction</span> <span class="keyword">implements</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;action&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS; <span class="comment">// 表示请求成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在action类中可定义与请求数据中同名的成员来接收请求中的数据。也可定义对象成员变量来接收请求数据，需要请求中的数据是以 <code>成员对象变量名.属性</code> 的形势来封装的。最重要的一点是接收数据的成员变量需要有 <code>set/get</code> 方法。</p></li><li><p>同理需要接收页面表单数据时只需设置好表单元素的 <code>name</code> ，再在action中给接收表单各元素数据的变量设置与表单元素name对应的变量名并添加 set&#x2F;get 方法，即可自动接收表单数据。</p></li></ul><h3 id="4-核心配置文件struts-xml："><a href="#4-核心配置文件struts-xml：" class="headerlink" title="4. 核心配置文件struts.xml："></a>4. 核心配置文件struts.xml：</h3><p>在 <code>resources</code> 文件夹中新建 <code>struts.xml</code> 文件并如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- struts 文件头 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.5//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.5.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span> <span class="comment">&lt;!-- 最外层标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 包裹各种action --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置一个请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;index&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ruoxijun.action.HelloAction&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 响应的页面 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问 <code>项目路径/index</code> 或 <code>项目路径/index.action</code> 。</p><h2 id="2-Action-类："><a href="#2-Action-类：" class="headerlink" title="2. Action 类："></a>2. Action 类：</h2><ul><li>Action 是 Struts2的核心业务类，使用Struts2编写action类通常都需要实现 <code>com.opensymphony.xwork2.Action</code> 接口并实现它的 <code>execute</code> 方法。</li><li>Struts2 中不需要类实现action接口，可以直接编写一个普通类作为action。只要求业务方法实现一个返回类型为string的无参方法即可。</li><li>Struts2中不在推荐实现action接口，推荐去继承 <code>com.opensymphony.xwork2.ActionSupport</code> 类。 <code>ActionSupport</code> 类实现了action接口和许多接口，提供了输入验证，错误信息，国际化等等功能的支持。</li></ul><p>action 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;success&quot;</span>; <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">NONE</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span>; <span class="comment">// 找不到结果</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="string">&quot;error&quot;</span>; <span class="comment">// 发生异常</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;input&quot;</span>; <span class="comment">// 输入参数有误</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">LOGIN</span> <span class="operator">=</span> <span class="string">&quot;login&quot;</span>; <span class="comment">// 登录</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action是通过配置文件中action标签配置的方法的字符串返回值，对应result标签的name值来找到相应的result处理结果。在action接口中为我们提供5个常用的结果常量。</p><h2 id="3-Struts-xml-配置："><a href="#3-Struts-xml-配置：" class="headerlink" title="3. Struts.xml 配置："></a>3. Struts.xml 配置：</h2><h3 id="1-constant-常用配置："><a href="#1-constant-常用配置：" class="headerlink" title="1. constant 常用配置："></a>1. constant 常用配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置请求后缀，设置后原来的action后缀和不要后缀的方式就不生效了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.action.extension&quot;</span> <span class="attr">value</span>=<span class="string">&quot;do,html,jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置编码（Struts2 默认utf-8编码） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.i18n.encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-package-："><a href="#2-package-：" class="headerlink" title="2. package ："></a>2. package ：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>package：是一种包的概念，将同一业务的action请求集中到一个包中方便管理，并且不同的包是可以被继承的。</p><ul><li>name：是包的名字，一个Struts.xml文件中可以有很多个package，这些包通过name来区分。</li><li>namespace：命名空间（可以理解为请求添加父路径）。</li><li>extends：继承某包，通常继承 <code>struts-default</code> 因为它定义了大量的Struts特性。</li></ul></li><li><p>package 中配置默认action，在找不到action时使用此默认action：</p><ul><li><pre><code class="xml">&lt;default-action-ref name=&quot;default&quot;/&gt;&lt;action name=&quot;default&quot;&gt;    &lt;result&gt;error.jsp&lt;/result&gt;&lt;/action&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3. action：</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;action name=&quot;index&quot; class=&quot;cn.ruoxijun.action.HelloAction&quot; method=&quot;execute&quot;&gt;</span><br><span class="line">    &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>action：配置请求和响应结果。</p><ul><li>name：action的请求路径和请求名。</li><li>class：处理请求的类，全路径名。不写时默认使用 <code>ActionSupport</code> 作为请求处理类。</li><li>method：类中处理请求的方法。不写时默认使用 <code>execute</code> 作为请求处理方法。</li></ul></li><li><p>result：处理请求结果，标签中的值为要跳转的页面，一个action可以有多个result。</p><ul><li>name：action对应类对应方法的字符串返回值，不写时默认使用 <code>success</code> 作为值。</li></ul></li></ul><h3 id="4-Result："><a href="#4-Result：" class="headerlink" title="4. Result："></a>4. Result：</h3><ul><li>Result 跳转配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面跳转 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认 dispatcher 转发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dispatcher&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redirect 重定向 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirect&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- action 跳转 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重定向一个action（填写action地址而不再是页面地址） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirectAction&quot;</span>&gt;</span>index.action<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 重定向到不同包下的action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;redirectAction&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 跳转包的namespace --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;namespace&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 跳转的action，如定义了后缀需要 action.后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;actionName&quot;</span>&gt;</span>index.action<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可自定义name携带参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;var&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- chain：转发到action，不需要写后缀直接action的name即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;chain&quot;</span>&gt;</span>index<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>动态跳转：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String toAction; <span class="comment">// 添加get/set方法</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toAction</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 可以根据需求去改变值</span></span><br><span class="line">    toAction=<span class="string">&quot;index&quot;</span>; <span class="comment">// 要跳转的页面前缀</span></span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;action name=<span class="string">&quot;toaction&quot;</span> class=<span class="string">&quot;cn.ruoxijun.action.HelloAction&quot;</span> method=<span class="string">&quot;toAction&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 通过$&#123;toAction&#125;来访问toAction的值 --&gt;</span><br><span class="line">    &lt;result name=<span class="string">&quot;success&quot;</span>&gt;$&#123;toAction&#125;.jsp&lt;/result&gt;</span><br><span class="line">&lt;/action&gt;</span><br></pre></td></tr></table></figure><ul><li>package中配置全局结果</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有result中方法返回值和name为success且跳转页面为index.jsp的result不用在action中再配置result。即默认所有action中有一个name为success的result跳转index，配置了的则覆盖此result。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> struts2 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue与ElementUI</title>
      <link href="/2021/08/30/vue/vue%E4%B8%8EElementUI/"/>
      <url>/2021/08/30/vue/vue%E4%B8%8EElementUI/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-cli-基本使用"><a href="#Vue-cli-基本使用" class="headerlink" title="Vue-cli 基本使用"></a>Vue-cli 基本使用</h1><h2 id="1-环境安装："><a href="#1-环境安装：" class="headerlink" title="1. 环境安装："></a>1. 环境安装：</h2><blockquote><p>  基础环境：</p><ul><li><strong>Node.js</strong> 官网与下载地址： <a href="http://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a><ul><li>Node.js版本cmd查看命令： <strong>node -v</strong></li><li>Node.js安装成功自带npm版本查看命令： <strong>npm -v</strong></li></ul></li><li>Node.js <strong>版本更新</strong> 工具：<a href="https://github.com/Kenshin/gnvm">Kenshin&#x2F;gnvm: Node.js version manager on Windows by GO (github.com)</a></li><li><strong>git</strong> 官网与下载地址： <a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></li></ul></blockquote><p>以下所有命令建议 <strong>以管理员方式打开 cmd 执行</strong> 。</p><h3 id="1-Node-js-环境配置："><a href="#1-Node-js-环境配置：" class="headerlink" title="1. Node.js 环境配置："></a>1. Node.js 环境配置：</h3><h4 id="镜像配置："><a href="#镜像配置：" class="headerlink" title="镜像配置："></a>镜像配置：</h4><ul><li><code>npm install cnpm -g</code> ：安装 cnpm 淘宝镜像（不建议使用，使用易出错）</li><li><code>npm install --registry=https://registry.npm.taobao.org</code> ：注册淘宝镜像加速器（ <strong>推荐</strong> 使用）</li></ul><p>查看镜像配置： <code>npm config get registry</code></p><ul><li>环境变量配置： <code>E:\myfile\nodejs\</code></li></ul><p>win 以 <strong><code>%</code></strong> 开头的环境变量在第一位置会导致查看环境变量时所有环境变量在一行显示，将带盘符的环境变量剪切到最前面即可让环境变量多行显示。</p><h4 id="npm-依赖缓存位置修改："><a href="#npm-依赖缓存位置修改：" class="headerlink" title="npm 依赖缓存位置修改："></a>npm 依赖缓存位置修改：</h4><p>因为npm在下载依赖时它会先缓存再下载，因此我们这里需要修改两个配置，一个是用来临时缓存依赖的文件夹一个是保存下载依赖的文件夹。</p><ol><li><code>npm config set cache &quot;E:\myfile\nodejs\data\cache&quot;</code></li><li><code>npm config set prefix &quot;E:\myfile\nodejs\data\prefix&quot;</code></li></ol><ul><li>还需要配置环境变量： <code>E:\myfile\nodejs\data\prefix\</code></li></ul><h3 id="2-webpack-安装："><a href="#2-webpack-安装：" class="headerlink" title="2. webpack 安装："></a>2. webpack 安装：</h3><blockquote><p>  <a href="https://webpack.js.org/">webpack 官方网址</a></p><p>  <a href="https://webpack.docschina.org/guides/installation/">安装 | webpack 中文文档 (docschina.org)</a></p></blockquote><ul><li>通常需要安装 webpack 和 webpack-cli：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure><ul><li>也可使用一行命令同时安装：<code>npm install webpack webpack-cli -g</code></li></ul><h3 id="3-vue-cli-安装使用："><a href="#3-vue-cli-安装使用：" class="headerlink" title="3. vue-cli 安装使用："></a>3. vue-cli 安装使用：</h3><blockquote><p>  <a href="https://cli.vuejs.org/zh/guide/">Vue CLI (vuejs.org) 中文文档</a></p></blockquote><h4 id="安装与常用命令："><a href="#安装与常用命令：" class="headerlink" title="安装与常用命令："></a>安装与常用命令：</h4><ul><li>vue-cli 安装：<code>npm install vue-cli -g</code></li><li>vue3安装cli：<code>npm install -g @vue/cli</code></li><li>查看可使用的模板：<code>vue list</code></li><li>卸载 vue-cli ：<code>npm uninstall -g vue-cli</code></li></ul><h4 id="项目创建："><a href="#项目创建：" class="headerlink" title="项目创建："></a>项目创建：</h4><ul><li><code>vue init webpack demo</code> ：初始化一个vue-cli项目，这里的demo是项目名。</li></ul><p>使用上命令后会出现一下几个选项：</p><p><img src="/images/vue/vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA.png" alt="vue项目创建"></p><p>上面最后一项我们没有它帮我们在初始化项目时帮我们安装下载依赖，所以我们需要 <strong><code>cd</code></strong> 到我们的项目文件夹中自己手动安装依赖。</p><ul><li><p><code>npm install</code> ：依赖安装。</p></li><li><p><code>npm run dev</code> ：运行当前项目。</p></li></ul><h4 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h4><p><img src="/images/vue/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="vue项目目录结构"></p><h4 id="vue-cli-项目说明："><a href="#vue-cli-项目说明：" class="headerlink" title="vue-cli 项目说明："></a>vue-cli 项目说明：</h4><ol><li><strong>.vue文件：</strong></li></ol><p>vue-cli 中项目将页面组件化，一个 <strong>.vue</strong> 文件表示一个vue的 <strong>Vue.component</strong> 即组件。首先看一下vue文件模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- HTML组件模板书写 --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 逻辑代码书写</span><br><span class="line">// vue中需要使用import导入其它vue组件</span><br><span class="line">import 定义组件名 from &#x27;vue文件地址(不需要.vue后缀)&#x27;</span><br><span class="line">// 相当于 Vue.component 参数二的对象</span><br><span class="line">export default &#123; </span><br><span class="line">  name: &quot;VueRouterDemo&quot; // 组件名</span><br><span class="line">  // 在此注册的组件，才能在template中使用</span><br><span class="line">  components: &#123; </span><br><span class="line">    // 导入的组件名(多个用逗号隔开)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  /* 书写模板的样式（css） */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>main.js：</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 常在这里import引入要使用的依赖</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(导入的依赖名) <span class="comment">// 申明要使用某依赖</span></span><br><span class="line"><span class="comment">// 关闭生产模式下给出的提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 常在这里注册引入的主配置文件</span></span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-ES6-知识补充："><a href="#2-ES6-知识补充：" class="headerlink" title="2. ES6 知识补充："></a>2. ES6 知识补充：</h2><h3 id="1-this-指向问题："><a href="#1-this-指向问题：" class="headerlink" title="1. this 指向问题："></a>1. this 指向问题：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">fun2</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// &#123;fun2:f&#125; 当前对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">fun3</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// window</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>普通函数：this指向它的调用者，如果没有调用者时默认指向window。</li><li>箭头函数：this指向它 <strong>定义时所处对象的父级this</strong> 。</li></ul><h3 id="2-对象属性简写："><a href="#2-对象属性简写：" class="headerlink" title="2. 对象属性简写："></a>2. 对象属性简写：</h3><p>在对象中属性和值一样是可以简写（包括属性名和方法名相同时）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:name,<span class="attr">fun</span>:<span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;&#125;; <span class="comment">// 完整写法</span></span><br><span class="line">obj = &#123;name,<span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;&#125;; <span class="comment">// 简写写法</span></span><br></pre></td></tr></table></figure><h3 id="3-js-模块化（module）："><a href="#3-js-模块化（module）：" class="headerlink" title="3. js 模块化（module）："></a>3. js 模块化（module）：</h3><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>如下有3个js文件，且引入到同一HTML中：</p><ol><li>1.js：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>2.js：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>main.js：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="title function_">fun</span>();</span><br></pre></td></tr></table></figure><ol start="4"><li>我直接在HTML中引入3个js文件：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML在浏览器打开后显示错误，主要是由于变量重复定义来的错误。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ol><li>只引入main.js且在script标签中使用 <code>type=&quot;module&quot;</code> 属性，注意只能在运行在服务器中的HTML中使用。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 1.js 和 2.js 中使用 <code>export</code> 导出需要的元素：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除一个一个导出外，我们也可以用对象一次导出：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;a,fun <span class="keyword">as</span> fun2&#125; <span class="comment">// 导出多个且为fun取别名</span></span><br></pre></td></tr></table></figure><ol start="3"><li>最后在 main.js 中引入：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入需要的属性，也可以使用 * 代表导入所有</span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">&quot;1.js&quot;</span>;</span><br><span class="line"><span class="comment">// 导入时使用 as 取别名解决命名冲突</span></span><br><span class="line"><span class="keyword">import</span> &#123;a <span class="keyword">as</span> a2,fun&#125; <span class="keyword">from</span> <span class="string">&quot;2.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a +<span class="string">&quot; &quot;</span>+ a2);</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="title function_">fun2</span>();</span><br></pre></td></tr></table></figure><h4 id="export-default："><a href="#export-default：" class="headerlink" title="export default："></a>export default：</h4><ul><li>使用 <code>export default</code> 导出的属性可以不定义名字，在引入的时候为它取名字。注意 <strong>一个js文件中只能有一个</strong> <code>export default</code> 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export default &#123;name:&quot;张三&quot;&#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;export default&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引入时：<code>import 自定义名 from &quot;js文件地址&quot;;</code></li></ul><h2 id="3-vue-router-："><a href="#3-vue-router-：" class="headerlink" title="3. vue-router ："></a>3. vue-router ：</h2><blockquote><p>  <a href="https://router.vuejs.org/zh/">Vue Router 官网 (vuejs.org)</a></p></blockquote><p>案例准备：在 components 文件夹中新建一个 VueRouterDemo.vue 文件，且在 template 中添加一句 <code>&lt;h1&gt;VueRouterDemo&lt;/h1&gt;</code> 。我们利用这个文件和项目自带的 HelloWorld.vue 做一个路由案例。</p><h3 id="1-vue-router-安装："><a href="#1-vue-router-安装：" class="headerlink" title="1. vue-router 安装："></a>1. vue-router 安装：</h3><p><code>npm install vue-router --save-dev</code> ：在项目中安装 vue-router</p><h3 id="2-js-中配置-vue-router："><a href="#2-js-中配置-vue-router：" class="headerlink" title="2. js 中配置 vue-router："></a>2. js 中配置 vue-router：</h3><ul><li>在 main.js 显示配置（ <strong>不推荐</strong> ，推荐使用下方方法 ）：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure><ul><li>src根目录新建router文件夹新建 <strong>index.js</strong> 作为vue-router配置文件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue和vue-router</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 引入路由跳转的组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&quot;../components/HelloWorld&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouterDemo</span> <span class="keyword">from</span> <span class="string">&quot;../components/VueRouterDemo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>); <span class="comment">// 安装路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置导出路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 路由配置，它是一个数组，管理多个路由配置对象</span></span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/VueRouterDemo&#x27;</span>, <span class="comment">// 路由路径</span></span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;VueRouterDemo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">VueRouterDemo</span> <span class="comment">// 路由对应的组件</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">HelloWorld</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>在 main.js 中引入配置：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span> <span class="comment">// 自动扫描里面的路由配置</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">router</span>:<span class="title class_">VueRouter</span>, <span class="comment">// router属性注册路由</span></span><br><span class="line">  <span class="attr">components</span>: &#123; <span class="title class_">App</span> &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-在vue组件中使用router切换视图"><a href="#3-在vue组件中使用router切换视图" class="headerlink" title="3. 在vue组件中使用router切换视图:"></a>3. 在vue组件中使用router切换视图:</h3><p>在App.vue中使用 <strong>router-link</strong> 与 <strong>router-view</strong> 实现视图切换（保证它们在App.vue的 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 中使用）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/HelloWorld&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/VueRouterDemo&quot;</span>&gt;</span>VueRouterDemo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <strong>router-link</strong> 表示一个a标签， <strong>to</strong> 属性中填入配置好的路由地址。 <strong>router-view</strong> 会根据你点击的link显示对应路由的视图。或者在浏览器中输入相应的地址 <strong>router-view</strong> 也会跳转到响应的视图。</p><h3 id="4-js-跳转和重定向："><a href="#4-js-跳转和重定向：" class="headerlink" title="4. js 跳转和重定向："></a>4. js 跳转和重定向：</h3><ol><li>使用 js 代码控制路由跳转： <code>this.$router.push(&quot;/&quot;);</code></li><li>如我们需要用户输入 <strong>根路径</strong> 时自动跳转到 <strong>index</strong> 路由那么就可以使用重定向来完成：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/:id&#x27;</span>, <span class="comment">// 跟路径同时添加一个id参数</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Layout&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line"><span class="attr">redirect</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="comment">// 重定向(也可传递同名的参数)</span></span><br></pre></td></tr></table></figure><h3 id="5-嵌套路由："><a href="#5-嵌套路由：" class="headerlink" title="5. 嵌套路由："></a>5. 嵌套路由：</h3><p>在路由界面内嵌套其它的组件，并向实现这些组件的切换就需要使用到 <strong>嵌套路由</strong> 。嵌套路由是在当前的路由配置中在添加一个 <code>children</code> 属性实现。它是一个数组，数组中都是路由配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在路由中添加此属性</span></span><br><span class="line"><span class="attr">children</span>: [ <span class="comment">// 嵌套路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">  &#125;, <span class="comment">// 可配置多个</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="6-路由传参"><a href="#6-路由传参" class="headerlink" title="6. 路由传参:"></a>6. 路由传参:</h3><h4 id="1-路径传参："><a href="#1-路径传参：" class="headerlink" title="1. 路径传参："></a>1. 路径传参：</h4><ol><li><p>在配置路由时可以在路由的最后添加自定义的参数 <code>path:&#39;/main/user/:id&#39;</code> 如我们在 user 路径后定义一个 <strong>id</strong> 的参数。</p></li><li><p>我们只需在跳转路由时在路径的后面添加上参数需要的值即可，如跳转 user 时我们需要它的参数值即 id 的值为8则跳转的路径就可以这样写： <code>/main/user/8</code> 。</p></li><li><p>这样我们就可通过 <code>$router.params.id</code> 来获取到传递过来的值，如需在界面中显示也可以直接使用插值的方式来展示 <code>&#123;&#123;$router.params.id&#125;&#125;</code> 。</p></li><li><p>使用 <code>&#123;name:&#39;路由的name&#39;,params:&#123;id:8&#125;&#125;</code> 对象的方式也能达到和 <code>/main/user/8</code> 同样的效果。 <code>name</code> 属性绑定要跳转的路由的name。 <code>parmas</code> 对应一个对象里面的属性名对应你定义的参数名，属性值就是你要传递的参数值。如果使用 <code>&lt;router-view :to=&quot;&#123;name:&#39;路由的name&#39;,params:&#123;id:8&#125;&#125;&quot;/&gt;</code> 则需要让 <code>:to</code> 绑定这个对象。</p></li></ol><h4 id="2-porps传参："><a href="#2-porps传参：" class="headerlink" title="2. porps传参："></a>2. porps传参：</h4><ol><li><p>同上首先路由配置中 <code>path:&#39;/main/user/:id&#39;</code> 不用改变，再多添加一个属性 <code>props:true</code> 表示使用 <strong>props</strong> 传参。</p></li><li><p>在跳转的组件中使用 <code>props</code> 属性为组件定义一个和参数名相同的属性：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>], <span class="comment">// 定义一个和参数同名的组件属性</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>最后我们就可以直接使用这个属性 <code>&#123;&#123;id&#125;&#125;</code> 。</li></ol><h3 id="7-路由模式与404处理："><a href="#7-路由模式与404处理：" class="headerlink" title="7. 路由模式与404处理："></a>7. 路由模式与404处理：</h3><p>在 vue 中访问我们的项目时路径中总是默认带有一个 <code>#</code> ，我们可以在路由对象中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>, <span class="comment">// 取消路径中的 # 号</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当用户访问我们没有定义的路由时应当跳转到一个404界面，这时我们就可以使用 <code>path: &#39;*&#39;</code> 来显示404组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="comment">// 当没有可以匹配的路由时将跳转至此路由</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;NotFound&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">NotFound</span> <span class="comment">// 自定义404组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-路由钩子函数："><a href="#8-路由钩子函数：" class="headerlink" title="8. 路由钩子函数："></a>8. 路由钩子函数：</h3><blockquote><p>  路由钩子常搭配 Axios 请求数据 vue 中添加 Axios 请参照： <a href="http://www.axios-js.com/docs/vue-axios.html">axios (axios-js.com)</a></p></blockquote><p>路由构造函数可以在路由跳转时我们处理一些信息和管理路由跳转。其中 <code>beforeRouteEnter</code> 的 <code>next</code> 回调函数中常做 Ajax 请求为跳转的页面准备数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由钩子函数有3个可用参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to 路由将要跳转的路径信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> form 路由跳转前的路径信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> next 路由控制</span></span><br><span class="line"><span class="comment"> * next() 路由执行跳转</span></span><br><span class="line"><span class="comment"> * next(false) 路由取消跳转</span></span><br><span class="line"><span class="comment"> * next(&#x27;/path&#x27;) 跳转到指定路由</span></span><br><span class="line"><span class="comment"> * next(vm=&gt;&#123; //回调函数 &#125;) 仅beforeRouteEnter方法可用，mv表示当前组件实例对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">beforeRouteEnter</span>:<span class="function">(<span class="params">to,form,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>(<span class="function"><span class="params">vm</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在组件 methods 属性中定义一个 getData 方法使用 vm 调用来请求页面所需数据</span></span><br><span class="line">    vm.<span class="title function_">getData</span>();</span><br><span class="line">  &#125;); <span class="comment">// 执行路由</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">beforeRouteLeave</span>:<span class="function">(<span class="params">to,form,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>(); <span class="comment">// 执行路由</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="4-整合-ElementUI："><a href="#4-整合-ElementUI：" class="headerlink" title="4. 整合 ElementUI："></a>4. 整合 ElementUI：</h2><blockquote><p>  <a href="https://element.eleme.cn/#/zh-CN/component/installation">Element 官方文档地址</a></p></blockquote><h3 id="1-引入必要依赖："><a href="#1-引入必要依赖：" class="headerlink" title="1. 引入必要依赖："></a>1. 引入必要依赖：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装 ElementUI</span><br><span class="line">npm i element-ui -S</span><br><span class="line">// 安装 SASS 加载器</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><h3 id="2-配置注册："><a href="#2-配置注册：" class="headerlink" title="2. 配置注册："></a>2. 配置注册：</h3><p>在 main.js 中添加如下配置后即可使用 ElementUI。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 ElementUI 关键组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>; <span class="comment">// 需要sass</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>); <span class="comment">// 申明安装使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>) <span class="comment">// ElementUI 提供</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-Vuex："><a href="#5-Vuex：" class="headerlink" title="5. Vuex："></a>5. Vuex：</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> elementUI </tag>
            
            <tag> nodejs </tag>
            
            <tag> vue-cli </tag>
            
            <tag> vue-router </tag>
            
            <tag> vuex </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础</title>
      <link href="/2021/08/27/vue/vue/"/>
      <url>/2021/08/27/vue/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a><center>Vue</center></h1><h2 id="1-官方描述："><a href="#1-官方描述：" class="headerlink" title="1. 官方描述："></a>1. 官方描述：</h2><p><a href="https://cn.vuejs.org/">Vue.js (vuejs.org)</a></p><blockquote><p>渐进式 JavaScript 框架</p><ul><li><p><strong>易用</strong></p><p> 已经会了 HTML、CSS、JavaScript？即刻阅读指南开始构建应用！</p></li><li><p><strong>灵活</strong></p><p> 不断繁荣的生态系统，可以在一个库和一套完整框架之间自如伸缩。</p></li><li><p><strong>高效</strong></p><p> 20kB min+gzip 运行大小<br> 超快虚拟 DOM<br> 最省心的优化</p></li></ul></blockquote><h2 id="2-Vue-基础语法："><a href="#2-Vue-基础语法：" class="headerlink" title="2. Vue 基础语法："></a>2. Vue 基础语法：</h2><h3 id="1-入门demo："><a href="#1-入门demo：" class="headerlink" title="1. 入门demo："></a>1. 入门demo：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="comment">&lt;!-- 需要控制的视图 --&gt;</span></span><br><span class="line">    &#123;&#123;str&#125;&#125;<span class="comment">&lt;!-- 绑定str数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">// 绑定了id为app的视图</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">str</span>: <span class="string">&quot;hello world&quot;</span>, <span class="comment">// 存放str数据</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue应用以Vue实例对象为基础，它需要传入一个对象。这里我们使用两个重要属性：</p><p> <strong>el：</strong> 绑定视图（element(元素id选择器)）</p><p> <strong>data：</strong> 数据管理，存放数据</p><h3 id="2-Vue内外数据交互："><a href="#2-Vue内外数据交互：" class="headerlink" title="2. Vue内外数据交互："></a>2. Vue内外数据交互：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> datas = &#123;num : <span class="number">1</span> , n : <span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// Object.freeze(datas); // 冻结对象，该对像值将无法修改</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    el : <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:datas, <span class="comment">//与外在的datas对象形成绑定</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue中data值发生改变时视图产生响应更新值</span></span><br><span class="line">datas.<span class="property">num</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Vue中的属性和方法用&quot;$&quot;区分开来</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同对象?&quot;</span>+ (vm.<span class="property">$data</span> === datas));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同元素?&quot;</span>+ (vm.<span class="property">$el</span> === <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>))); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="3-生命周期："><a href="#3-生命周期：" class="headerlink" title="3. 生命周期："></a>3. 生命周期：</h3><p><a href="https://v3.cn.vuejs.org/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">Vue.js 生命周期</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">beforeCreate</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//页面创建之前</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">created</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//实例创建完成以后</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">beforeMount</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//挂载之前</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mounted</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//挂载成功，el被新创建的vm.$el替换</span></span><br><span class="line">        <span class="comment">// 此函数中常做Ajax请求，请求页面加载完成之后需要暂时的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">beforeUpdate</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//数据更新之前</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">updated</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//数据更新完DOM也更新完毕</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4-常用语法和指令："><a href="#4-常用语法和指令：" class="headerlink" title="4. 常用语法和指令："></a>4. 常用语法和指令：</h3><blockquote><p>  Vue中将 “ <strong>v-</strong> ”前缀的特殊语法称之为指令。</p></blockquote><ul><li><strong>v-once：</strong> 只渲染元素和组件一次，当数据改变时，插值处的内容不会更新。</li><li><strong>v-html：</strong> 向元素中插入HTML语句</li><li><strong>v-bind：</strong> 元素属性绑定（缩写： <strong>:</strong> ），动态参数的缩写 <strong>:[key]</strong> 。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.green</span>&#123;<span class="attribute">color</span>: blue;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.blue</span>&#123;<span class="attribute">background</span>: green;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-once</span>&gt;</span><span class="comment">&lt;!--此标签内的插值只执行一次，数据改变插值不会改变--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文本插值:双大括号&quot;&#123;&#123;&#125;&#125;&quot;包裹一个变量，在data中声明属性取值--&gt;</span></span><br><span class="line">    &#123;&#123;msg+&quot; MyVue&quot;&#125;&#125;<span class="comment">&lt;!--支持javascript表达式：三元&#x27;？：&#x27;，数学计算，基本函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;html&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--以文本方式html语句无法解析--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--将此标签中的内容替换成插入的HTML语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;mcolor&quot;</span>&gt;</span>&#123;&#123;mcolor&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--v-bind用于动态改变标签需要的属性--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 样式绑定(class)： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;green:isGreen,blue:isBlue&#125;&quot;</span>&gt;</span>&#123;样式名:条件&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#x27;green&#x27;,&#x27;blue&#x27;]&quot;</span>&gt;</span>静态绑定：[样式名]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[isGreen?&#x27;green&#x27;:&#x27;blue&#x27;]&quot;</span>&gt;</span>三元条件绑定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;hello world&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">html</span>:<span class="string">&quot;&lt;h1&gt;html h1&lt;/h1&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mcolor</span>:<span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isGreen</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isBlue</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>v-show：</strong> 控制渲染后的元素是否显示(与 <strong>if</strong> 效果一样但本质不同，频繁切换推荐 <strong>show</strong> )</li><li><strong>v-if，v-else-if，v-else：</strong> 条件控制元素是否渲染</li><li><strong>v-for：</strong> 列表渲染，一个参数时为值，两个参数时参一为值 参二为下标</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;if_look&quot;</span>&gt;</span>v-show<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;if_look&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;1===1&quot;</span>&gt;</span>v-else-if<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>v-else<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;num,index in list&quot;</span>&gt;</span>&#123;&#123;index + num&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- index可省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;value,key in obj&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;-&gt;&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!-- 对象遍历 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;click1&quot;</span>&gt;</span><span class="comment">&lt;!--@click=&#x27;function&#x27;绑定点击事件--&gt;</span></span><br><span class="line">        click1</span><br><span class="line">        <span class="comment">&lt;!--标签为包含关系时，子标签点击事件完成还会执行再父类点击事件--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在该指令后添加&#x27;.stop&#x27;修饰符，当前点击事件完成后停止--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.stop</span>=<span class="string">&quot;click2&quot;</span>&gt;</span></span><br><span class="line">            click2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;v-if&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">if_look</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>:[<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>], <span class="comment">// 待遍历数组</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">obj</span>:&#123; <span class="attr">naem</span>:<span class="string">&#x27;obj&#x27;</span>, <span class="comment">// 待遍历对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">value</span>:<span class="number">1</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123; <span class="comment">//methods中用键值对的方式定义方法</span></span></span><br><span class="line"><span class="language-javascript">            click1 : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">msg</span>=<span class="string">&quot;onClick1&quot;</span>;<span class="comment">//用&#x27;this.&#x27;访问data中的数据</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            click2 : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">msg</span>=<span class="string">&quot;onClick2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-on:事件名：</strong> dom事件绑定（缩写： <strong>@事件名</strong> ），动态参数的缩写 <strong>@[event]</strong> 。</p><p><strong>methods：</strong> 方法逻辑通常定义在该Vue属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;msg++&#x27;</span>&gt;</span> <span class="comment">&lt;!--可使用表达式--&gt;</span>&gt; &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click.stop</span>=<span class="string">&#x27;count(msg)&#x27;</span>&gt;</span>&#123;&#123;add&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="attr">msg</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">add</span>:<span class="number">0</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123; <span class="comment">//用来定义存放函数体</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">count</span>:<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">add</span>+=i;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(event); <span class="comment">//查看$event中的属性</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// vm.$methods.adds();//报错</span></span></span><br><span class="line"><span class="language-javascript">    vm.<span class="title function_">count</span>(<span class="number">1</span>); <span class="comment">// 可使用Vue对象直接访问方法</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-model：</strong> 表单数据双向绑定，绑定的表单组件可不使用 <strong>name</strong> 属性分组，绑定同一元素的表单组件为同一组。且它帮我们将表单组件的 <strong>value</strong> 值与元素绑定了起来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="comment">&lt;!--此输入与data中msg相绑定--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>inputValue: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Sex:<span class="comment">&lt;!--选中的值与data中radio相绑定，选中的value会赋值给radio--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nv&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>radio : &#123;&#123;radio&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Love:<span class="comment">&lt;!--与checkBox相绑定它对应的是个数组，复选框值有多个值，选中的值会依次传入绑定的数组--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qiu&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkBox&quot;</span>&gt;</span>打球</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yun&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkBox&quot;</span>&gt;</span>玩游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;look&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checkBox&quot;</span>&gt;</span>看电影</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>checkbox : &#123;&#123;checkBox&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123; <span class="comment">//都可以为表单设置默认值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">radio</span>:<span class="string">&quot;nv&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">checkBox</span>:[<span class="string">&#x27;yun&#x27;</span>,<span class="string">&#x27;look&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">submit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> obj = &#123; <span class="comment">//提交时建议将数据整理到一个对象提交</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>:<span class="variable language_">this</span>.<span class="property">msg</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">radio</span>:<span class="variable language_">this</span>.<span class="property">radio</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">checkbox</span>:<span class="variable language_">this</span>.<span class="property">checkBox</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code> ：原理 <code>v-bind:value=&quot;绑定属性&quot;</code> + <code>v-on:input=&quot;绑定属性 = e.target.value&quot;</code></p><h2 id="3-Vue-组件："><a href="#3-Vue-组件：" class="headerlink" title="3. Vue 组件："></a>3. Vue 组件：</h2><h3 id="Vue-component全局注册："><a href="#Vue-component全局注册：" class="headerlink" title="Vue.component全局注册："></a>Vue.component全局注册：</h3><ul><li><strong><code>Vue.component</code> ：</strong> 全局注册组件在任何Vue实例用可使用</li><li><strong><code>template</code> ：</strong> 组件模板</li><li><strong><code>props</code> ：</strong> 为模板添加属性，方便外面数据与模板内数据做交互</li><li><strong><code>&lt;slot&gt;&lt;/slot&gt;</code> ：</strong> 插槽，在模板中使用，标记组件中插入值显示位置</li></ul><h4 id="1-js："><a href="#1-js：" class="headerlink" title="1. js："></a>1. js：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;my-header&quot;</span>, &#123; <span class="comment">//创建组件，参1表示组件名，参2是个对象用来描述组件</span></span><br><span class="line">    <span class="comment">//props可为组件添加属性多个用&#x27;,&#x27;分隔，可利用此属性传递数据</span></span><br><span class="line">    props:[<span class="string">&#x27;title&#x27;</span>], <span class="comment">// 是一个数组</span></span><br><span class="line">    <span class="comment">//data存放组件数据</span></span><br><span class="line">    data:function()&#123;<span class="keyword">return</span> &#123;count:<span class="number">0</span>,&#125;&#125;,</span><br><span class="line">    <span class="comment">//template描述组件模板,模板内也可访问渲染props定义的属性</span></span><br><span class="line">    template:<span class="string">&#x27;&lt;div v-on:click=&quot;counts&quot;&gt;&#123;&#123;title&#125;&#125; count:&#123;&#123;count&#125;&#125;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="comment">//模板的最外层只能有一个标签，当模板为多个同级标签时，必须由一个父级标签包裹</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        counts:function()&#123;</span><br><span class="line">            <span class="built_in">this</span>.count++;</span><br><span class="line">            <span class="comment">//this.$emit自定义点击事件，参1函数名(不建议有大写字母建议用&#x27;-&#x27;隔开)</span></span><br><span class="line">            <span class="comment">//参2返回值(自动传入指定函数方法中),多个可继续添加</span></span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&quot;click-f&quot;</span>,<span class="built_in">this</span>.count);<span class="comment">//在自定义组件中使用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">var</span> <span class="variable">vm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data:&#123;vTitle:<span class="string">&quot;showTitle&quot;</span>&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        click:function(a)&#123;<span class="comment">//自定义点击属性监听的方法a参数自动传入</span></span><br><span class="line">            console.log(a);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-html："><a href="#2-html：" class="headerlink" title="2. html："></a>2. html：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-header</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;vTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span><span class="comment">&lt;!--调用组件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复用组件，并且使用自定义的点击事件监听,方法中不能传入参数否则变成普通方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-header</span> <span class="attr">v-on:click-f</span>=<span class="string">&quot;click&quot;</span>&gt;</span> <span class="comment">&lt;!-- 给自定义事件绑定click方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span>slot插入<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> <span class="comment">&lt;!-- 插入元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="components局部注册："><a href="#components局部注册：" class="headerlink" title="components局部注册："></a>components局部注册：</h3><ul><li><strong><code>components</code></strong> <strong>：</strong> 局部注册组件，只能在当前Vue对象le管理的元素中使用。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">textcom</span>&gt;</span><span class="tag">&lt;/<span class="name">textcom</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>:&#123; <span class="comment">// 在此属性中创建或管理组件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">textcom</span>:&#123; <span class="comment">// 里面的一个对象为一个组件，对象名为组件名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>:<span class="string">&quot;&lt;h4&gt;components&lt;/h4&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//除以上区别外与Vue.component(id, obj)的使用方法都一样</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="comment">// 可添加多个</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态组件："><a href="#动态组件：" class="headerlink" title="动态组件："></a>动态组件：</h3><p>随意定义一个元素在你想要组件显示的地方，为此元素添加 <strong><code>v-bind:is</code></strong> 属性，再给它绑定一个data中属性。</p><p>如果你想要显示的组件中有 <code>input</code> 之类的标签在切换组件后你输入的值也会被清空，如果你想要包留就使用 <strong><code>keep-alive</code></strong> 标签将其包裹，组件将被缓存数据不会丢失。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;showComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前位置就会显示属性值与之相对应的组件名的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 值为你想显示的组件的组件名</span></span><br><span class="line">data() &#123;<span class="keyword">return</span> &#123;showComponent: <span class="string">&quot;Card&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="组件细节："><a href="#组件细节：" class="headerlink" title="组件细节："></a>组件细节：</h3><h4 id="组件中props值："><a href="#组件中props值：" class="headerlink" title="组件中props值："></a>组件中props值：</h4><p>组件中props定义的属性值是不能直接在组件中修改的。建议使用自定义方法的形式去改变它对于绑定的值，而不是在组件中直接进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-header&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">counts</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">title</span> = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 使用后报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="组件中的data："><a href="#组件中的data：" class="headerlink" title="组件中的data："></a>组件中的data：</h4><blockquote><p>  组件可以重复使用，当一个组件使用多次，就会多次访问一个data数据，从而类似共享复用。如果组件的data属性不是一个函数且返回一个对象，在这种一个组件多次使用的情况下就会共享一个数据。</p></blockquote><p>综上所述组件中的data数据无需共享是建议使用函数（function）方式反还数据。data有以下写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:<span class="function">()=&gt;</span>&#123;<span class="keyword">return</span> &#123;<span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>&#125;&#125; <span class="comment">// es6 箭头函数写法</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> &#123;<span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>&#125;&#125; <span class="comment">// es6，推荐</span></span><br><span class="line"><span class="attr">data</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> &#123;<span class="attr">msg</span>:<span class="string">&quot;hello Vue&quot;</span>&#125;&#125; <span class="comment">// es5，推荐</span></span><br></pre></td></tr></table></figure><h4 id="组件slot插槽："><a href="#组件slot插槽：" class="headerlink" title="组件slot插槽："></a>组件slot插槽：</h4><p>插槽可以使用多个，而且我们还能为插槽设置 <code>name</code> 属性。方便给组件插入元素时定位插槽。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">&quot;counts&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用组件时给插入的元素使用 <strong><code>slot</code></strong> 属性指定选择插槽插入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-header</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;vTitle&quot;</span> <span class="attr">v-on:click-f</span>=<span class="string">&quot;click&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span> <span class="attr">slot</span>=<span class="string">&quot;slot2&quot;</span>&gt;</span>slot2插入<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">slot</span>=<span class="string">&quot;slot1&quot;</span>&gt;</span>slot1插入<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-header</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件-emit自定义事件："><a href="#组件-emit自定义事件：" class="headerlink" title="组件$emit自定义事件："></a>组件$emit自定义事件：</h4><p><code>this.$emit(&quot;自定义方法名&quot;,返回值);</code></p><p>利用 <code>props</code> 和 <code>$emit</code> 我们可以完成组件间的通信，完成数据间的传递。利用 <code>$emit</code> 子组件向传父组件传递数据，利用 <code>props</code> 父组件向子组件传递数据。 </p><h2 id="4-Axios请求："><a href="#4-Axios请求：" class="headerlink" title="4. Axios请求："></a>4. Axios请求：</h2><p>Vue中常常搭配axios来请求数据，注意data中接收响应数据的对象可以为空不定义参数，但是一旦定义了参数建议参数格式建议与返回的响应数据格式一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;<span class="attr">info</span>:&#123;&#125;,&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123; <span class="comment">// 一般在mounted中发送请求</span></span></span><br><span class="line"><span class="language-javascript">            axios.<span class="title function_">get</span>(<span class="string">&quot;./json.json&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">info</span> = response.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-computed计算属性："><a href="#5-computed计算属性：" class="headerlink" title="5. computed计算属性："></a>5. computed计算属性：</h2><blockquote><ul><li><p><strong>computed</strong> 与 <strong>methods</strong> 类似都用于存放方法，但是computed它能将计算结果即返回的数据以 <strong>Vue属性</strong> 的形势存储起来，将其行为转换为了静态属性也可称之为缓存。</p></li><li><p>在computed中定义的方法直接使用方法名调用不需要括号，且Vue的data中不能定义与computed中方法同名的属性否则报错。</p></li><li><p>computed中方法执行一次后值就被存储起来不会再改变，只用当方法中所用到的 <strong>属性值</strong> 被改变或刷新后才会重新计数。</p></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;mDate()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cDate&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;<span class="attr">msg</span>:<span class="string">&quot;1&quot;</span>,&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">mDate</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">cDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">msg</span>=<span class="string">&quot;2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上cDate方法执行一次后值不会再改变，只有当cDate中所用到的属性如msg被改变后，cDate方法才会再次执行重新计算值。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsoup</title>
      <link href="/2021/01/17/java/crawler/Jsoup/"/>
      <url>/2021/01/17/java/crawler/Jsoup/</url>
      
        <content type="html"><![CDATA[<h1 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h1><blockquote><ul><li>Jsoup 是一款 java 的 HTML 解析器可以直接解析 URL 地址或是 HTML 文本。可以通过 Dom、CSS已经类似于 jQuery 的操作方式提取数据。</li></ul></blockquote><h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jsoup-可解析类型："><a href="#Jsoup-可解析类型：" class="headerlink" title="Jsoup 可解析类型："></a>Jsoup 可解析类型：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line"><span class="comment">// 将一个URL解析为document最长时间为3秒</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">dom</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(url), <span class="number">3000</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup 还提供了解析字符串和文件的方式，</span></span><br><span class="line"><span class="comment"> * 注意 baseUri 参数表示，此网页中所有网址的前缀。</span></span><br><span class="line"><span class="comment"> * Document parse(String html)</span></span><br><span class="line"><span class="comment"> * Document parse(String html, String baseUri)</span></span><br><span class="line"><span class="comment"> * Document parse(File in, String charsetName)</span></span><br><span class="line"><span class="comment"> * Document parse(File in, String charsetName, String baseUri)</span></span><br><span class="line"><span class="comment"> * Document parse(InputStream in, String charsetName, String baseUri)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>通过URL或文件字符串解析得到的 <code>Document</code> 对象，就是我们可获取数据的操作对象。接下来我们将以这里百度的 <strong>dom对象为例</strong> 来获取数据。</p><h2 id="dom方式获取元素："><a href="#dom方式获取元素：" class="headerlink" title="dom方式获取元素："></a>dom方式获取元素：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以dom方式获取元素 */</span></span><br><span class="line"><span class="comment">// 1. 根据ID获取元素</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">byId</span> <span class="operator">=</span> dom.getElementById(<span class="string">&quot;su&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> byId.val(); <span class="comment">// 该按钮元素value属性的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;id = &quot;</span>+val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据标签获取元素</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">title</span> <span class="operator">=</span> dom.getElementsByTag(<span class="string">&quot;title&quot;</span>).first(); <span class="comment">// first 表示第一个元素</span></span><br><span class="line"><span class="type">String</span> <span class="variable">titleText</span> <span class="operator">=</span> title.text(); <span class="comment">// 元素内的文本</span></span><br><span class="line">System.out.println(<span class="string">&quot;tag = &quot;</span>+titleText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 根据class值获取元素(可以是该标签引用的所有class，也可以是一部分)</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">byClass</span> <span class="operator">=</span> dom.getElementsByClass(<span class="string">&quot;s-top-left s-isindex-wrap&quot;</span>).first();</span><br><span class="line"><span class="comment">// dom.getElementsByClass(&quot;s-isindex-wrap&quot;).first(); // 作用同上</span></span><br><span class="line"><span class="type">String</span> <span class="variable">byClassText</span> <span class="operator">=</span> byClass.text();</span><br><span class="line">System.out.println(<span class="string">&quot;class = &quot;</span>+byClassText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 根据标签属性名获取元素</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">attr</span> <span class="operator">=</span> dom.getElementsByAttribute(<span class="string">&quot;name&quot;</span>).first();</span><br><span class="line"><span class="type">String</span> <span class="variable">attrText</span> <span class="operator">=</span> attr.text();</span><br><span class="line">System.out.println(<span class="string">&quot;href = &quot;</span>+attrText);</span><br><span class="line"><span class="comment">// 4.1 根据标签属性与值获取元素</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">attrByValue</span> <span class="operator">=</span> dom.getElementsByAttributeValue(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tj_zhidao&quot;</span>).first();</span><br><span class="line"><span class="type">String</span> <span class="variable">attrByValueText</span> <span class="operator">=</span> attrByValue.text();</span><br><span class="line">System.out.println(<span class="string">&quot;attrByValue = &quot;</span>+attrByValueText);</span><br></pre></td></tr></table></figure><h2 id="获取数据："><a href="#获取数据：" class="headerlink" title="获取数据："></a>获取数据：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 获取元素中的数据 */</span></span><br><span class="line"><span class="comment">// 1. 获取元素的id</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素id为：&quot;</span>+byId.id());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取元素的class值(classNames方法将每一个class都封装到了set集合中)</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素的class值为：&quot;</span>+byClass.className());<span class="comment">// 完整的class值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 根据元素属性的名字获取属性的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;属性值为：&quot;</span>+attrByValue.attr(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 获取元素的所有属性与值</span></span><br><span class="line"><span class="type">Attributes</span> <span class="variable">attributes</span> <span class="operator">=</span> byId.attributes(); <span class="comment">// 提供了很多api供我们提取值</span></span><br><span class="line">System.out.println(<span class="string">&quot;元素的所有属性与值：&quot;</span>+attributes.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 带有value属性的表单组件可以使用 val 方法，一般标签可使用 text 获取文本</span></span><br></pre></td></tr></table></figure><h2 id="选择器获取元素："><a href="#选择器获取元素：" class="headerlink" title="选择器获取元素："></a>选择器获取元素：</h2><h3 id="1-基本选择方式："><a href="#1-基本选择方式：" class="headerlink" title="1. 基本选择方式："></a>1. 基本选择方式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 通过标签查找元素</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">selectA</span> <span class="operator">=</span> dom.select(<span class="string">&quot;a&quot;</span>).first();</span><br><span class="line">System.out.println(<span class="string">&quot;选择a标签 = &quot;</span>+selectA.className());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过id来查找</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">selectId</span> <span class="operator">=</span> dom.select(<span class="string">&quot;#su&quot;</span>).first();</span><br><span class="line">System.out.println(<span class="string">&quot;通过id = &quot;</span>+selectId.val());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过class查找</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">selectClass</span> <span class="operator">=</span> dom.select(<span class="string">&quot;.mnav&quot;</span>).first();</span><br><span class="line">System.out.println(<span class="string">&quot;通过class = &quot;</span>+selectClass.text());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 通过属性或属性与值(去除属性等于的值就能获取拥有该属性的元素)</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">selectAttr</span> <span class="operator">=</span> dom.select(<span class="string">&quot;[name=tj_zhidao]&quot;</span>).first();</span><br><span class="line">System.out.println(<span class="string">&quot;通过属性 = &quot;</span>+selectAttr.text());</span><br></pre></td></tr></table></figure><h3 id="2-高级筛选之组合："><a href="#2-高级筛选之组合：" class="headerlink" title="2. 高级筛选之组合："></a>2. 高级筛选之组合：</h3><p>这里不做过多讲解与CSS的选择器类似，只以方式1为例简单介绍一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 元素+(id|class|属性名值) 指定元素</span></span><br><span class="line"><span class="comment"> * 2. parent child ：parent元素下所有为child的子元素</span></span><br><span class="line"><span class="comment"> * 3. parent &gt; child ：parent元素下直接所有子元素为child的</span></span><br><span class="line"><span class="comment"> * 4. parent &gt; * ：parent下的所有元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 满足该属性的 a 标签</span></span><br><span class="line"><span class="type">Element</span> <span class="variable">first</span> <span class="operator">=</span> dom.select(<span class="string">&quot;[href=http://news.baidu.com]a&quot;</span>).first();</span><br><span class="line">System.out.println(first.text());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient</title>
      <link href="/2021/01/12/java/crawler/HttpClient/"/>
      <url>/2021/01/12/java/crawler/HttpClient/</url>
      
        <content type="html"><![CDATA[<h1 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h1><blockquote><ul><li>网络数据都需要使用 HTTP 协议访问互联网获取，而 Java 的 HTTP 协议客户端 HpptClient 技术（就相当于一个浏览器）能更好的协助请求网络数据。</li><li>这里主要介绍 get 与 post 的带参请求，如无需参数去除参数构建与添加环节代码即可。</li></ul></blockquote><h2 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Get-请求："><a href="#Get-请求：" class="headerlink" title="Get 请求："></a>Get 请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line"><span class="comment">// 创建客户端</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 利用 URIBuilder 对象添加参数</span></span><br><span class="line"><span class="type">URIBuilder</span> <span class="variable">uriBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URIBuilder</span>(url)</span><br><span class="line">        .addParameter(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .addParameter(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 get 请求对象(无需参数可省略URIBuilder直接传入url地址)</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(uriBuilder.build());</span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 客户端执行请求,并拿到响应对象</span></span><br><span class="line">    response = client.execute(httpGet);</span><br><span class="line">    <span class="comment">// 查看响应状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取到响应的实体对象</span></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="comment">// 利用工具类获取到网页内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(entity, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印网页代码</span></span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.close(); <span class="comment">// 关闭 get 响应</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.close(); <span class="comment">// 关闭客户端</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Post-请求："><a href="#Post-请求：" class="headerlink" title="Post 请求："></a>Post 请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.baidu.com/&quot;</span>;</span><br><span class="line"><span class="comment">// 创建客户端</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"><span class="comment">// 创建 post 请求对象</span></span><br><span class="line"><span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"><span class="comment">// 利用集合封装表单数据</span></span><br><span class="line">List&lt;NameValuePair&gt; params = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">params.add(<span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line"><span class="comment">// 创建表单的实体对象，参1需传入封装的表单数据</span></span><br><span class="line"><span class="type">UrlEncodedFormEntity</span> <span class="variable">em</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(params,<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"><span class="comment">// 将表单实体对象设置到 post 请求实体中</span></span><br><span class="line">httpPost.setEntity(em); <span class="comment">// 无参 post 请求与 get 无参类似</span></span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行 post 请求</span></span><br><span class="line">    response = client.execute(httpPost);</span><br><span class="line">    <span class="comment">// 查看响应对象状态码是否为200</span></span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 利用实体工具类将响应实体转换为 utf8 的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出网页内容</span></span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.close(); <span class="comment">// 关闭 post 响应</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.close(); <span class="comment">// 关闭客户端</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连接池："><a href="#连接池：" class="headerlink" title="连接池："></a>连接池：</h2><p>每次请求都需要创建 HTTPClient，而频繁的创建与销毁会造成资源的浪费，此时我们就可以通过使用连接池来管理 HTTPClient。（与数据库连接池原理相同）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建连接池管理器</span></span><br><span class="line"><span class="type">PoolingHttpClientConnectionManager</span> <span class="variable">cm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line"><span class="comment">// 设置最大连接数</span></span><br><span class="line">cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 设置每个主机的最大连接数</span></span><br><span class="line">cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 从连接池中获取客户端（HTTPClient）对象</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">        .setConnectionManager(cm).build(); <span class="comment">// 给客户端构造对象设置连接池并构建客户端对象</span></span><br><span class="line"><span class="comment">// 创建请求对象</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    response = httpclient.execute(httpGet);</span><br><span class="line">    <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;e.printStackTrace(); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 注意这里的客户端由连接池统一管理所以不用我们手动关闭 */</span></span><br><span class="line">    <span class="comment">// httpclient.close(); // 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：由连接池管理的客户端对象是不用我们来关闭的，由连接池直接管理。</strong></p><h2 id="配置请求："><a href="#配置请求：" class="headerlink" title="配置请求："></a>配置请求：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 以为 get 请求添加配置为例 */</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>();</span><br><span class="line"><span class="comment">// 创建请求配置对象</span></span><br><span class="line"><span class="type">RequestConfig</span> <span class="variable">config</span> <span class="operator">=</span> RequestConfig.custom()</span><br><span class="line">        .setConnectTimeout(<span class="number">1000</span>) <span class="comment">// 创建连接的最长时间</span></span><br><span class="line">        .setConnectionRequestTimeout(<span class="number">500</span>) <span class="comment">// 获取连接的最长时间</span></span><br><span class="line">        .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>) <span class="comment">// 数据传输的最长时间</span></span><br><span class="line">        .build();</span><br><span class="line"><span class="comment">// 添加配置</span></span><br><span class="line">httpGet.setConfig(config);</span><br></pre></td></tr></table></figure><h2 id="HttpClient-封装："><a href="#HttpClient-封装：" class="headerlink" title="HttpClient 封装："></a>HttpClient 封装：</h2><p>这里我们主要封装了无参 get 请求，其它请求请自行封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HttpClient 工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接池对象</span></span><br><span class="line">    <span class="keyword">private</span> PoolingHttpClientConnectionManager cm;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HttpUtils</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建连接池对象</span></span><br><span class="line">        <span class="built_in">this</span>.cm = <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line">        <span class="built_in">this</span>.cm.setMaxTotal(<span class="number">100</span>); <span class="comment">// 设置连接数</span></span><br><span class="line">        <span class="built_in">this</span>.cm.setDefaultMaxPerRoute(<span class="number">10</span>); <span class="comment">// 设置每个主机的最大连接数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求配置对象</span></span><br><span class="line">    <span class="keyword">private</span> RequestConfig <span class="title function_">getConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">1000</span>) <span class="comment">// 创建连接的最长时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">500</span>) <span class="comment">// 获取连接的最长时间</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10</span>*<span class="number">1000</span>) <span class="comment">// 数据传输的最长时间</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过get获取页面</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doGetHtml</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取客户端对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                .setConnectionManager(<span class="built_in">this</span>.cm).build();</span><br><span class="line">        <span class="comment">// 创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="comment">// 配置请求</span></span><br><span class="line">        httpGet.setConfig(getConfig());</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 客户端执行请求</span></span><br><span class="line">            response = httpclient.execute(httpGet);</span><br><span class="line">            <span class="comment">// 查看请求是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 拿到响应实体</span></span><br><span class="line">                <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">                <span class="comment">// 当响应实体不为空时转换为字符串</span></span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                    html = EntityUtils.toString(entity, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close(); <span class="comment">// 关闭响应</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;e.printStackTrace(); &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** get 方式下载图片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 网站地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 保存地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 全路径名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doGetImage</span><span class="params">(String url,String path)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取客户端对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.custom()</span><br><span class="line">                .setConnectionManager(<span class="built_in">this</span>.cm).build();</span><br><span class="line">        <span class="comment">// 创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="comment">// 配置请求</span></span><br><span class="line">        httpGet.setConfig(getConfig());</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 客户端执行请求</span></span><br><span class="line">            response = httpclient.execute(httpGet);</span><br><span class="line">            <span class="comment">// 查看请求是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 拿到响应实体</span></span><br><span class="line">                <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">                <span class="comment">// 当响应实体不为空时保存图片</span></span><br><span class="line">                <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> url.substring(url.lastIndexOf(<span class="string">&quot;.&quot;</span>)); <span class="comment">// 后缀名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">imageName</span> <span class="operator">=</span> UUID.randomUUID().toString()+suffix; <span class="comment">// 图片名</span></span><br><span class="line">                    <span class="type">File</span> <span class="variable">imageFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, imageName); <span class="comment">// 创建文件</span></span><br><span class="line">                    msg = imageFile.toString(); <span class="comment">// 文件位置</span></span><br><span class="line">                    <span class="type">OutputStream</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(imageFile); <span class="comment">// 文件流</span></span><br><span class="line">                    entity.writeTo(image); <span class="comment">// 保存</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123; e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close(); <span class="comment">// 关闭响应</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;e.printStackTrace(); &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> httpclient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI 与 easyExcel</title>
      <link href="/2021/01/10/java/crawler/POI/"/>
      <url>/2021/01/10/java/crawler/POI/</url>
      
        <content type="html"><![CDATA[<h1 id="POI-与-easyExcel-操作-Excel"><a href="#POI-与-easyExcel-操作-Excel" class="headerlink" title="POI 与 easyExcel 操作 Excel"></a>POI 与 easyExcel 操作 Excel</h1><blockquote><ul><li><p>Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。</p></li><li><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的阿里巴巴开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p></li></ul></blockquote><h2 id="POI结构："><a href="#POI结构：" class="headerlink" title="POI结构："></a>POI结构：</h2><ul><li>HSSF ： 提供读写Microsoft Excel格式档案的功能（2003）。</li><li>XSSF ： 提供读写Microsoft Excel OOXML格式档案的功能（2007）。</li><li>HWPF ： 提供读写Microsoft Word格式档案的功能。</li><li>HSLF ： 提供读写Microsoft PowerPoint格式档案的功能。</li><li>HDGF ： 提供读写Microsoft Visio格式档案的功能。</li></ul><h2 id="POI依赖："><a href="#POI依赖：" class="headerlink" title="POI依赖："></a>POI依赖：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- excel03版xls，最多65536格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- excel07版xlsx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="POI-写入-excel："><a href="#POI-写入-excel：" class="headerlink" title="POI 写入 excel："></a>POI 写入 excel：</h2><h3 id="HSSFWorkbook-03-："><a href="#HSSFWorkbook-03-：" class="headerlink" title="HSSFWorkbook(03)："></a>HSSFWorkbook(03)：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* poi 对excel03版进行写入操作 */</span></span><br><span class="line"><span class="comment">// 1. 创建工作簿</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line"><span class="comment">// 2. 在工作簿中创建一个工作表，sheet1作为表名</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workBook.createSheet(<span class="string">&quot;sheet1&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 表中创建首行对象(注意03版最大行数为65536行，超出此行报错)</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">row1</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 4. 创建首个单元格对象</span></span><br><span class="line"><span class="type">Cell</span> <span class="variable">cell1</span> <span class="operator">=</span> row1.createCell(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 5. 对单元格执行写入操作</span></span><br><span class="line">cell1.setCellValue(<span class="string">&quot;(1,1)单元格&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建excel文件对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\myfile\\IDEA\\demo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;excelTest.xls&quot;</span>; <span class="comment">// 注意03版文件结尾为 xls</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">excelFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path,fileName));</span><br><span class="line"><span class="comment">// 利用工作簿对象将文件写出</span></span><br><span class="line">workBook.write(excelFile);</span><br><span class="line"><span class="comment">// 关闭流对象</span></span><br><span class="line">excelFile.close();</span><br></pre></td></tr></table></figure><h3 id="XSSFWorkbook-07-："><a href="#XSSFWorkbook-07-：" class="headerlink" title="XSSFWorkbook(07)："></a>XSSFWorkbook(07)：</h3><p>03与07只存在工作簿对象和文件后缀的不同，并不太大的改变。因为面向对象编程的好处我们只需修改接口对象与文件的后缀为xlsx即可完成03至07的转变。需改变内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工作簿使用XSSFWorkbook对象</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line"><span class="comment">// 修改文件后缀</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;excelTest.xlsx&quot;</span>; <span class="comment">// 注意07版文件结尾为 xlsx</span></span><br></pre></td></tr></table></figure><h3 id="SXSSFWorkbook-07快速写入-："><a href="#SXSSFWorkbook-07快速写入-：" class="headerlink" title="SXSSFWorkbook(07快速写入)："></a>SXSSFWorkbook(07快速写入)：</h3><p>由上可发现 <code>HSSFWorkbook</code> 操作速度快但数量受限， <code>XSSFWorkbook</code> 数量没有限制但效力极低。</p><p>官方提供了另一个类 <code>SXSSFWorkbook</code> 来解决效率低的问题，它利用临时文件来存储数据。默认内存中最多保存100条数据超过时将前100条数据将写入临时文件中，也可在构造函数中传入自定义缓存数量。</p><p><strong>注意：</strong> 产生的临时文件需要清理（dispose）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用SXSSFWorkbook创建工作簿对象</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SXSSFWorkbook</span>();</span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet1</span> <span class="operator">=</span> workBook.createSheet();</span><br><span class="line"><span class="comment">// 写入65536行数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">65536</span> ; i++) &#123;</span><br><span class="line">    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet1.createRow(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(j);</span><br><span class="line">        cell.setCellValue(<span class="string">&quot;(&quot;</span>+i+<span class="string">&quot;,&quot;</span>+j+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\myfile\\IDEA\\demo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;sxssf.xlsx&quot;</span>;</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">excelFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path, fileName));</span><br><span class="line"><span class="comment">// 写出文件</span></span><br><span class="line">workBook.write(excelFile);</span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line">excelFile.close();</span><br><span class="line"><span class="comment">// 清除临时文件（SXSSFWorkbook特有方法必须转型）</span></span><br><span class="line">((SXSSFWorkbook)workBook).dispose();</span><br></pre></td></tr></table></figure><h2 id="POI-读取-excel："><a href="#POI-读取-excel：" class="headerlink" title="POI 读取 excel："></a>POI 读取 excel：</h2><h5 id="案例表格数据如下：（求和单元格公式为-B2-C2-）"><a href="#案例表格数据如下：（求和单元格公式为-B2-C2-）" class="headerlink" title="案例表格数据如下：（求和单元格公式为 =B2+C2 ）"></a>案例表格数据如下：（求和单元格公式为 <code>=B2+C2</code> ）</h5><table><thead><tr><th>时间</th><th>数字</th><th>小数</th><th>布尔</th><th>字符串</th><th>求和</th></tr></thead><tbody><tr><td>2021年6月10日</td><td>999</td><td>9.9</td><td>TRUE</td><td>哈哈哈</td><td>1008.9</td></tr></tbody></table><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">excelFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path, fileName));</span><br><span class="line"><span class="comment">// 获取工作簿文件对象</span></span><br><span class="line"><span class="type">Workbook</span> <span class="variable">workBook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(excelFile);</span><br><span class="line"><span class="comment">// 获取第一个工作表对象</span></span><br><span class="line"><span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workBook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取标题行内容 */</span></span><br><span class="line"><span class="comment">// 拿到标题行对象</span></span><br><span class="line"><span class="type">Row</span> <span class="variable">rowTitle</span> <span class="operator">=</span> sheet.getRow(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (rowTitle != <span class="literal">null</span>) &#123; <span class="comment">// 当前行不为空时</span></span><br><span class="line">    <span class="comment">// 获取到当前行数据的个数(中间空单元格不算)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cellCount</span> <span class="operator">=</span> rowTitle.getPhysicalNumberOfCells();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> rowTitle.getCell(cellNum);</span><br><span class="line">        <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123; <span class="comment">// 当前单元格不为空时</span></span><br><span class="line">            <span class="comment">// 这是在知道标题行数据都是字符串的情况下直接获取的</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue</span> <span class="operator">=</span> cell.getStringCellValue();</span><br><span class="line">            System.out.print(cellValue+<span class="string">&quot; | &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取正式表格中的内容 */</span></span><br><span class="line"><span class="comment">// 拿到当前工作簿的计算对象（公式单元格需要此对象进行计算）</span></span><br><span class="line"><span class="type">FormulaEvaluator</span> <span class="variable">eval</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HSSFFormulaEvaluator</span>((HSSFWorkbook) workBook);</span><br><span class="line"><span class="comment">// 获取表中的有数据的行数(空行不算)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">rowCount</span> <span class="operator">=</span> sheet.getPhysicalNumberOfRows();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> <span class="number">1</span>; rowNum &lt; rowCount; rowNum++) &#123;</span><br><span class="line">    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowNum);</span><br><span class="line">    <span class="keyword">if</span> (row != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cellCount</span> <span class="operator">=</span> row.getPhysicalNumberOfCells();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> <span class="number">0</span>; cellNum &lt; cellCount; cellNum++) &#123;</span><br><span class="line">            <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(cellNum);</span><br><span class="line">            <span class="keyword">if</span> (cell != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">CellType</span> <span class="variable">cellType</span> <span class="operator">=</span> cell.getCellType();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cellValue</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> STRING: <span class="comment">// 字符串类型</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【字符串】：&quot;</span>);</span><br><span class="line">                        cellValue = cell.getStringCellValue();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> NUMERIC: <span class="comment">// 数值类型（整数、小数、日期）</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【数值类型】：&quot;</span>);</span><br><span class="line">                        <span class="comment">// 是否是日期格式</span></span><br><span class="line">                        <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                            <span class="type">Date</span> <span class="variable">dateValue</span> <span class="operator">=</span> cell.getDateCellValue();</span><br><span class="line">                            cellValue = <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>)</span><br><span class="line">                                    .format(dateValue);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            cellValue = cell.toString();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BOOLEAN: <span class="comment">// 布尔类型</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【布尔类型】：&quot;</span>);</span><br><span class="line">                        cellValue = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> FORMULA: <span class="comment">// 公式</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【公式】：&quot;</span>);</span><br><span class="line">                        <span class="comment">// 当前单元格的计算公式</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">formula</span> <span class="operator">=</span> cell.getCellFormula();</span><br><span class="line">                        <span class="comment">// 对单元格进行计算</span></span><br><span class="line">                        <span class="type">CellValue</span> <span class="variable">value</span> <span class="operator">=</span> eval.evaluate(cell);</span><br><span class="line">                        <span class="comment">// 将计算结果转为字符串</span></span><br><span class="line">                        cellValue = value.formatAsString();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> ERROR: <span class="comment">// 错误单元格</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【错误】：&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> BLANK: <span class="comment">// 空单元格</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【空】：&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> _NONE: <span class="comment">// 未知类型</span></span><br><span class="line">                        System.out.print(<span class="string">&quot;【未知】：&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(cellValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">excelFile.close();</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">时间 | 数字 | 小数 | 布尔 | 字符串 | 求和 | </span><br><span class="line">【数值类型】：2021-06-10</span><br><span class="line">【数值类型】：999.0</span><br><span class="line">【数值类型】：9.9</span><br><span class="line">【布尔类型】：true</span><br><span class="line">【字符串】：哈哈哈</span><br><span class="line">【公式】：1008.9</span><br></pre></td></tr></table></figure><h2 id="easyExcel"><a href="#easyExcel" class="headerlink" title="easyExcel"></a>easyExcel</h2><h3 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h3><p><a href="https://search.maven.org/artifact/com.alibaba/easyexcel/2.2.7/jar">最新依赖获取地址</a></p><p>easyExcel 中关联了 POI 依赖因此我们导入 easyExcel 依赖后就不需要再到 POI 依赖也能使用 POI。不过注意版本上的区别，新版POI有许多新功能如需使用，建议还是添加最新版的POI依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="读写Excel："><a href="#读写Excel：" class="headerlink" title="读写Excel："></a>读写Excel：</h3><p>在 <a href="https://www.yuque.com/easyexcel/doc/quickstart"><strong>EasyExcel 官网</strong></a> 有详细介绍这里不再做讲解。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> poi </tag>
            
            <tag> easyexcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssm 整合</title>
      <link href="/2020/10/06/java/ssm/ssm/"/>
      <url>/2020/10/06/java/ssm/ssm/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM-整合"><a href="#SSM-整合" class="headerlink" title="SSM 整合"></a>SSM 整合</h1><h3 id="依赖归纳与资源过滤："><a href="#依赖归纳与资源过滤：" class="headerlink" title="依赖归纳与资源过滤："></a>依赖归纳与资源过滤：</h3><h4 id="1-依赖：更新于：2020年8月29日16-56-27"><a href="#1-依赖：更新于：2020年8月29日16-56-27" class="headerlink" title="1.依赖：更新于：2020年8月29日16:56:27"></a>1.依赖：<em>更新于：2020年8月29日16:56:27</em></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring springmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring aop切面编程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis整合spring的适配包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet 与 jsp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jackson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-pom-xml中Maven资源过滤设置："><a href="#2-pom-xml中Maven资源过滤设置：" class="headerlink" title="2. pom.xml中Maven资源过滤设置："></a>2. pom.xml中Maven资源过滤设置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-基本包结构："><a href="#3-基本包结构：" class="headerlink" title="3. 基本包结构："></a>3. 基本包结构：</h4><ul><li>pojo</li><li>mapper（dao）</li><li>service</li><li>controller</li></ul><hr><h3 id="Mybatis-层："><a href="#Mybatis-层：" class="headerlink" title="Mybatis 层："></a>Mybatis 层：</h3><h4 id="1-在resources中新建database-properties文件，准备连接数据库的数据（数据源）："><a href="#1-在resources中新建database-properties文件，准备连接数据库的数据（数据源）：" class="headerlink" title="1. 在resources中新建database.properties文件，准备连接数据库的数据（数据源）："></a>1. 在resources中新建database.properties文件，准备连接数据库的数据（数据源）：</h4><p>为了不引起配置混乱与数据源有关的配置都会添加 <strong>jdbc</strong>  的前缀。主要原因是<strong>username</strong>为Spring的key中的一个关键字（系统用户名）。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">88888888</span></span><br></pre></td></tr></table></figure><h4 id="2-resources中新建mybatis-config-xml配置mybatis："><a href="#2-resources中新建mybatis-config-xml配置mybatis：" class="headerlink" title="2. resources中新建mybatis-config.xml配置mybatis："></a>2. resources中新建mybatis-config.xml配置mybatis：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰命名自动映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 给pojo包的所有类取别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;ruoxijun.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册Mapper.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.BookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-为数据库表编写pojo类。"><a href="#3-为数据库表编写pojo类。" class="headerlink" title="3. 为数据库表编写pojo类。"></a>3. 为数据库表编写pojo类。</h4><h4 id="4-编写Mapper接口和Mapper-xml书写数据语句。"><a href="#4-编写Mapper接口和Mapper-xml书写数据语句。" class="headerlink" title="4. 编写Mapper接口和Mapper.xml书写数据语句。"></a>4. 编写Mapper接口和Mapper.xml书写数据语句。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;绑定接口&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-编写service层："><a href="#5-编写service层：" class="headerlink" title="5. 编写service层："></a>5. 编写service层：</h4><p>首先需要定义service接口，接口中定义与Mapper接口对应的方法。再编写ServiceImpl类（service接口的实现类），类中关联Mapper对象（定义一个Mapper成员变量，并添加set方法）实现方法中利用Mapper调用具体方法。</p><hr><h3 id="Spring-层："><a href="#Spring-层：" class="headerlink" title="Spring 层："></a>Spring 层：</h3><h4 id="1-resources中新建spring-dao-xml配置Spring整合Mybatis："><a href="#1-resources中新建spring-dao-xml配置Spring整合Mybatis：" class="headerlink" title="1. resources中新建spring-dao.xml配置Spring整合Mybatis："></a>1. resources中新建spring-dao.xml配置Spring整合Mybatis：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.连接池，这里使用c3p0。</span></span><br><span class="line"><span class="comment">        spring文章中使用了spring原生数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.sqlSessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao包，动态实现Mapper接口的实现注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描Mapper接口的实现，并注入到ioc容器中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ruoxijun.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前spring的文章中整合mybatis时需要新建类MapperImpl实现Mapper接口，这里的第 <strong>4</strong> 步扫描包便是帮我们做好了此步。也可以选择手动实现。</p><h4 id="2-resources中新建spring-service-xml配置service层："><a href="#2-resources中新建spring-service-xml配置service层：" class="headerlink" title="2. resources中新建spring-service.xml配置service层："></a>2. resources中新建spring-service.xml配置service层：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Spring-MVC-层："><a href="#Spring-MVC-层：" class="headerlink" title="Spring MVC 层："></a>Spring MVC 层：</h3><h4 id="1-resources中新建spring-mvc-xml配置mvc："><a href="#1-resources中新建spring-mvc-xml配置mvc：" class="headerlink" title="1. resources中新建spring-mvc.xml配置mvc："></a>1. resources中新建spring-mvc.xml配置mvc：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JstlView可以解析jsp页面中的JSTL标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-resources中新建applicationContext-xml配置Spring整合文件："><a href="#2-resources中新建applicationContext-xml配置Spring整合文件：" class="headerlink" title="2. resources中新建applicationContext.xml配置Spring整合文件："></a>2. resources中新建applicationContext.xml配置Spring整合文件：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-配置web-xml："><a href="#3-配置web-xml：" class="headerlink" title="3. 配置web.xml："></a>3. 配置web.xml：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springmvc控制器，拦截请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动spring容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 载入spring总配置文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置拦截所有的请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 字符编码过滤器，必须放在所有过滤器之前 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定要使用的字符编码级 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 响应编码格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截所有请求设置编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于springmvc控制器中的<strong>启动spring容器</strong>配置可单独分离出来配置(不推荐)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="comment">&lt;!-- 设置配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span><span class="comment">&lt;!-- 配置spring监听器，默认加载WEB-INF目录下的applicationContext.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springmvc </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2020/08/29/java/springboot/SpringBoot/"/>
      <url>/2020/08/29/java/springboot/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p>SpringBoot 简化了 Spring 应用开发，约定大于配置，去繁从简，just run 就能创建一个独立的，产品级别的应用。</p><p>SpringBoot2 要求 <strong>java8</strong> 及以上， <strong>maven3.3</strong> 及以上。（查看方式：java -version，mvn -v）</p><p>参考文档：<a href="https://www.yuque.com/atguigu/springboot">SpringBoot2 核心技术与响应式编程</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>快速创建独立运行的 Spring 项目以及与主流框架集成</li><li>使用嵌入式的 Servlet 容器，应用无需打成 war 包</li><li>starters 自动依赖与版本控制</li><li>自动配置简化开发，无需配置 XML 开箱即用</li><li>运行时应用监控与云计算的天然集成等</li></ol><h3 id="微服务简介"><a href="#微服务简介" class="headerlink" title="微服务简介"></a>微服务简介</h3><p><img src="http://blog.cuicc.com/images/sketch.png" alt="微服务框架图"></p><ul><li>架构风格（服务微化）</li><li>一个应用应该是一组小型服务，各个服务之间可以通过HTTP的方式进行互通关联</li><li>每一个功能元素最终都是一个可独立替换和独立升级的软件单元。</li></ul><p>详细请参照：<a href="http://blog.cuicc.com/blog/2015/07/22/microservices/">微服务详解中文版</a></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="1-官网创建："><a href="#1-官网创建：" class="headerlink" title="1. 官网创建："></a>1. 官网创建：</h3><p>官方创建 SpringBoot 项目网址：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p><img src="/images/java/springboot_start.jpg" alt="创建spring boot项目步骤"></p><p>将下载下来的项目压缩包解压使用 IDEA 打开，我们就初始化成功了一个 spring boot 项目。</p><h3 id="2-手动创建："><a href="#2-手动创建：" class="headerlink" title="2. 手动创建："></a>2. 手动创建：</h3><p>参考地址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started.first-application.code">Getting Started (spring.io)</a></p><ol><li>使用 IDEA 创建一个普通 maven 项目</li><li>在 pom.xml 中导入 SpringBoot 依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> <span class="comment">&lt;!-- SpringBoot 父依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- web 模块依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写主程序，启动 Spring Boot 应用：</li></ol><p>新建 MainApplication 类作为主程序，类上使用 <code>SpringBootApplication</code> 注解表明它是 SpringBoot 的主程序。在类中创建 <strong>main</strong> 方法，并使用 <code>SpringApplication.run</code> 方法来启动 SpringBoot 项目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标注主程序类，说明这是一个 SpringBoot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动spring应用，参1表示当前主程序类，参2为 main 方法的可变参数</span></span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写业务：</li></ol><p>新建 controller 包，新建 HelloController 类(注意：SpringBoot 主程序与 controller包同级)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>运行主程序（MainApplication）的 main 方法启动 spring boot 应用，在浏览器访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 可以看到浏览器中返回了 <strong>hello world</strong> 的字样。</li></ol><h3 id="3-IDEA-创建："><a href="#3-IDEA-创建：" class="headerlink" title="3. IDEA 创建："></a>3. IDEA 创建：</h3><ul><li><a href="https://start.spring.io/">Spring Initializr https://start.spring.io/</a> 连接不上时可以使用阿里镜像地址 ： <a href="https://start.aliyun.com/">https://start.aliyun.com</a></li></ul><ol><li>选择初始化 spring 项目：</li></ol><p><img src="/images/java/springboot/springboot01.jpg" alt="选择初始化 spring 项目"></p><ol start="2"><li>项目配置：</li></ol><p><img src="/images/java/springboot/springboot02.jpg" alt="项目配置"></p><ol start="3"><li>选择项目依赖（这里选择 spring boot 的 web 模块依赖）</li></ol><p><img src="/images/java/springboot/springboot03.jpg" alt="添加依赖"></p><ol start="4"><li>点击 finish 创建项目：</li></ol><p><img src="/images/java/springboot/springboot04.jpg" alt="创建项目"></p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><h3 id="依赖管理："><a href="#依赖管理：" class="headerlink" title="依赖管理："></a>依赖管理：</h3><ol><li><p>SpringBoot 中我们需要继承一个父项目 <code>spring-boot-starter-parent</code> 正是它来管理我们项目中的依赖，它也有一个父项目 <code>spring-boot-dependencies</code> 此项目中在 <code>properties</code> 内几乎声明了所有开发中常用依赖的所有版本号，这也被称之为 <strong>自动版本仲裁机制</strong> 。</p></li><li><p>如需自定义依赖版本号需要在我们项目的 <strong>pom.xml</strong> 添加 <code>&lt;properties&gt;&lt;/properties&gt;</code> 配置，在父项目中找到你需要修改依赖的 <strong>key</strong> 重写配置即可。</p></li><li><p>SpringBoot 提供以很多 starter， <code>spring-boot-starter-*</code> * 代表了一个具体的场景。<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">SpringBoot 支持场景 Developing with Spring Boot</a></p></li><li><p>SpringBoot 支持自定义 starter 官方建议取名 <code>*-spring-boot-starter</code> ，所以我们看见的此类 starter 一般都是第三方为我们提供的 starter。</p></li><li><p>所有的 starter 场景都有一个底层依赖：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初探自动配置："><a href="#初探自动配置：" class="headerlink" title="初探自动配置："></a>初探自动配置：</h3><p>以 web 场景为例：</p><ol><li>为我们引入并配置好了 Tomcat：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自动配置好了 SpringMVC 常用组件，以及 web 常用功能：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 标记为主程序类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// IOC 容器</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        <span class="comment">// 查看容器中的组件</span></span><br><span class="line">        String[] beanDefinitionNames = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            <span class="comment">// 输出组件，可以看见配置了的 springmvc 的常用组件</span></span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>主程序（@SpringBootApplication）下的包及其子包默认被扫描，无需我们再手动配置包扫描。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持修改扫描包路径</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.ruoxijun&quot;)</span></span><br></pre></td></tr></table></figure><p><code>@ComponentScan</code> 也能修改包扫描路径，但不支持与 SpringBootApplication 注解在同一类上。通过 <code>@SpringBootApplication</code> 源码可知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @SpringBootApplication 由一下 3 个注解组成</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br></pre></td></tr></table></figure><p>因此我们可以使用这三个注解来代替 SpringBootApplication 注解，一样可以实现 SpringBoot 功能。</p><ol start="4"><li>各种配置拥有默认值，且我们配置文件（application.properties）的配置最终都会绑定在某一个类上，这个类对象存储在 IOC 容器中。</li><li>所有的自动配置项按需加载，我们引入了那个场景对应场景的自动配置才会开启。在 <strong>spring-boot-starter</strong> 包中引入了一个 <strong>spring-boot-autoconfigure</strong> 包 SpringBoot 所有的自动配置功能都在其中。</li></ol><h3 id="容器功能："><a href="#容器功能：" class="headerlink" title="容器功能："></a>容器功能：</h3><h4 id="1-Configuration："><a href="#1-Configuration：" class="headerlink" title="1. @Configuration："></a>1. @Configuration：</h4><h5 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h5><ul><li>使用 @Configuration 配置类注册组件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为配置类(默认 Full 模式)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 给容器中添加组件，以方法名作为组件 id，返回类型就是组件类型</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// new User(pet()); // 组件依赖，调用方法也会从容器中获取 pet 组件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span> <span class="comment">// 指定组件名</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在主程序类中检验并获取组件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IOC 容器</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"><span class="comment">// 获取组件</span></span><br><span class="line"><span class="type">MyConfig</span> <span class="variable">myConfig</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;myConfig&quot;</span>, MyConfig.class); <span class="comment">// 配置类本身也是组件</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;user&quot;</span>, User.class); <span class="comment">// 默认为单实例</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> myConfig.user(); <span class="comment">// user == user1</span></span><br><span class="line"><span class="type">Pet</span> <span class="variable">tom</span> <span class="operator">=</span> run.getBean(Pet.class);</span><br></pre></td></tr></table></figure><ul><li><code>@Configuration(proxyBeanMethods = false)</code> ：可以获取到单实例组件（Lite 模式）</li></ul><h5 id="Full-模式："><a href="#Full-模式：" class="headerlink" title="Full 模式："></a>Full 模式：</h5><ol><li>标注有 <code>@Configuration</code> 或 <code>@Configuration(proxyBeanMethods = true)</code> 的类被称为Full模式的配置类。</li><li>生成 CGLIB 子类，单例组件之间有依赖关系时使用，方便管理。每次都会在容器中查找是否有此组件（没有时创建并加入容器），效率较低。</li></ol><h5 id="Lite-模式："><a href="#Lite-模式：" class="headerlink" title="Lite 模式："></a>Lite 模式：</h5><ol><li>类上有 <code>@Component</code> 、 <code>@ComponentScan</code> 、 <code>@Import</code> 、 <code>@ImportResource</code> 、 <code>@Configuration(proxyBeanMethods = false)</code> 注解或类上没有任何注解，但是类中存在 <code>@Bean</code> 方法。</li><li>运行时不用生成 CGLIB 子类，提高运行性能，降低启动时间，可以作为普通类使用。不方便管理组件之间的依赖关系。</li></ol><h4 id="2-Import："><a href="#2-Import：" class="headerlink" title="2. @Import："></a>2. @Import：</h4><ul><li>可以作用在任意组件类的上方导入，值为任意类型组件数组，给容器中自动创建出对应类型的组件，默认组件的名字是全类名。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;User.class, Pet.class&#125;)</span></span><br></pre></td></tr></table></figure><ul><li>@Import 高级用法： <a href="https://www.bilibili.com/video/BV1gW411W7wy?p=8">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></li></ul><h4 id="3-Conditional："><a href="#3-Conditional：" class="headerlink" title="3. @Conditional："></a>3. @Conditional：</h4><p><code>@Conditional</code> 条件装配注解，当满足条件时装配组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为配置类</span></span><br><span class="line"><span class="comment">// 当容器中没有 id 为 tom 的组件时装配该配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 组件中存在 id 为 tom 的组件时，才装配 user 组件</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Pet <span class="title function_">pet</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pet</span>(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序中使用 <code>run.containsBean(&quot;tom&quot;);</code> 检验是否存在某组件。</p><ul><li>常见条件装配注解如下：</li></ul><p><img src="/images/java/springboot/conditional.png" alt="创建spring boot项目步骤"></p><h4 id="4-ImportResource："><a href="#4-ImportResource：" class="headerlink" title="4. @ImportResource："></a>4. @ImportResource：</h4><p><code>@ImportResource</code> 允许我们导入 spring 的 xml 配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在配置类上使用</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span> <span class="comment">// 导入 resources 中的 beans.xml 配置文件</span></span><br></pre></td></tr></table></figure><h4 id="5-配置绑定："><a href="#5-配置绑定：" class="headerlink" title="5. 配置绑定："></a>5. 配置绑定：</h4><p>读取 properties 文件中的内容，并且把它封装到 JavaBean 中。</p><h5 id="1-原生-java-方法："><a href="#1-原生-java-方法：" class="headerlink" title="1. 原生 java 方法："></a>1. 原生 java 方法：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getProperties</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException &#123;</span><br><span class="line">         <span class="type">Properties</span> <span class="variable">pps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">         pps.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">         <span class="type">Enumeration</span> <span class="variable">enum1</span> <span class="operator">=</span> pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">         <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">strKey</span> <span class="operator">=</span> (String) enum1.nextElement();</span><br><span class="line">             <span class="type">String</span> <span class="variable">strValue</span> <span class="operator">=</span> pps.getProperty(strKey);</span><br><span class="line">             System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">             <span class="comment">//封装到JavaBean。</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-类已是组件："><a href="#2-类已是组件：" class="headerlink" title="2. 类已是组件："></a>2. 类已是组件：</h5><ul><li>IDEA 中使用 ConfigurationProperties 编辑器可能会提示 <code>Spring Boot Configuration Annotation Processor not configured</code> 未配置 Spring 引导配置注释处理器，引入如下依赖即可：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>组件类上：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 1. 声明为组件注册到容器中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class="comment">// 2. 通过前缀绑定配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 get、set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置属性：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mycar.name = MyCar</span><br><span class="line">mycar.age = 18</span><br></pre></td></tr></table></figure><ul><li>组件中还支持 <code>@Value($&#123;属性&#125;)</code> 方式注入</li></ul><h5 id="3-在配置类上开启："><a href="#3-在配置类上开启：" class="headerlink" title="3. 在配置类上开启："></a>3. 在配置类上开启：</h5><ol><li>为类绑定前缀</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span> <span class="comment">// 配置属性前缀</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在配置类声明开启：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 标记为配置类</span></span><br><span class="line"><span class="comment">// 开启 Car 属性配置功能，并将 Car 组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a>自动配置原理：</h3><p><code>@SpringBootApplication</code> 注解有以下 3 个主要注解构成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan( // 指定扫描包</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">), @Filter(</span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,</span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span></span><br><span class="line"><span class="meta">)&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="1-SpringBootConfiguration："><a href="#1-SpringBootConfiguration：" class="headerlink" title="1. @SpringBootConfiguration："></a>1. @SpringBootConfiguration：</h4><p>主要构成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br></pre></td></tr></table></figure><p><code>@SpringBootConfiguration</code> 表示 <code>@SpringBootApplication</code> 标记的类是一个配置类。</p><h4 id="2-EnableAutoConfiguration："><a href="#2-EnableAutoConfiguration：" class="headerlink" title="2. @EnableAutoConfiguration："></a>2. @EnableAutoConfiguration：</h4><p><code>@EnableAutoConfiguration</code> 由以下两个注解构成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AutoConfigurationPackage</span><br><span class="line">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br></pre></td></tr></table></figure><ol><li>@AutoConfigurationPackage:</li></ol><p>自动配置包指定了默认的包规则，查看源码 <code>@Import(&#123;Registrar.class&#125;)</code> 可以发现它导入了一个 <code>Registrar</code> 组件，而查看这个组件源码可以发现它有一个方法会给容器注入一系列组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(</span></span><br><span class="line"><span class="params">    AnnotationMetadata metadata, // 注解原信息（注解标记位置、属性值...）</span></span><br><span class="line"><span class="params">    BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 将指定包下的所有组件导入</span></span><br><span class="line">    AutoConfigurationPackages.register(registry,</span><br><span class="line">        <span class="comment">// 拿到项目包名（com.ruxijun），封装到一个字符串数组中</span></span><br><span class="line">        (String[])(<span class="keyword">new</span> <span class="title class_">AutoConfigurationPackages</span>.PackageImports(metadata)).getPackageNames()</span><br><span class="line">        .toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由此可知 <code>@AutoConfigurationPackage</code> 作用是利用 <code>Registrar</code> 将 <strong>主程序（@SpringBootApplication）</strong> 包以及子包内的组件导入容器中。</li></ul><ol start="2"><li>AutoConfigurationImportSelector.class</li></ol><p>查看 <code>AutoConfigurationImportSelector</code> 它会批量给容器导入一些组件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 利用 getAutoConfigurationEntry(annotationMetadata) 给容器中批量导入组件</span><br><span class="line"><span class="number">2.</span> 调用 getCandidateConfigurations(annotationMetadata, attributes) 获取到所有需要导入容器中的配置类</span><br><span class="line"><span class="number">3.</span> 利用工厂 SpringFactoriesLoader.loadFactoryNames 最终调用 Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(ClassLoader classLoader)</span> 方法得到所有配置类</span><br><span class="line"><span class="number">4.</span> 加载文件 classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) 默认扫描项目中所有 META-INF/spring.factories 位置文件</span><br><span class="line">核心包 spring-boot-autoconfigure.jar 的 META-INF/spring.factories 文件中配置了项目启动就需要全部加载的不同场景的配置类</span><br></pre></td></tr></table></figure><ul><li><p>虽然 <strong>一百多</strong> 个场景的所有自动配置类启动的时候默认全部加载（xxxxAutoConfiguration），但它们还受条件装配规则限制（ <strong>@Conditional</strong> ），最终实现 <strong>按需配置</strong> 。</p></li><li><p>目前 2.7.1 版本文件位置： <strong>META-INF&#x2F;spring&#x2F;%s.imports</strong></p></li></ul><h4 id="3-修改默认配置："><a href="#3-修改默认配置：" class="headerlink" title="3. 修改默认配置："></a>3. 修改默认配置：</h4><ul><li>注册文件上传解析器组件源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该配置类上 @EnableConfigurationProperties(&#123;WebMvcProperties.class&#125;) // 对应的可配置选项</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(&#123;MultipartResolver.class&#125;)</span> <span class="comment">// 容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &#123;&quot;multipartResolver&quot;&#125;)</span> <span class="comment">// 容器中没有此名称的组件</span></span><br><span class="line"><span class="comment">//给 @Bean 标注的方法传入了对象参数，这个参数的值就会从容器中寻找</span></span><br><span class="line"><span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resolver; <span class="comment">// 这个方法防止用户配置的文件上传解析器名称不符合规范</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册字符编码过滤器组件源码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该配置类上 @EnableConfigurationProperties(&#123;ServerProperties.class&#125;) // 对应的可配置选项</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> CharacterEncodingFilter <span class="title function_">characterEncodingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 对字符编码配置后返回对象加入到容器中...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上可知 SpringBoot 默认会在底层配好所有的组件，但是如果用户自己配置了以用户的优先。因此我们想修改默认配置或定制化配置方法如下：</p><ol><li>在自己的配置文件中 <code>@bean</code> 替换需要修改的组件。</li><li>通过查看配置类绑定了配置文件的哪些属性，在 properties 中修改配置值。</li></ol><h4 id="4-总结："><a href="#4-总结：" class="headerlink" title="4. 总结："></a>4. 总结：</h4><ul><li>SpringBoot先加载所有的自动配置类 xxxxxAutoConfiguration.class</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。 xxxxProperties.class 和配置文件进行了绑定。</li><li>生效的配置类就会给容器中装配很多相应场景的组件，并帮我们配置好组件相应功能。</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">配置属性文档 Common Application Properties (spring.io)</a></p><h3 id="常用配置："><a href="#常用配置：" class="headerlink" title="常用配置："></a>常用配置：</h3><p>在 <strong>resource</strong> 文件夹中新建 <strong><code>application.properties</code></strong> 或者 <strong><code>application.yml</code></strong> 配置文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment"># 访问项目时的路径前缀</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/bootTest</span></span><br><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">88888888</span></span><br></pre></td></tr></table></figure><p><code>properties</code> 转 <code>yml</code> ：<a href="https://www.toyaml.com/index.html">在线yaml与properties互转</a></p><h3 id="yml-配置方式："><a href="#yml-配置方式：" class="headerlink" title="yml 配置方式："></a>yml 配置方式：</h3><ol><li>绑定配置项：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">private</span> String[] arr;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="comment">// get set toString...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>yml 配置方式：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="comment"># 如有驼峰命名属性建议使用 ‘-’ 加小写字母</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ruoxi</span> <span class="comment"># 字符串可不加引号，单引号会转义（\n）双引号不会转义</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span> <span class="comment"># 支持表达式</span></span><br><span class="line">  <span class="attr">car:</span> <span class="comment"># &#123; name: rouxiCar, age: 1 &#125; # 对象行内写法（map、hash、object）</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rouxiCar</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">arr:</span> <span class="comment"># [ 1, 2 ] # 数组行内写法（array、list、set、queue）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">list:</span> [ <span class="number">3</span>, <span class="number">4</span> ]</span><br><span class="line">  <span class="attr">set:</span> [ <span class="number">5</span>, <span class="number">6</span> ]</span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">a:</span> &#123; <span class="attr">a:</span> <span class="string">map</span> &#125;</span><br><span class="line">    <span class="attr">b:</span> &#123; <span class="attr">b:</span> <span class="string">map</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="启动图标："><a href="#启动图标：" class="headerlink" title="启动图标："></a>启动图标：</h3><p>在线生成字符图标工具：</p><p><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a><br><a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a></p><p><strong>推荐</strong> ：</p><p><a href="https://www.bootschool.net/ascii">Spring Boot banner在线生成工具，制作下载banner.txt，修改替换banner.txt文字实现自定义，个性化启动banner-bootschool.net</a></p><p>我们只需在 <em>resource</em> 文件夹下新建一个 <strong>banner.txt</strong> 文件，在该文本文件中粘贴你想要的SpringBoot启动时显示的字符图标就好了。</p><p>关闭图标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MainApplication.class);</span><br><span class="line">app.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">app.run(args);</span><br></pre></td></tr></table></figure><h3 id="热部署："><a href="#热部署：" class="headerlink" title="热部署："></a>热部署：</h3><blockquote><p>  idea需要的设置：</p><ol><li>file-&gt;settings-&gt;build-&gt;Build project automatically <strong>勾选</strong></li><li>file-&gt;settings -&gt; Advanced Settings -&gt; Allow auto-make to start even if developed application is currently running <strong>勾选</strong> （这是idea2020.2设置的位置其它版本请上网自查）</li></ol></blockquote><h4 id="1-pom-xml-配置："><a href="#1-pom-xml-配置：" class="headerlink" title="1. pom.xml 配置："></a>1. pom.xml 配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 添加热部署依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span><span class="comment">&lt;!-- 使继承的项目不会继承热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 在SpringBoot的打包插件中配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span><span class="comment">&lt;!--将应用打包为一个可执行的jar包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> <span class="comment">&lt;!-- 热部署开启 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-主配置文件配置："><a href="#2-主配置文件配置：" class="headerlink" title="2. 主配置文件配置："></a>2. 主配置文件配置：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span> <span class="comment"># 热部署配置</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启</span></span><br><span class="line">      <span class="comment"># 设置监听的目录</span></span><br><span class="line">      <span class="attr">additional-paths:</span> <span class="string">src/main/java</span></span><br><span class="line">      <span class="comment"># 应付项目自动重启编译后404问题</span></span><br><span class="line">      <span class="attr">poll-interval:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">quiet-period:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>热部署快捷键 <code>Ctrl+F9</code></strong> </p><h3 id="打包："><a href="#打包：" class="headerlink" title="打包："></a>打包：</h3><h4 id="jar-包："><a href="#jar-包：" class="headerlink" title="jar 包："></a>jar 包：</h4><p>添加插件将 spring boot 应用打包为可执行 jar 包并运行，pom.xml 中添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span><span class="comment">&lt;!-- 默认将应用打包为一个可执行的jar包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在打包的 jar 包位置使用 <code>java -jar 项目的jar文件名</code> 命令即可运行。</p><ul><li>如不能成功请尝试关闭 cmd 快速编辑模式（右击 cmd 窗口点击属性）</li></ul><h4 id="war-包："><a href="#war-包：" class="headerlink" title="war 包："></a>war 包：</h4><p>将文件打包为war包，在pom.xml中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置打包类型为war --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为 SpringBoot 中默认内置 tomcat 服务器，我们需要将它内置的 tomcat 在打包时忽略掉因此在 pom.xml 的 <strong>dependencies</strong> 配置中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后在 SpringBoot 启动类中继承 <code>SpringBootServletInitializer</code> 类重写 <code>configure</code> 方法，之后打包即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(MainApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Profile："><a href="#Profile：" class="headerlink" title="Profile："></a>Profile：</h3><h4 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h4><ul><li><p><code>application.properties</code> （yaml 同理）表示默认环境配置，SpringBoot 还支持我们开启和配置不同环境的配置文件。</p></li><li><p>自定义环境配置文件 <code>application-环境名称.yaml</code> ，常用配置环境名称有 <strong>dev</strong> 开发环境、 <strong>test</strong> 测试环境、 <strong>prod</strong> 生产环境。</p></li><li><p>默认配置文件与环境配置文件同时生效，且同名配置环境配置优先。</p></li><li><p>在 <strong><code>application.properties</code></strong> 默认配置文件中指定激活某环境配置：</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev # 激活并使用 application-dev 中的配置</span></span><br></pre></td></tr></table></figure><ul><li><p>命令行开启方式 <code>java -jar 项目.jar --spring.profiles.active=prod  --person.name=haha</code> ，使用命令行方式修改配置属性（如这里还将 person.name 配置为了 haha）。</p></li><li><p>条件装配 <code>@Profile(&quot;test&quot;)</code> 该注解装配的类或方法在指定环境（如这是 test 环境）下才生效。</p></li><li><p>激活多个配置文件：</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活一组环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>= <span class="string">production</span></span><br><span class="line"><span class="comment"># spring.profiles.group.组名[脚标]=环境名</span></span><br><span class="line"><span class="attr">spring.profiles.group.production[0]</span>=<span class="string">proddb</span></span><br><span class="line"><span class="attr">spring.profiles.group.production[1]</span>=<span class="string">prodmq</span></span><br></pre></td></tr></table></figure><ul><li>配置文件位置(注意 1-5 数越大优先级越高)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) classpath 根路径</span><br><span class="line">(<span class="number">2</span>) classpath 根路径下 config 目录</span><br><span class="line">(<span class="number">3</span>) jar 包当前目录</span><br><span class="line">(<span class="number">4</span>) jar 包当前目录的 config 目录</span><br><span class="line">(<span class="number">5</span>) /config 子目录的直接子目录</span><br></pre></td></tr></table></figure><h3 id="自定义-starter"><a href="#自定义-starter" class="headerlink" title="自定义 starter"></a>自定义 starter</h3><p><a href="https://www.yuque.com/atguigu/springboot/tmvr0e">原理解析 (https://www.yuque.com/atguigu/springboot/tmvr0e)</a></p><h2 id="web-开发"><a href="#web-开发" class="headerlink" title="web 开发"></a>web 开发</h2><h3 id="静态资源："><a href="#静态资源：" class="headerlink" title="静态资源："></a>静态资源：</h3><h4 id="静态资源使用："><a href="#静态资源使用：" class="headerlink" title="静态资源使用："></a>静态资源使用：</h4><p>在 SpringBoot 中规定 <strong>resources</strong> 下的 <code>/META-INF/resources</code> 、 <code>/resources</code> 、 <code>/static</code>、 <code>/public</code> （同名文件按此优先级）等文件夹都可以存放静态资源我们只需按规定建立文件夹即可。</p><p>在配置文件中指定 resources 文件夹中的哪些文件夹为静态资源文件夹：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="comment"># 指定静态资源文件夹，使用逗号分隔多个</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/public/,classpath:/static/,classpath:/staticFile</span></span><br></pre></td></tr></table></figure><ul><li><p>访问方式： <code>项目根路径/资源路径名</code> （访问时不用加上static等静态文件夹的名作为路径一部分）</p></li><li><p>请求优先由 Controller 处理，没有相关请求时再寻找静态资源。因此静态资源中有与 Controller 相同的请求路径时由 Controller 处理，将不能请求到静态资源。</p></li></ul><p>为静态资源设置访问前缀：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span> <span class="comment"># 访问所有的静态资源都需要添加此路径前缀</span></span><br></pre></td></tr></table></figure><ul><li>SpringBoot 中默认静态资源文件夹下的 <code>index.html</code> 为首页（不推荐），直接访问项目根路径将访问到此页面（未设置静态资源访问前缀的情况下）。</li><li>设置网页图标只需在静态资源文件夹中添加名为 <code>favicon.ico</code> 的图片即可。</li></ul><h4 id="自定义静态资源处理规则："><a href="#自定义静态资源处理规则：" class="headerlink" title="自定义静态资源处理规则："></a>自定义静态资源处理规则：</h4><p>如我们需要访问指定位置的文件时可以如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 添加静态资源处理规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 请求路径 （访问方式：项目路径/file/文件名）</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/file/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 文件路径（项目 resources 文件夹下使用 class: 前缀）</span></span><br><span class="line">                .addResourceLocations(<span class="string">&quot;file:E:\\myfile\\&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态资源配置原理："><a href="#静态资源配置原理：" class="headerlink" title="静态资源配置原理："></a>静态资源配置原理：</h4><h5 id="1-WebMvcAutoConfiguration"><a href="#1-WebMvcAutoConfiguration" class="headerlink" title="1. WebMvcAutoConfiguration:"></a>1. WebMvcAutoConfiguration:</h5><p>SpringBoot 启动时自动加载 xxxAutoConfiguration 类，其中 SpringMvc 功能的自动配置类 <code>WebMvcAutoConfiguration</code> 加载成功且生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration(</span></span><br><span class="line"><span class="meta">    after = &#123;DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;WebMvcConfigurationSupport.class&#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(-2147483638)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><h5 id="2-WebMvcAutoConfigurationAdapter："><a href="#2-WebMvcAutoConfigurationAdapter：" class="headerlink" title="2. WebMvcAutoConfigurationAdapter："></a>2. WebMvcAutoConfigurationAdapter：</h5><p>在 WebMvcAutoConfiguration 有一个配置类 <code>WebMvcAutoConfigurationAdapter</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration( proxyBeanMethods = false )</span></span><br><span class="line"><span class="meta">@Import(&#123;WebMvcAutoConfiguration.EnableWebMvcConfiguration.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebMvcProperties.class, WebProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware &#123;...&#125;</span><br></pre></td></tr></table></figure><ul><li>这个类绑定了两个配置属性： WebMvcProperties.class &#x3D; spring.mvc，WebProperties.class &#x3D; spring.web</li><li>且这个配置类只有一个有参构造器，<strong>当配置类只有一个有参构造器时所有的参数都会自动充容器里面找</strong> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webProperties mvcProperties 获取配置绑定值的对象</span></span><br><span class="line"><span class="comment">// ListableBeanFactory beanFactory Spring 的 beanFactory</span></span><br><span class="line"><span class="comment">// HttpMessageConverters 找到所有的 HttpMessageConverters</span></span><br><span class="line"><span class="comment">// ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span></span><br><span class="line"><span class="comment">// DispatcherServletPath  </span></span><br><span class="line"><span class="comment">// ServletRegistrationBean 给应用注册 Servlet、Filter....</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(</span></span><br><span class="line"><span class="params">    WebProperties webProperties, WebMvcProperties mvcProperties,</span></span><br><span class="line"><span class="params">    ListableBeanFactory beanFactory,</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span><br><span class="line"><span class="params">    ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.resourceProperties = webProperties.getResources();</span><br><span class="line">    <span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line">    <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    <span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">    <span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = (WebMvcAutoConfiguration.ResourceHandlerRegistrationCustomizer)resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">    <span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">    <span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">    <span class="built_in">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-静态资源处理规则："><a href="#3-静态资源处理规则：" class="headerlink" title="3. 静态资源处理规则："></a>3. 静态资源处理规则：</h5><p>在 WebMvcAutoConfigurationAdapter 配置类中有一个 <code>addResourceHandlers</code> 方法，它就是静态资源处理的默认规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查配置 spring.web.resources.add-mappings 默认为true</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// spring.web.resources.add-mappings 为 false 时将关闭默认的资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// webjars 规则：对 ‘/webjars’ 的所有请求做处理，classpath 为资源路径</span></span><br><span class="line">        <span class="built_in">this</span>.addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        <span class="comment">/* mvcProperties.getStaticPathPattern() 对应配置 spring.mvc.static-path-pattern，</span></span><br><span class="line"><span class="comment">           请求路径默认值 String staticPathPattern = &quot;/**&quot; */</span></span><br><span class="line">        <span class="built_in">this</span>.addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">            <span class="comment">/* resourceProperties.getStaticLocations() 设置静态资源路径，对应配置 spring.web.resources.static-locations,</span></span><br><span class="line"><span class="comment">               其默认值为 new String[]&#123;&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot;&#125; */</span></span><br><span class="line">            registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">                registration.addResourceLocations(<span class="keyword">new</span> <span class="title class_">Resource</span>[]&#123;resource&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-欢迎页处理规则："><a href="#4-欢迎页处理规则：" class="headerlink" title="4. 欢迎页处理规则："></a>4. 欢迎页处理规则：</h5><p>在 WebMvcAutoConfiguration 类中有一个 <code>EnableWebMvcConfiguration</code> 配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;WebProperties.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>其中向容器注册了一个组件 <code>WelcomePageHandlerMapping</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext, FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;</span><br><span class="line">    <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(<span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), applicationContext, <span class="built_in">this</span>.getWelcomePage(), <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(<span class="built_in">this</span>.getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(<span class="built_in">this</span>.getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WelcomePageHandlerMapping 构造函数中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders, ApplicationContext applicationContext, Resource welcomePage, String staticPathPattern) &#123;</span><br><span class="line">    <span class="comment">// 欢迎页不为 null 且静态资源请求路径为 /** 时，转发请求 index.html</span></span><br><span class="line">    <span class="keyword">if</span> (welcomePage != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">        <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">        <span class="comment">// 当欢迎页不存在时请求由 controller 处理</span></span><br><span class="line">        <span class="built_in">this</span>.setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-favicon-ico："><a href="#5-favicon-ico：" class="headerlink" title="5. favicon.ico："></a>5. favicon.ico：</h5><p>浏览器会默认请求项目下 <code>/favicon.ico</code> 作为标签页图标，并保存在 session 域中。因此在配置文件中设置了静态资源访问前缀，那么 &#x2F;favicon.ico 就会获取不到相对应的图标了。</p><h3 id="表单与-RestFul："><a href="#表单与-RestFul：" class="headerlink" title="表单与 RestFul："></a>表单与 RestFul：</h3><h4 id="1-开启方式："><a href="#1-开启方式：" class="headerlink" title="1. 开启方式："></a>1. 开启方式：</h4><p>一般浏览器 <strong>表单</strong> 不能发送 get、post 以外的其它请求（其它请求都被 get 请求代替，），SpringMvc 提供了 <code>HiddenHttpMethodFilter</code> 我们只需为 post 请求添加一个 <code>_method</code> 参数，参数值就是我们想使用的请求方式。</p><p>SpringBoot 允许我们在配置中开启这项功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.hiddenmethod.filter.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="2-原理解析："><a href="#2-原理解析：" class="headerlink" title="2. 原理解析："></a>2. 原理解析：</h4><p>在 WebMvcAutoConfiguration 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(&#123;HiddenHttpMethodFilter.class&#125;)</span> <span class="comment">// 当容器中没有该组件时（我们没有自定义时）</span></span><br><span class="line"><span class="comment">// 检查配置中 spring.mvc.hiddenmethod.filter.enabled 的值是否开启此功能（默认 false）</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty( prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &#123;&quot;enabled&quot;&#125; )</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>(); &#125;</span><br></pre></td></tr></table></figure><p>在 HiddenHttpMethodFilter 过滤器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">methodParam</span> <span class="operator">=</span> <span class="string">&quot;_method&quot;</span>; <span class="comment">// 默认值 _method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMethodParam</span><span class="params">(String methodParam)</span> &#123; <span class="comment">// 修改 methodParam</span></span><br><span class="line">    Assert.hasText(methodParam, <span class="string">&quot;&#x27;methodParam&#x27; must not be empty&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.methodParam = methodParam;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 拦截请求</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">requestToUse</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="comment">// 是 POST 请求且没有错误时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取到请求数据中 _method 参数的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">paramValue</span> <span class="operator">=</span> request.getParameter(<span class="built_in">this</span>.methodParam);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123; <span class="comment">// 有值时</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> paramValue.toUpperCase(Locale.ENGLISH); <span class="comment">// 转为大写</span></span><br><span class="line">            <span class="comment">// 2. 检查是否是允许的请求方式（ALLOWED_METHODS：PUT、DELETE、PATCH）</span></span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                <span class="comment">// 3. 将原生 request 替换为包装模式的 requestWrapper 重写了 getMethod 方法并传入 _method 参数的值</span></span><br><span class="line">                requestToUse = <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>.HttpMethodRequestWrapper(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 过滤器放行 request（上面条件成立则放行被替换的 request）</span></span><br><span class="line">    filterChain.doFilter((ServletRequest)requestToUse, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-自定义-HiddenHttpMethodFilter："><a href="#3-自定义-HiddenHttpMethodFilter：" class="headerlink" title="3. 自定义 HiddenHttpMethodFilter："></a>3. 自定义 HiddenHttpMethodFilter：</h4><p>参照 WebMvcAutoConfiguration 自定义 HiddenHttpMethodFilter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HiddenHttpMethodFilter</span>();</span><br><span class="line">        hiddenHttpMethodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>); <span class="comment">// 修改 _method 为 _m 参数</span></span><br><span class="line">        <span class="keyword">return</span> hiddenHttpMethodFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表单现在只需添加一个 <code>-m</code> 参数，参数值为 PUT、DELETE、PATCH 其中一个，它就会去访问对应的请求方法了。</p><h3 id="请求映射原理："><a href="#请求映射原理：" class="headerlink" title="请求映射原理："></a>请求映射原理：</h3><p>SpringMvc 中通过 <code>DispatcherServlet</code> 做请求分发，SpringBoot 同理也一样。DispatcherServlet 是 Servlet 因此它肯定有 doGet 等方法。</p><ol><li>DispatcherServlet 继承关系（idea 中 Ctrl+F12 查看）：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatcherServlet -&gt; FrameworkServlet -&gt; HttpServletBean -&gt; HttpServlet</span><br></pre></td></tr></table></figure><ol start="2"><li>FrameworkServlet 中重写了 doGet 等方法（idea 中 Ctrl+H 查看），并且可以发现 doGet 等方法都调用了 processRequest 方法它又调用了 doService 方法处理请求：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>.processRequest(request, response); <span class="comment">// 调用 processRequest 处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">/* 初始化过程，省略... */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doService(request, response); <span class="comment">// 调用 doService 统一处理请求</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">/* 省略... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 它抽象方法因此可知请求被 DispatcherServlet 实现的 doService 方法处理</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><ol start="3"><li>DispatcherServlet 中 doService 最终调用 <code>doDispatch</code> 方法派发请求：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">    <span class="comment">// 拿到当前请求的处理器</span></span><br><span class="line">    mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 DispatcherServlet 中有一个 <code>List&lt;HandlerMapping&gt; handlerMappings</code> 参数它存储了许多请求的 <strong>映射处理器</strong> HandlerMapping， <code>getHandler</code> 方法中它会遍历这些映射处理器，并获取到能够处理当前请求的 handler：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.handlerMappings.iterator();</span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123; <span class="comment">// 遍历</span></span><br><span class="line">            <span class="type">HandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> (HandlerMapping)var2.next(); <span class="comment">// 当前映射处理器</span></span><br><span class="line">            <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request); <span class="comment">// 获取 handler</span></span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handlerMappings 中有一个 <code>RequestMappingHandlerMapping</code> 它保存了所有 @RequestMapping 相关和handler 的映射规则。还有 <code>WelcomePageHandlerMapping</code> 它就是欢迎页面 <code>/index.html</code> 的映射处理器，它们都是 WebMvcAutoConfiguration 中帮我们配置好的。</li><li>遍历时查询 HandlerMapping 中是否有对应处理请求的 handler，如果当前 HandlerMapping 中没有则继续在下一个 HandlerMapping 中寻找。</li></ul><ol start="5"><li>同理我们可以自定义映射处理器 HandlerMapping。</li></ol><h3 id="自定义-MVC"><a href="#自定义-MVC" class="headerlink" title="自定义 MVC:"></a>自定义 MVC:</h3><ul><li>SpringBoot 默认是关闭矩阵变量的 <code>@MatrixVariable</code>  ，在 WebMvcAutoConfiguration 中 WebMvcAutoConfigurationAdapter 内有一个 <code>configurePathMatch</code> 方法它是来配置路径映射的我们需要修改一下路径路径匹配规则，而这个方法是通过 <code>UrlPathHelper</code> 对路径进行解析此类中有一个 <code>removeSemicolonContent</code> 默认为 <code>true</code> 表示移除 URL 路径分号的内容。</li></ul><p>想开启矩阵变量功能，我们需要自定义 MVC SpringBoot 提供了三种方式：</p><ol><li>@Configuration + 实现 <code>WebMvcConfigurer</code> 接口(推荐使用)：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123; <span class="comment">// 实现 WebMvcConfigurer 接口</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 重写 configurePathMatch</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>(); <span class="comment">// 自定义 UrlPathHelper</span></span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>); <span class="comment">// 不让异常分号内容</span></span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>@Bean 注册 WebMvcConfigurer 组件：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 注册 WebMvcConfigurer 组件</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123; <span class="comment">// 自定义 WebMvcConfigurer</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// 重写</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">                <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>@Configuration + <code>@EnableWebMvc</code> + 继承 WebMvcConfigurer 全面接管 SpringMvc，慎用所有的规则需要手动重写配置。</li></ol><ul><li>@EnableWebMvc 会 <code>@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</code> 引入组件 <code>DelegatingWebMvcConfiguration</code> 它继承 <code>WebMvcConfigurationSupport</code> ，而在 <code>WebMvcAutoConfiguration</code> 上表示 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code> 则存在该类时 WebMvc 的自动配置将不生效。</li></ul><h3 id="参数处理原理："><a href="#参数处理原理：" class="headerlink" title="参数处理原理："></a>参数处理原理：</h3><ul><li>在 Controller 方法中参数会按照类型或注解帮我们自动注入值，它是如何实现的？</li></ul><h4 id="1-注解参数："><a href="#1-注解参数：" class="headerlink" title="1. 注解参数："></a>1. 注解参数：</h4><ol><li><p>在 <code>DispatcherServlet</code> 的 <code>doDispatch</code> 方法中它通过 <code>getHandler</code> 找到能够处理当前请求的 HandlerMapping 从中拿到具体处理该请求的 Handler 它记录了具体的 Controller 方法。</p></li><li><p><code>getHandler</code> 之后还会为当前的 Handler 找到 <strong>适配器</strong> HandlerAdapter:</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doDispatch 方法中</span></span><br><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler()); <span class="comment">// 获取适配器</span></span><br></pre></td></tr></table></figure><ol start="3"><li>它会遍历适配器集合找到能够处理当前 Handler 的适配器：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters; <span class="comment">// 保存了多种 Handler 适配器的集合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> HandlerAdapter <span class="title function_">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerAdapters != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.handlerAdapters.iterator();</span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> (HandlerAdapter)var2.next();</span><br><span class="line">            <span class="keyword">if</span> (adapter.supports(handler)) &#123; <span class="comment">// 支不支持当前 Handler</span></span><br><span class="line">                <span class="keyword">return</span> adapter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;No adapter for handler [&quot;</span> + handler + <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>在适配器集合中有一个 <code>RequestMappingHandlerAdapter</code> 它就是主要来处理 @RequestMaping 等方法的适配器。</p></li><li><p>找到适配器后执行目标方法：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doDispatch 方法中</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); <span class="comment">// 真正执行 Handler</span></span><br></pre></td></tr></table></figure><ol start="6"><li>在 <code>RequestMappingHandlerAdapter</code> 通过 <code>invokeHandlerMethod</code> 来执行我们的目标方法（Controller 方法）。</li><li>为将执行的方法设置 <strong>参数解析器</strong> 与 <strong>返回值处理器</strong> ：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RequestMappingHandlerAdapter -&gt; invokeHandlerMethod 中</span></span><br><span class="line"><span class="comment">// 1. 可执行方法即要执行的 Controller 方法</span></span><br><span class="line"><span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> <span class="built_in">this</span>.createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="comment">/* 2. 设置参数解析器，所以可知 Controller 方法支持哪些参数类型取决于该解析器</span></span><br><span class="line"><span class="comment">它会拿到 Controller 方法的参数，检查是否支持解析该参数，如果支持再进行解析 */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) &#123; <span class="comment">// 参数解析器列表 HandlerMethodArgumentResolvers</span></span><br><span class="line">    invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 设置返回值处理器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123; <span class="comment">// 返回值处理器列表</span></span><br><span class="line">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]); <span class="comment">// 调用和处理方法</span></span><br></pre></td></tr></table></figure><ol start="8"><li><code>ServletInvocableHandlerMethod</code> 中 <code>invokeAndHandle</code> 方法内：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 去执行 Controller 方法，并得到 Controller 的返回值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeForRequest(webRequest, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure><ol start="9"><li><code>invokeForRequest</code> 会利用 <code>InvocableHandlerMethod</code> 的 <code>getMethodArgumentValues</code> 方法中确定每一个参数的具体值：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 1. 获取方法所有的参数声明</span></span><br><span class="line">    MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">    <span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123; <span class="comment">// 为空时</span></span><br><span class="line">        <span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. 声明存储参数值的数组</span></span><br><span class="line">    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">        <span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];</span><br><span class="line">        parameter.initParameterNameDiscovery(<span class="built_in">this</span>.parameterNameDiscoverer);</span><br><span class="line">        args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">        <span class="keyword">if</span> (args[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 3. 判断那个解析器支持当前参数类型</span></span><br><span class="line"><span class="comment">           它会遍历参数解析器（HandlerMethodArgumentResolvers），找到合适的 ArgumentResolver</span></span><br><span class="line"><span class="comment">           第一次执行时会将匹配的解析器加入缓存之后不再需要遍历 */</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="string">&quot;No suitable resolver&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 4. 使用参数解析器解析当前参数的具体值</span></span><br><span class="line">            args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">exMsg</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">                <span class="keyword">if</span> (exMsg != <span class="literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">                    logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Servlet-API-参数："><a href="#2-Servlet-API-参数：" class="headerlink" title="2. Servlet API 参数："></a>2. Servlet API 参数：</h4><p>Servlet 参数类型的解析器 <code>ServletRequestMethodArgumentResolver</code> 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否为支持的 Servlet API 类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">    <span class="keyword">return</span> WebRequest.class.isAssignableFrom(paramType) || <span class="comment">// 支持的 API</span></span><br><span class="line">        ServletRequest.class.isAssignableFrom(paramType) || </span><br><span class="line">        MultipartRequest.class.isAssignableFrom(paramType) || </span><br><span class="line">        HttpSession.class.isAssignableFrom(paramType) || </span><br><span class="line">        pushBuilder != <span class="literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType) ||</span><br><span class="line">        Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations() || InputStream.class.isAssignableFrom(paramType) || Reader.class.isAssignableFrom(paramType) || HttpMethod.class == paramType || Locale.class == paramType || TimeZone.class == paramType || ZoneId.class == paramType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-复杂参数："><a href="#3-复杂参数：" class="headerlink" title="3. 复杂参数："></a>3. 复杂参数：</h4><p>Map、Model、ServletResponse 等类型参数。</p><ul><li>以参数 Map 类型为例，在 <code>InvocableHandlerMethod</code> 的 <code>getMethodArgumentValues</code> 方法中：</li></ul><ol><li><p>获取到 Map 类型的参数解析器为 <code>MapMethodProcessor</code> 。</p></li><li><p>解析参数是利用 <code>ModelAndViewContainer mavContainer</code> 的 <code>mavContainer.getModel()</code> 返回 <code>BindingAwareModelMap</code> 它是 Model 也是 Map 类型，最终参数值封装到它里面。</p></li><li><p><code>ModelAndViewContainer</code> 用来保存请求需要的所有数据，视图数据模型数据等等。</p></li></ol><ul><li>Model 类型参数解析器为 <code>ModelMethodProcessor</code> 过程同理一样调用了 <code>mavContainer.getModel()</code> 。</li></ul><h4 id="4-自定义对象参数："><a href="#4-自定义对象参数：" class="headerlink" title="4. 自定义对象参数："></a>4. 自定义对象参数：</h4><p>自定义 pojo 参数类型的解析器 <code>ServletModelAttributeMethodProcessor</code> 它继承 <code>ModelAttributeMethodProcessor</code> 。</p><ul><li>由之前可知 <code>resolvers.supportsParameter(parameter)</code> 来判断某解析器是否能解析该类型参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) || <span class="comment">// 是否标注了 @ModelAttribute 注解</span></span><br><span class="line">            (<span class="built_in">this</span>.annotationNotRequired &amp;&amp; <span class="comment">// 不是必须的</span></span><br><span class="line">             !BeanUtils.isSimpleProperty(parameter.getParameterType()))); <span class="comment">// 且不是简单属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同列解析参数 <code>resolvers.resolveArgument(...)</code> ，再<code>ModelAttributeMethodProcessor</code> 的 <code>resolveArgument</code> 方法中:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class="line"><span class="params">                                    NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> ModelFactory.getNameForParameter(parameter); <span class="comment">// 获取参数名</span></span><br><span class="line">    <span class="comment">// 获取看有没有 @ModelAttribute 注解</span></span><br><span class="line">    <span class="type">ModelAttribute</span> <span class="variable">ann</span> <span class="operator">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">    <span class="keyword">if</span> (ann != <span class="literal">null</span>) &#123; mavContainer.setBinding(name, ann.binding()); &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断 ModelAndViewContainer 中有没有同名参数</span></span><br><span class="line">    <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">        attribute = mavContainer.getModel().get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 pojo 对象实例，所有属性值为空的实例</span></span><br><span class="line">        <span class="keyword">try</span> &#123; attribute = createAttribute(name, parameter, binderFactory, webRequest); &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isBindExceptionRequired(parameter)) &#123; <span class="keyword">throw</span> ex; &#125;</span><br><span class="line">            <span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123; attribute = Optional.empty(); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; attribute = ex.getTarget(); &#125;</span><br><span class="line">            bindingResult = ex.getBindingResult();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult == <span class="literal">null</span>) &#123; <span class="comment">// 绑定结果为空时</span></span><br><span class="line">        <span class="comment">// 创建 web 数据绑定器</span></span><br><span class="line">        <span class="type">WebDataBinder</span> <span class="variable">binder</span> <span class="operator">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">        <span class="keyword">if</span> (binder.getTarget() != <span class="literal">null</span>) &#123; <span class="comment">// 拿到 pojo 实例且不为 null</span></span><br><span class="line">            <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                bindRequestParameters(binder, webRequest); <span class="comment">// 将 web 请求中的数据绑定到 pojo 实例中</span></span><br><span class="line">            &#125;</span><br><span class="line">            validateIfApplicable(binder, parameter);</span><br><span class="line">            <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                <span class="comment">// 绑定发生异常可通过 getBindingResult 获取（数据校验错误就是从这里拿到的）</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindException</span>(binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">            attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        bindingResult = binder.getBindingResult();</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">    mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">    mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WebDataBinder</code> ： web 数据绑定器，将请求参数的值绑定到指定的 JavaBean 中，它利用 <code>Container</code> 转换器，将请求数据转换成指定的数据类型再次封装到 JavaBean 中。</p><p><code>GenericConversionService</code> ：在设置每一个值的时候，找它里面的所有 <code>Converter</code> 那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型。</p><h3 id="自定义-Converter："><a href="#自定义-Converter：" class="headerlink" title="自定义 Converter："></a>自定义 Converter：</h3><p>Converter 接口 <code>@FunctionalInterface public interface Converter&lt;S, T&gt;</code> 包含 FunctionalInterface 注解，它只能针对 form 表单提交数据有效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">                <span class="comment">// 添加自定义 Converter</span></span><br><span class="line">                registry.addConverter(<span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String, Car&gt;() &#123; <span class="comment">// String 类型转 Car 类型</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Car <span class="title function_">convert</span><span class="params">(String source)</span> &#123; <span class="comment">// 转换具体实现方式</span></span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.hasText(source))&#123; <span class="comment">// 存在文字</span></span><br><span class="line">                            <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">                            car.setName(source); <span class="comment">// 自定义操作设定属性值</span></span><br><span class="line">                            <span class="keyword">return</span> car;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如发起请求：<code>/setUser?name=userName&amp;car=myCar</code> 与 <code>/setCar?car=111</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;setUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user; <span class="comment">// 结果 &#123; name: &quot;userName&quot;,car: &#123; name: &quot;myCar&quot; &#125; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;setCar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">setUser</span><span class="params">(<span class="meta">@RequestParam(&quot;car&quot;)</span> Car car)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> car; <span class="comment">// 结果 &#123; name&quot;: &quot;111&quot; &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据响应原理："><a href="#数据响应原理：" class="headerlink" title="数据响应原理："></a>数据响应原理：</h3><h4 id="1-响应-JSON："><a href="#1-响应-JSON：" class="headerlink" title="1. 响应 JSON："></a>1. 响应 JSON：</h4><ol><li>由上可知 <code>ServletInvocableHandlerMethod</code> 的 <code>invokeAndHandle</code> 中会拿到 Controller 的返回值，之后它还会对返回值做处理：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 执行 Controller 方法并拿到返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line">    <span class="built_in">this</span>.setResponseStatus(webRequest);</span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="literal">null</span>) &#123; <span class="comment">// 如果返回值为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isRequestNotModified(webRequest) || <span class="built_in">this</span>.getResponseStatus() != <span class="literal">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.disableContentCachingIfNecessary(webRequest);</span><br><span class="line">            mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 是否是一个字符串</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.hasText(<span class="built_in">this</span>.getResponseStatusReason())) &#123;</span><br><span class="line">        mavContainer.setRequestHandled(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理返回值</span></span><br><span class="line">        <span class="built_in">this</span>.returnValueHandlers.handleReturnValue(returnValue, <span class="built_in">this</span>.getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var6) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>HandlerMethodReturnValueHandlerComposite</code> 中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">                              ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 根据返回值类型获取合适的返回值处理器(它会遍历所有的返回值处理器，拿到能够处理当前返回值的处理器)</span></span><br><span class="line">    <span class="type">HandlerMethodReturnValueHandler</span> <span class="variable">handler</span> <span class="operator">=</span> selectHandler(returnValue, returnType);</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName()); &#125;</span><br><span class="line">    <span class="comment">// 处理返回值</span></span><br><span class="line">    handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回值处理器接口 <code>HandlerMethodReturnValueHandler</code> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerMethodReturnValueHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 判断是否支持某类型返回值</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">supportsReturnType</span><span class="params">(MethodParameter returnType)</span>;</span><br><span class="line">    <span class="comment">// 2. 处理返回值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class="line"><span class="params">ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>各种返回值处理器支持的返回值类型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line"><span class="comment">// 方法有以下注解标注且返回值为对象类型的</span></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="meta">@ResponseBody</span> --&gt; RequestResponseBodyMethodProcessor <span class="comment">// 对应的处理器</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>RequestResponseBodyMethodProcessor</code> 处理 <code>@ResponseBody</code> 标注的方法的返回值：</li></ol><p>RequestResponseBodyMethodProcessor 在 handleReturnValue 调用 <code>writeWithMessageConverters</code> 方法使用消息转换器（MessageConverters）进行写出操作：</p><p>内容协商：</p><p>Http 协议中规定请求头中有 Accept 属性它告诉服务器，客户端能接收的响应类型是什么。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逗号比分号优先级高，q 代表权重，没有去默认为1，*/* 表示任意类型</span></span><br><span class="line">Accept<span class="punctuation">:</span> text/html<span class="punctuation">,</span>application/xhtml+xml<span class="punctuation">,</span>application/xml;q=<span class="number">0.9</span><span class="punctuation">,</span>image/webp<span class="punctuation">,</span>image/apng<span class="punctuation">,</span>*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br></pre></td></tr></table></figure><p><strong>客户端能接收的类型</strong> 用 <code>MediaType</code> <strong>媒体类型</strong> 对象表示，与 <strong>服务器支持生成的类型</strong> 循环匹配筛选出能够支持类型的 <code>MediaType</code> 。若客户端无法解析服务端返回的内容，即媒体类型未匹配，那么响应 406。</p><p>SpringMvc 遍历容器中所有 <code>HttpMessageConverter</code> 消息转换器，找到支持相应类型的转换器：</p><p>主要作用：看是否支持将返回值 Class 类型的对象，转化为 <code>MediaType</code> 类型的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>; <span class="comment">// 是否支持读</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, <span class="meta">@Nullable</span> MediaType mediaType)</span>; <span class="comment">// 是否支持写</span></span><br><span class="line">List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">default</span> List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (canRead(clazz, <span class="literal">null</span>) || canWrite(clazz, <span class="literal">null</span>) ? getSupportedMediaTypes() : Collections.emptyList());</span><br><span class="line">&#125;</span><br><span class="line">T <span class="title function_">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span><span class="params">(T t, <span class="meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <code>MappingJackson2HttpMessageConverter</code> 中 <code>write</code> 方法将对象转为 JSON （利用 Jackson）再写出去。</p><h4 id="2-内容协商原理："><a href="#2-内容协商原理：" class="headerlink" title="2. 内容协商原理："></a>2. 内容协商原理：</h4><ol><li>判断当前请求头中是否已经有确定的媒体类型 <code>MediaType</code> ，有就使用确定好的媒体类型，没有则向下执行。</li><li>获取客户端支持接收的内容类型（默认通过请求头 Accept 字段） <code>acceptableTypes = this.getAcceptableMediaTypes(request)</code>。<ul><li><strong>ContentNegotiationManager</strong> 内容协商管理器 默认使用基于请求头的策略</li><li><strong>HeaderContentNegotiationStrategy</strong> 确定客户端可以接收的内容类型</li></ul></li><li>获取服务器支持生成的媒体类型，再与客户端能接收的类型进行比对找到匹配的媒体类型。</li><li>遍历循环容器中所有的 <code>HttpMessageConverter</code> ,拿到 <strong>所有支持转换</strong> 当前返回值 Class 类型的 <code>HttpMessageConverter</code>。</li><li>客户端想要的类型和服务器支持的类型进行循环匹配。</li><li>最终使用匹配到的 <code>Converter</code> 进行转换。</li></ol><h4 id="3-开启浏览器参数方式内容协商功能："><a href="#3-开启浏览器参数方式内容协商功能：" class="headerlink" title="3. 开启浏览器参数方式内容协商功能："></a>3. 开启浏览器参数方式内容协商功能：</h4><ul><li>开启配置：</li></ul><p>开启此配置后服务器不再默认通过请求头的 Accept 字段来获取客户端支持接收的内容类型，而是通过读取请求参数中的 <strong>format</strong> 值来确定客户端接收的内容类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>请求时添加 <strong>format</strong> 参数指定接收的数据类型即可</li></ul><p><code>/user?format=json</code> 接收 JSON 类型数据</p><h3 id="自定义-HttpMessageConverter："><a href="#自定义-HttpMessageConverter：" class="headerlink" title="自定义 HttpMessageConverter："></a>自定义 HttpMessageConverter：</h3><ul><li>自定义 HttpMessageConverter：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">// 添加自定义 HttpMessageConverter</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">            converters.add(<span class="keyword">new</span> <span class="title class_">HttpMessageConverter</span>&lt;User&gt;() &#123; <span class="comment">// controller 方法返回值为 User 类型</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz.isAssignableFrom(User.class); <span class="comment">// 返回值类型为 User 类型</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/** 服务器要统计所有 MessageConverter 都能写出哪些内容类型</span></span><br><span class="line"><span class="comment">                 * 自定义类型 application/x-user</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> List&lt;MediaType&gt; <span class="title function_">getSupportedMediaTypes</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> MediaType.parseMediaTypes(<span class="string">&quot;application/x-user&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> User <span class="title function_">read</span><span class="params">(Class&lt;? extends User&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(User user, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class="line">                    <span class="comment">// 自定义内容数据</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> user.getName()+ <span class="string">&quot; -&gt; &quot;</span> +user.getAge();</span><br><span class="line">                    <span class="comment">// 将内容写出</span></span><br><span class="line">                    <span class="type">OutputStream</span> <span class="variable">body</span> <span class="operator">=</span> outputMessage.getBody();</span><br><span class="line">                    body.write(data.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当标注 @ResponseBody 的方法返回值类型为 User 且媒体类型为我们自定义的 application&#x2F;x-user 时将使用此自定义 <code>HttpMessageConverter</code> 写出响应数据。</p><ul><li>如果还想使用请求中添加 <strong>format</strong> 参数来指定客户端接收响应数据的类型，还需要在上 <code>WebMvcConfigurer</code> 中重写 <code>configureContentNegotiation</code> 方法（原来的策略全部失效）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 配置内容协商功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureContentNegotiation</span><span class="params">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class="line">    Map&lt;String, MediaType&gt; mediaTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    mediaTypes.put(<span class="string">&quot;json&quot;</span>, MediaType.APPLICATION_JSON);</span><br><span class="line">    mediaTypes.put(<span class="string">&quot;xml&quot;</span>, MediaType.APPLICATION_XML);</span><br><span class="line">    <span class="comment">// 自定义类型（format=user 对应 application/x-user 类型）</span></span><br><span class="line">    mediaTypes.put(<span class="string">&quot;user&quot;</span>, MediaType.parseMediaType(<span class="string">&quot;application/x-user&quot;</span>));</span><br><span class="line">    <span class="comment">// 新增参数策略</span></span><br><span class="line">    <span class="type">ParameterContentNegotiationStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParameterContentNegotiationStrategy</span>(mediaTypes);</span><br><span class="line">    <span class="comment">/* 注意如果不添加其它策略则只能使用参数策略，也可继续新增基于请求头的策略 */</span></span><br><span class="line">    <span class="comment">// HeaderContentNegotiationStrategy headerContentNegotiationStrategy = new HeaderContentNegotiationStrategy();</span></span><br><span class="line">    <span class="comment">// 设置内容协商策略</span></span><br><span class="line">    configurer.strategies(Arrays.asList(strategy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>或者使用配置方式：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">contentnegotiation:</span></span><br><span class="line">      <span class="attr">favor-parameter:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">media-types:</span></span><br><span class="line">        &#123; <span class="attr">user:</span> <span class="string">application/x-user</span> &#125;</span><br></pre></td></tr></table></figure><p>这样我们只需在请求中添加 <strong>format&#x3D;user</strong> 则表示客户端需要接收的类型为 application&#x2F;x-user 类型。</p><h3 id="视图解析"><a href="#视图解析" class="headerlink" title="视图解析"></a>视图解析</h3><h4 id="Thymeleaf-模板："><a href="#Thymeleaf-模板：" class="headerlink" title="Thymeleaf 模板："></a>Thymeleaf 模板：</h4><blockquote><p>  现代化、服务端 Java 模板引擎</p><p>  <a href="https://www.thymeleaf.org/">Thymeleaf 官网：https://www.thymeleaf.org/</a></p><p>  <a href="https://blog.csdn.net/ljk126wy/article/details/90735989">Thymeleaf 使用与语法</a></p></blockquote><h5 id="1-引入-Starter："><a href="#1-引入-Starter：" class="headerlink" title="1. 引入 Starter："></a>1. 引入 Starter：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 Thymeleaf 模板引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-Thymeleaf-使用："><a href="#2-Thymeleaf-使用：" class="headerlink" title="2. Thymeleaf 使用："></a>2. Thymeleaf 使用：</h5><ol><li>SpringBoot 默认帮我们配置好了 Thymeleaf：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration( after = &#123;WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class&#125; )</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;ThymeleafProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;TemplateMode.class, SpringTemplateEngine.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;ReactiveTemplateEngineConfiguration.class, DefaultTemplateEngineConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafAutoConfiguration</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>默认在 <code>resources/templates/</code> 文件夹内的 <code>.html</code> 页面文件将会被 Thymeleaf 模板引擎解析。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties( prefix = &quot;spring.thymeleaf&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Thymeleaf 模版页面中的 html 标签上需要声明 Thymeleaf 的命名空间：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="视图解析原理："><a href="#视图解析原理：" class="headerlink" title="视图解析原理："></a>视图解析原理：</h4><ol><li>SpringMvc 处理返回值时，当返回值是一个字符串时会被 <code>ViewNameMethodReturnValueHandler</code> 处理器处理：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ViewNameMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodReturnValueHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; paramType = returnType.getParameterType();</span><br><span class="line">        <span class="comment">// 返回值是否为空或者一个字符串</span></span><br><span class="line">        <span class="keyword">return</span> Void.TYPE == paramType || CharSequence.class.isAssignableFrom(paramType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleReturnValue</span><span class="params">(<span class="meta">@Nullable</span> Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (returnValue <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> returnValue.toString();</span><br><span class="line">            mavContainer.setViewName(viewName); <span class="comment">// 将所有数据都存放在了 ModelAndViewContainer 中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.isRedirectViewName(viewName)) &#123; <span class="comment">// 是否要重定向</span></span><br><span class="line">                mavContainer.setRedirectModelScenario(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnValue != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Unexpected return type: &quot;</span> + returnType.getParameterType().getName() + <span class="string">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isRedirectViewName</span><span class="params">(String viewName)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否需要重定向</span></span><br><span class="line">        <span class="keyword">return</span> viewName.startsWith(<span class="string">&quot;redirect:&quot;</span>) || PatternMatchUtils.simpleMatch(<span class="built_in">this</span>.redirectPatterns, viewName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Controller 方法的参数是一个 <strong>自定义类型对象</strong> 时会默认 <strong>自动将它存放在 ModelAndViewContainer</strong> 中。</li><li>任何目标方法执行完成以后都会返回 ModelAndView （数据与视图）。</li><li>当你的 ModelAndView 没有设置 viewName 时是给你使用默认的 viewName（值为当前 Controller 方法的请求路径，如 RquestMapping(“login”) 那么视图就是 login）。</li><li>由 <code>DispatcherServlet</code> 的 <code>processDispatchResult</code> 方法处理派发结果（处理页面该如何响应）。</li><li>它会执行 <code>render(mv, request, response)</code> 渲染页面操作，遍历所有 <code>ViewResolver</code> 找到对应视图解析器得到相应的 View 对象（定义了页面渲染逻辑，如重定向是 <strong>RedirectView</strong> ），最后调用 View 的 render 方法进行页面渲染工作。<ul><li>返回值以 <strong>forward</strong> 开头：<strong>InternalResourceView</strong> 中 request 原生转发请求</li><li>返回值以 <strong>redirect</strong> 开头：<strong>RedirectView</strong> 中 request 原生重定向请求</li><li>普通字符串：<strong>new ThymeleafView()</strong></li></ul></li></ol><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><h4 id="HandlerInterceptor："><a href="#HandlerInterceptor：" class="headerlink" title="HandlerInterceptor："></a>HandlerInterceptor：</h4><ul><li>拦截器 <code>HandlerInterceptor</code> 接口：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 预先处理(执行目标方法之前)</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 是否放行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标方法执行完成后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">    <span class="comment">// 请求处理完成后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用拦截器："><a href="#使用拦截器：" class="headerlink" title="使用拦截器："></a>使用拦截器：</h4><ol><li>实现 <code>HandlerInterceptor</code> :</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 登录成功放行</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;请登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/success&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置拦截器：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123; <span class="comment">// WebMvcConfigurer 中</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 1. 实现添加拦截器方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>()) <span class="comment">// 2. 添加拦截器</span></span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 3. 拦截路径</span></span><br><span class="line">                <span class="comment">// 4. 放行路径（排除）</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/login&quot;</span>,</span><br><span class="line">                        <span class="comment">// 由于 /** 拦截了包括静态资源的请求因此需要放行静态资源</span></span><br><span class="line">                        <span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/html/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>); <span class="comment">// 或为静态资源配置访问前缀，再放行此前缀下的所有请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拦截器原理："><a href="#拦截器原理：" class="headerlink" title="拦截器原理："></a>拦截器原理：</h4><ol><li>根据当前请求，找到 mappedHandler 为 <code>HandlerExecutionChain</code> 它拿到了可以处理请求的 Handler 和相关的拦截器。</li><li>之后拿到了相关的适配器（HandlerAdapter），最后使用适配器来执行目标方法。但在执行目标方法之前还有一个前置步骤 <code>applyPreHandle</code> 它会来执行我们拦截器的 <code>preHandle</code> 方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; <span class="keyword">return</span>; &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>applyPreHandle</code> 会先 <strong>正序</strong> 挨个执行拦截器的 <code>preHandle</code> 方法，如果当前拦截器返回 true 这执行下一个。</li><li>如果拦截器 <code>preHandle</code> 返回 false 会执行 <code>triggerAfterCompletion</code> 方法，它会 <strong>逆序</strong> 执行 <strong>已经触发了的拦截器</strong> 的 <code>afterCompletion</code> 方法，并且 <code>applyPreHandle</code> 返回 false。</li><li>因此如果任何一个拦截器返回 false ，则 <code>applyPreHandle</code> 返回 false 将直接 return 不能执行目标方法。</li><li>如果成功执行了目标方法，之后还会 <strong>倒序</strong> 执行所有拦截器的 <code>postHandle</code> 方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure><ol start="7"><li>并且注意 <strong>前任何步骤报错</strong> 都将执行 <code>triggerAfterCompletion</code> 方法。</li><li>最后在页面渲完成以后，也会触发 <code>triggerAfterCompletion</code> 方法。</li></ol><h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><h4 id="文件上传：-1"><a href="#文件上传：-1" class="headerlink" title="文件上传："></a>文件上传：</h4><ol><li>表单设置 <code>method=&quot;post&quot;</code> 与 <code>enctype=&quot;multipart/form-data&quot;</code> ：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    file: &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span>&gt; &lt;br/&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt; 提交 &lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>接收文件：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">( <span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile file )</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file.isEmpty())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">File</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users&quot;</span>, UUID.randomUUID() + fileName);</span><br><span class="line">        file.transferTo(saveFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@RequestParam</code> 也能接收 MultipartFile 类型，一般接收基本类型和 String。</p><p><code>@RequestPart</code> 一般接收 multipart&#x2F;form-data 表单数据，适用于复杂的请求域像 JSON，XML。</p><ol start="3"><li>相关配置（MultipartAutoConfiguration.class）：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 上传单个文件大小上限</span><br><span class="line">spring.servlet.multipart.max-file-size=10MB</span><br><span class="line"># 整个请求的大小上限</span><br><span class="line">spring.servlet.multipart.max-request-size=100MB</span><br></pre></td></tr></table></figure><h4 id="原理解析："><a href="#原理解析：" class="headerlink" title="原理解析："></a>原理解析：</h4><ol><li>SpringBoot 对文件上传的自动配置封装在了 <code>MultipartAutoConfiguration</code> 中，它自动帮我们配置了 <code>StandardServletMultipartResolver</code> 文件上传解析器。</li><li>在 <code>DispatcherServlet</code> 的 <code>doDispatch</code> 中获取 <code>mappedHandler</code> 处理器之前会先解析请求是否是上传文件请求（根据请求类型是否是 <code>multipart/</code> 来判断）。</li><li>如果是文件上传请求，文件上传解析器会将 <strong>原生请求(request)</strong> 封装为 <code>MultipartHttpServletRequest</code> 继续向下执行。</li><li>最终参数解析器将请求中的文件内容封装成 <code>MultipartFile</code> 。</li></ol><h3 id="错误处理："><a href="#错误处理：" class="headerlink" title="错误处理："></a>错误处理：</h3><h4 id="默认机制："><a href="#默认机制：" class="headerlink" title="默认机制："></a>默认机制：</h4><ul><li>默认情况下 SpringBoot 提供 <code>/error</code> 处理所有错误映射，如果是浏览器会响应一个 Whitelabel 的 <strong>HTML</strong> 视图，其它客户端会生产 <strong>JSON</strong> 响应。</li><li>在任何静态资源文件夹中 <code>error/</code> 目录下以 <strong>4xx</strong> 或 <strong>5xx</strong> 开头页面会在发生相应错误时被自动解析并返回。</li></ul><h4 id="自定义异常处理："><a href="#自定义异常处理：" class="headerlink" title="自定义异常处理："></a>自定义异常处理：</h4><ol><li><code>@ControllerAdvice</code> + <code>@ExceptionHandler</code> 处理全局异常：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 处理所有 controller 异常的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 指定方法处理哪些异常（不指定则处理所有）</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123; NullPointerException.class, ArithmeticException.class &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handlerException</span><span class="params">( Exception e )</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 对异常进行处理并返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@ExceptionHandler</code> 还能在 <code>Controller</code> 中使用，处理该 Controller 中所有或者指定的异常。</p></li><li><p>优先使用 Controller 中 <code>@ExceptionHandler</code> 方法处理，且匹配错误类型范围更小的优先。</p></li></ul><ol start="2"><li><code>@ResponseStatus</code> 自定义异常：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义异常，value 请求响应返回的状态码，reason 错误信息</span></span><br><span class="line"><span class="meta">@ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = &quot;请求错误&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>HandlerExceptionResolver</code> 自定义异常解析器：</li></ol><p>因为我们自定义异常解析器的组件创建会比它默认的解析器后创建，而一般异常都被默认的解析器处理了轮不到我们自定义的解析器，因此我们需要提升自定义解析器创建的优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span> <span class="comment">// 设置创建该组件的优先级，数字越小优先级越高</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 继承 HandlerExceptionResolver 且添加到组件中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerExceptionResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                         HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                         Object handler, Exception ex)</span> &#123;</span><br><span class="line">        <span class="comment">/* 解析过程 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常处理原理："><a href="#异常处理原理：" class="headerlink" title="异常处理原理："></a>异常处理原理：</h4><ul><li><code>ErrorMvcAutoConfiguration</code> 自动配置了异常处理规则，给容器中存放了一些组件 errorAttributes（ <code>DefaultErrorAttributes.class</code> ） 组件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultErrorAttributes <span class="keyword">implements</span> <span class="title class_">ErrorAttributes</span>, HandlerExceptionResolver</span><br></pre></td></tr></table></figure><p><code>ErrorAttributes</code> 定义了错误页面中包含的数据。</p><ul><li>basicErrorController( <code>BasicErrorController</code> ) 组件，默认处理 <code>/error</code> 请求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.error.path 没有配置值时默认使用 error.path 同理默认 /error （springEl 表达式）</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicErrorController</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorController</span></span><br></pre></td></tr></table></figure><p>其中返回 HTML 页面的请求方法会返回 <code>ModelAndView(&quot;error&quot;, model)</code> ，通过 <code>BeanNameViewResolver</code> 视图解析器，按照 <strong>视图名作为组件的 ID</strong> 去容器中寻找 <strong>ID 为 error 的 View 组件</strong> 。（还有一个返回 JSON 的请求方法）</p><ul><li>conventionErrorViewResolver（ <code>DefaultErrorViewResolver</code> ）组件，发生错误它会以 Http 状态码 作为视图名（404、4XX、5XX）。</li></ul><h4 id="异常处理流程："><a href="#异常处理流程：" class="headerlink" title="异常处理流程："></a>异常处理流程：</h4><ol><li><p>doDispatch 中执行目标方法期间发生任何异常都被 catch 捕获并将异常对象保存到 <code>Object dispatchException</code> 中。</p></li><li><p>在执行 processDispatchResult 视图解析时将处理异常，由 <code>processHandlerException</code> 方法处理 handler 发生的异常并返回 ModelAndView。它会遍历所有的 <code>HandlerExceptionResolver</code> 处理器异常解析器看谁能够处理当前异常。</p></li><li><p>默认是没有能够处理异常的解析器其中 <code>DefaultErrorAttributes</code> 只会将错误信息保存到请求域中，其它的解析器只在特定的情况发挥作用（如有 @ExceptionHandler 注解等）。</p></li><li><p>如果没有任何解析器能够处理当前异常最终将发送 <code>/error</code> 请求，并被 <code>BasicErrorController</code> 中的方法处理。它将遍历所有的 ErrorViewResolver 错误视图解析器其中 <code>DefaultErrorViewResolver</code> 将返回错误页面视图。</p></li></ol><h3 id="web-原生组件："><a href="#web-原生组件：" class="headerlink" title="web 原生组件："></a>web 原生组件：</h3><p><strong>注意原生组件不会触发 SpringBoot 的拦截器等功能。</strong></p><h4 id="ServletComponentScan："><a href="#ServletComponentScan：" class="headerlink" title="@ServletComponentScan："></a>@ServletComponentScan：</h4><ol><li>在主类中使用 <code>@ServletComponentScan</code> 指定 servlet、Filter、Listener 组件存放的包位置：</li></ol><p>默认将扫描并注入此注解所在包以及所有子类包中含有 <code>@WebServlet</code> 、 <code>@WebFilter</code> 、 <code>@WebListener</code> 注解的原生组件，basePackages 属性指定扫描的包位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描并自动注入元素 servlet 组件</span></span><br><span class="line"><span class="meta">@ServletComponentScan(basePackages = &quot;top.ruoxijun.servlet&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;...</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>@ServletComponentScan</code> 注解能扫描的包内创建原生 servlet 即可：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/my&quot;)</span> <span class="comment">// 地址</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;this is MyServlet.class&quot;</span>); <span class="comment">// get 响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>同理 Filter ：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /* 是 java 中表示所有，spring 使用 /** 表示</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/css/*&quot;)</span> <span class="comment">// 拦截的路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123; Filter.<span class="built_in">super</span>.destroy(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Listener：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 项目初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 项目销毁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xxxRegistrationBean："><a href="#xxxRegistrationBean：" class="headerlink" title="xxxRegistrationBean："></a>xxxRegistrationBean：</h4><p>推荐使用在配置类中向 SpringBoot 注入 <code>ServletRegistrationBean</code> 、 <code>FilterRegistrationBean</code> 、 <code>ServletListenerRegistrationBean</code> 类型组件的方式来分别添加 servlet、Filter、Listener：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不建议使用 proxyBeanMethods = false 属性值</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRegistrationBean</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">myServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>(); <span class="comment">// 自定义 servlet 对象</span></span><br><span class="line">        <span class="comment">// 注册 servlet 并设置访问路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(myServlet, <span class="string">&quot;/my&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">myFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyFilter</span> <span class="variable">myFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFilter</span>(); <span class="comment">// 自定义 filter 对象</span></span><br><span class="line">        <span class="comment">// 注册 filter 并拦截 ServletRegistrationBean 中 servlet 的请求</span></span><br><span class="line">        <span class="comment">// return new FilterRegistrationBean(myFilter, myServlet());</span></span><br><span class="line">        FilterRegistrationBean&lt;MyFilter&gt; filterRegistrationBean =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(myFilter);</span><br><span class="line">        <span class="comment">// 指定拦截请求</span></span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/css/*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean <span class="title function_">myListener</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 注册自定义监听器</span></span><br><span class="line">        <span class="type">MyListener</span> <span class="variable">myListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>(myListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DispatcherServlet-实现原理"><a href="#DispatcherServlet-实现原理" class="headerlink" title="DispatcherServlet 实现原理:"></a>DispatcherServlet 实现原理:</h4><ol><li>在 <code>DispatcherServletAutoConfiguration</code> 中给容器配置并注入了 <code>dispatcherServlet</code> 组件，且属性绑定在 <code>WebMvcProperties</code> 中对应的配置项为 <code>spring.mvc</code>。</li><li>其中另一个配置类中给容器配置注入了 <code>DispatcherServletRegistrationBean</code> 组件，它继承至 <code>ServletRegistrationBean&lt;DispatcherServlet&gt;</code> ，且配置器映射路径为 <code>/</code> (对应配置： <code>spring.mvc.servlet.path</code> )。</li></ol><ul><li>context-path 配置项目上下文访问的前缀，path 配置的是 dispatcherServlet 拦截的路径。</li></ul><p>多个 servlet 处理同一层路径采用精确优先原则（如有 <code>/my/</code> 与 <code>/my/2</code> 两个 servlet ,&#x2F;my&#x2F;1将进入第1个）。</p><p>由于 SpringBoot 的 web 都基于 dispatcherServlet 的 <code>/</code> 实现,因此我们自定义注入的原生 web 组件是直接执行，不会通过 SpringBoot 的相关功能（如拦截器）。</p><h3 id="嵌入式-Servlet-容器："><a href="#嵌入式-Servlet-容器：" class="headerlink" title="嵌入式 Servlet 容器："></a>嵌入式 Servlet 容器：</h3><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><ol><li>在 <code>spring-boot-starter-web</code> 包中默认引入 Tomcat 的包。</li><li>配置类 <code>ServletWebServerFactoryAutoConfiguration</code> 它导入了 <code>ServletWebServerFactoryConfiguration</code> 组件其中它会根据添加动态判断系统导入了那个 web 服务器的包，注入相应的服务器工厂组件（ <code>TomcatServletWebServerFactory</code> 、 <code>JettyServletWebServerFactory</code> 、 <code>UndertowServletWebServerFactory</code> ）。</li><li><code>ServletWebServerApplicationContext</code> 它会在容器启动时寻找 <code>ServletWebServerFactory</code> （servlet web 服务器工厂），利用服务器工厂创建除服务器并启动。</li></ol><h4 id="切换或去除嵌入式服务器："><a href="#切换或去除嵌入式服务器：" class="headerlink" title="切换或去除嵌入式服务器："></a>切换或去除嵌入式服务器：</h4><ol><li>在 pom.xml 中引入 web 包时排除 Tomcat 依赖的包：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>引入你需要的服务器包，SpringBoot 已配置好版本号不需要填写版本号直接引入即可。</li></ol><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ul><li>添加依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot JSR303数据校验 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Validated</span>  <span class="comment">// 数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="comment">// name 必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用注解：</li></ul><table><thead><tr><th align="center">注解</th><th align="center">验证的数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@AssertFalse</td><td align="center">Boolean,boolean</td><td align="center">值必须是false</td></tr><tr><td align="center">@AssertTrue</td><td align="center">Boolean,boolean</td><td align="center">值必须是true</td></tr><tr><td align="center">@NotNull</td><td align="center">任意类型</td><td align="center">值不能是null</td></tr><tr><td align="center">@Null</td><td align="center">任意类型</td><td align="center">值必须是null</td></tr><tr><td align="center">@Min</td><td align="center">BigDecimal、BigInteger、byte、short、int、long、double 以及任何Number或CharSequence子类型</td><td align="center">大于等于@Min指定的值</td></tr><tr><td align="center">@Max</td><td align="center">同上</td><td align="center">小于等于@Max指定的值</td></tr><tr><td align="center">@DecimalMin</td><td align="center">同上</td><td align="center">大于等于@DecimalMin指定的值（超高精度）</td></tr><tr><td align="center">@DecimalMax</td><td align="center">同上</td><td align="center">小于等于@DecimalMax指定的值（超高精度）</td></tr><tr><td align="center">@Digits</td><td align="center">同上</td><td align="center">限制整数位数和小数位数上限</td></tr><tr><td align="center">@Size</td><td align="center">字符串、Collection、Map、数组等</td><td align="center">长度在指定区间之内，如字符串长度、集合大小等</td></tr><tr><td align="center">@Past</td><td align="center">如 java.util.Date, java.util.Calendar 等日期类型</td><td align="center">值必须比当前时间早</td></tr><tr><td align="center">@Future</td><td align="center">同上</td><td align="center">值必须比当前时间晚</td></tr><tr><td align="center">@NotBlank</td><td align="center">CharSequence及其子类</td><td align="center">值不为空，在比较时会去除字符串的首位空格</td></tr><tr><td align="center">@Length</td><td align="center">CharSequence及其子类</td><td align="center">字符串长度在指定区间内</td></tr><tr><td align="center">@NotEmpty</td><td align="center">CharSequence及其子类、Collection、Map、数组</td><td align="center">值不为null且长度不为空（字符串长度不为0，集合大小不为0）</td></tr><tr><td align="center">@Range</td><td align="center">BigDecimal、BigInteger、CharSequence、byte、short、int、long 以及原子类型和包装类型</td><td align="center">值在指定区间内</td></tr><tr><td align="center">@Email</td><td align="center">CharSequence及其子类</td><td align="center">值必须是邮件格式</td></tr><tr><td align="center">@Pattern</td><td align="center">CharSequence及其子类</td><td align="center">值需要与指定的正则表达式匹配</td></tr><tr><td align="center">@Valid</td><td align="center">任何非原子类型</td><td align="center">用于验证对象属性</td></tr></tbody></table><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><blockquote><p>  <a href="https://swagger.io/">Swagger官网：https://swagger.io/</a></p><ol><li>RestFul API 文档在线生成工具</li><li>可直接运行，支持在线测试</li></ol></blockquote><h4 id="1-swagger-2-版："><a href="#1-swagger-2-版：" class="headerlink" title="1. swagger 2 版："></a>1. swagger 2 版：</h4><ul><li>pom.xml依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger2 API 文档工具 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Swagger2Config配置类：</li></ul><p><strong>请产考下方swagger3 配置</strong> ，swagger2 启动依赖为 <code>@EnableSwagger2</code> ,文档类型为<code>DocumentationType.SWAGGER_2</code> 其它使用无太大变化。</p><p>浏览器访问地址为： <strong>项目地址&#x2F;swagger-ui.html</strong> </p><h4 id="2-swagger-3-版："><a href="#2-swagger-3-版：" class="headerlink" title="2. swagger 3 版："></a>2. swagger 3 版：</h4><ul><li>swagger 3 依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Swagger3Config配置类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@EnableSwagger2 // 开启swagger2</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span> <span class="comment">// 开启swagger3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123; <span class="comment">// 配置 Docket bean实例</span></span><br><span class="line">       <span class="comment">// return new Docket(DocumentationType.SWAGGER_2) // swagger2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30) <span class="comment">// swagger3</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(<span class="literal">true</span>) <span class="comment">// 是否开启 swagger</span></span><br><span class="line">                .groupName(<span class="string">&quot;分组1&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">/** RequestHandlerSelectors 指定扫描方式的类</span></span><br><span class="line"><span class="comment">                 * basePackage：指定扫描需要生成api的包</span></span><br><span class="line"><span class="comment">                 * withClassAnnotation：扫描类上有指定注解的类(如GetMapping.class)</span></span><br><span class="line"><span class="comment">                 * withMethodAnnotation：扫描方法上有指定注解的方法</span></span><br><span class="line"><span class="comment">                 * any：全部扫描</span></span><br><span class="line"><span class="comment">                 * none：不扫描</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;ruoxijun.cn&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/find**&quot;</span>)) <span class="comment">// 请求过滤</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置 swagger 网页的一些显示信息</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>( <span class="comment">// 作者信息</span></span><br><span class="line">                <span class="string">&quot;ruoxijun&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://ruoxijun.cn/&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1460662245@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(</span><br><span class="line">                <span class="string">&quot;项目 Api 标题&quot;</span>,</span><br><span class="line">                <span class="string">&quot;项目 Api 描述&quot;</span>,</span><br><span class="line">                <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://ruoxijun.cn/&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要有多个分组时就配置多个 docketBean 即可</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;分组2&quot;</span>); <span class="comment">// 分组名（其它配置暂不写了）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问地址为： <strong>项目地址&#x2F;swagger-ui&#x2F;index.html</strong></p><h4 id="3-常用注解："><a href="#3-常用注解：" class="headerlink" title="3.常用注解："></a>3.常用注解：</h4><ol><li>conllection 类常用注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;conllection 类说明&quot;)</span> <span class="comment">// conllection 类描述</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;请求方法作用&quot;,notes = &quot;请求方法备注说明&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123; // 方法参数集，required 表示参数是否必须</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;参数名&quot;,value = &quot;参数描述&quot;,required = true),</span></span><br><span class="line"><span class="meta">    @ApiImplicitParam(name = &quot;v&quot;,value = &quot;value值&quot;,required = true)</span></span><br><span class="line"><span class="meta">&#125;)</span> <span class="comment">// 参数较少时也可在方法参数旁添加：@ApiParam(&quot;参数描述&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiResponses(&#123; // 方法响应 code 描述，response 抛出的异常类</span></span><br><span class="line"><span class="meta">    @ApiResponse(code = 200,message = &quot;返回数据成功&quot;),</span></span><br><span class="line"><span class="meta">    @ApiResponse(code = 400,message = &quot;返回数据失败&quot;,response = ParamsException.class)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实体类常用注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span> <span class="comment">// 类描述</span></span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span> <span class="comment">// 成员变量描述</span></span><br></pre></td></tr></table></figure><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      <span class="comment">// 设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库开发"><a href="#数据库开发" class="headerlink" title="数据库开发"></a>数据库开发</h2><h3 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h3><h4 id="1-添加依赖："><a href="#1-添加依赖：" class="headerlink" title="1. 添加依赖："></a>1. 添加依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql 驱动 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;version&gt; 8.0.20 &lt;/version&gt; 不提倡直接修改版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 spring-boot-starter-jdbc 中引入了 <strong>HikariDataSource</strong> 数据源（数据库连接池）、jdbc、spring 事务包，因此我们需要操作什么数据库导入相应驱动即可。</li><li>SpringBoot 默认数据库驱动版本一般与本机数据库版本不一致，建议修改版本配置与本机一致：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-数据库配置："><a href="#2-数据库配置：" class="headerlink" title="2. 数据库配置："></a>2. 数据库配置：</h4><h5 id="自动配置分析："><a href="#自动配置分析：" class="headerlink" title="自动配置分析："></a>自动配置分析：</h5><ol><li><code>DataSourceAutoConfiguration</code> 数据源自动配置</li></ol><ul><li>数据源相关属性都与 <code>DataSourceProperties</code> 绑定，对应配置 <code>spring.datasource</code> 的相关属性。</li><li>数据库连接池默认的配置在我们没有配置 <code>DataSource</code> 时才会自动配置，且默认配置使用 <code>HikariDataSource</code> 连接池。</li></ul><ol start="2"><li><code>DataSourceTransactionManagerAutoConfiguration</code> 事务管理器自动配置</li></ol><h5 id="数据库相关配置："><a href="#数据库相关配置：" class="headerlink" title="数据库相关配置："></a>数据库相关配置：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_crud?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">88888888</span></span><br><span class="line"><span class="comment">#    type: com.zaxxer.hikari.HikariDataSource 配置数据源（默认 hikari）</span></span><br></pre></td></tr></table></figure><h4 id="3-测试使用："><a href="#3-测试使用：" class="headerlink" title="3. 测试使用："></a>3. 测试使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// lombok</span></span><br><span class="line"><span class="meta">@SpringBootTest</span> <span class="comment">// spring-boot-starter-test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBoot01Test</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataSourceTest</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(<span class="string">&quot;select * from book&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;查询结果 &#123;&#125; &quot;</span>, maps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Druid："><a href="#Druid：" class="headerlink" title="Druid："></a>Druid：</h3><blockquote><p><a href="https://github.com/alibaba/druid">项目官方地址：https://github.com/alibaba/druid</a></p><p>官方介绍：Druid 是 Java 语言中最好的数据库连接池，Druid 能够提供强大的监控和扩展功能。</p></blockquote><h4 id="1-使用-druid："><a href="#1-使用-druid：" class="headerlink" title="1. 使用 druid："></a>1. 使用 druid：</h4><h5 id="1-引入依赖："><a href="#1-引入依赖：" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如需使用 druid 数据监控时需要用到 log4j --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置-druid："><a href="#2-配置-druid：" class="headerlink" title="2. 配置 druid："></a>2. 配置 druid：</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot-vue-manage?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall</span> <span class="comment"># stat：SQL 监控，wall：SQL 防火墙</span></span><br></pre></td></tr></table></figure><ol><li>要使用 druid 数据源，由前可知需要注入 druid 的 <code>DataSource</code> 来使默认的数据源失效（也支持配置文件中 <code>spring.dataSource.type</code> 属性配置数据源）。</li><li>想要开启 druid 监控与统计数据的页面需要配置 <code>StatViewServlet</code> 。</li><li>页面开启后 <code>DruidDataSource</code> 中配置 <code>filters</code> 属性开启各类监控，值 stat 开启 SQL 监控，值 wall 开启 SQL 防火墙。</li><li>配置 <code>WebStatFilter</code> 可开启 web 监控，并设置统计和需要排除的请求。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">// 配置 druid 数据源，并将此数据源属性与配置绑定</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加 StatViewServlet 开启数据统计页面</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StatViewServlet</span> <span class="variable">viewServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatViewServlet</span>();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(viewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加初始化参数并设置监控登录页面的账户</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 开启 web 监控</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebStatFilter</span> <span class="variable">webStatFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebStatFilter</span>();</span><br><span class="line">        FilterRegistrationBean&lt;WebStatFilter&gt; registrationBean</span><br><span class="line">                = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class="line">        <span class="comment">// 设置连接路径</span></span><br><span class="line">        registrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">        <span class="comment">// 添加初始化参数，exclusions 设置排除的请求，不加如统计</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中访问 <strong>项目地址&#x2F;druid 或 项目地址&#x2F;druid&#x2F;login.html</strong> 即可查看监控页面。</p><h4 id="2-druid-starter"><a href="#2-druid-starter" class="headerlink" title="2. druid starter:"></a>2. druid starter:</h4><h5 id="1-引入-druid-的-starter："><a href="#1-引入-druid-的-starter：" class="headerlink" title="1. 引入 druid 的 starter："></a>1. 引入 druid 的 starter：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.14</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>除了引入 druid 包手动配置以外，druid 提供了 druid-spring-boot-starter 它引入了 druid、slf4j、以及一个自动配置 druid 的包，其中设置了大量默认配置项，也可以在配置文件中自定义配置值。</p><h5 id="2-druid-starter-配置："><a href="#2-druid-starter-配置：" class="headerlink" title="2. druid starter 配置："></a>2. druid starter 配置：</h5><p><a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">druid&#x2F;druid-spring-boot-starter 使用方法与详细配置</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot-vue-manage?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启监控页面</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span> <span class="comment"># 登录监控页面账号</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">web-stat-filter:</span> <span class="comment"># web 监控</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span>  <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall</span> <span class="comment"># stat：SQL 监控，wall：SQL 防火墙，可单独详细配置</span></span><br><span class="line">      <span class="attr">aop-patterns:</span> <span class="string">top.ruoxijun.bean.*</span> <span class="comment"># Spring 监控 AOP 切入点</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis："><a href="#Mybatis：" class="headerlink" title="Mybatis："></a>Mybatis：</h3><h4 id="1-引入依赖：-1"><a href="#1-引入依赖：-1" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加pagehelper分页插件集成依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis-spring-boot-starter 中已经引入 jdbc starter 场景。</li></ul><h4 id="2-添加配置："><a href="#2-添加配置：" class="headerlink" title="2. 添加配置："></a>2. 添加配置：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 指定原生 mybatis 总配置文件位置（ classpath: 表示 resources 文件夹下 ）</span></span><br><span class="line">  <span class="comment"># config-location: classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span> <span class="comment"># mapper.xml 位置</span></span><br><span class="line">  <span class="comment"># 此配置项中包含所有全局配置，且不能与 config-location 配置同时存在</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 驼峰命名与下划线匹配</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">top.ruoxijun.entity</span> <span class="comment"># 为此包下的基类自动取别名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pagehelper:</span> <span class="comment"># 分页插件配置</span></span><br><span class="line">  <span class="attr">helper-dialect:</span> <span class="string">mysql</span> <span class="comment"># 使用mysql</span></span><br></pre></td></tr></table></figure><h4 id="3-基础使用："><a href="#3-基础使用：" class="headerlink" title="3. 基础使用："></a>3. 基础使用：</h4><ol><li>创建 mapper 接口：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span> <span class="comment">// 声明此类是 mybatis 的 mapper 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123; List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>; &#125;</span><br></pre></td></tr></table></figure><p>每一个 mapper 类都要加一个 <code>@Mapper</code> 注解表明它是一个 mapper 接口，也可以选择在启动类中利用 <code>@MapperScan(&quot;top.ruoxijun.mapper&quot;)</code> 直接扫描整个 mapper 文件夹。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;top.ruoxijun.mapper&quot;)</span> <span class="comment">// 扫描mapper文件夹中的所有mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123; SpringApplication.run(MainApplication.class,args); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用扫描可能出现在使用 <code>@Autowired</code> 注解自动装配 mapper 对象时在 idea 编辑器中报红显示找不到对象，但是放心运行时是没有问题的。可以不理也可用以下方法解决：</p><ul><li><p>使用 <code>@Resource</code> 注解装配 mapper 对象。</p></li><li><p>在 mapper 接口上使用 <code>@Repository </code> 标识为 bean 。</p></li><li><p>关闭或修改IDE的代码检查</p></li></ul><ol start="2"><li>在 <em>resources</em> 文件夹下新建 mapper-locations 配置中的文件夹，然后建立 mapper 接口的对应 mapper.xml 即可。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;对应的 Mapper 文件位置&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis-Plus："><a href="#Mybatis-Plus：" class="headerlink" title="Mybatis Plus："></a>Mybatis Plus：</h3><h4 id="1-引入依赖：-2"><a href="#1-引入依赖：-2" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h4><p><a href="https://baomidou.com/">MyBatis-Plus 官网地址 (baomidou.com)</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>它已经引入了 mybatis 与 jdbc 等场景。</li><li>配置与 <code>MybatisPlusProperties</code> 绑定（ <code>mybatis-plus</code> ）。</li><li>配置 mapper.xml 文件位置属性 <code>mapperLocations</code> （ <code>mybatis-plus.mapper-locations</code> ） 默认值 <code>classpath*:/mapper/**/*.xml</code> 表示任意工程路径下所有 mapper 文件夹的下 xml 都是 mapper.xml （即不仅是当前项目 classpath 还包括 jar 包该路径下）。</li></ul><h4 id="2-简单实例："><a href="#2-简单实例：" class="headerlink" title="2. 简单实例："></a>2. 简单实例：</h4><ol><li>在 <code>MainApplication</code> 类上使用 <code>@MapperScan(&quot;top.ruoxijun.mapper&quot;)</code> 指定扫描的 mapper 接口包（也可使用 @Mapper 注解方式）。</li><li>编写 mapper 接口并继承 <code>BaseMapper&lt;User&gt;</code> 泛型是你要操作的表对应的基类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在 <code>BaseMapper</code> 中已经为我们声明了一些常用的数据操作方法，无需编写 mapper.xml 文件，即可获得 crud 功能（当它满足不了某些需求时可新建方法与 xml 进行自定义）。</p></li><li><p>默认基类的属性在表中必须有对应字段否则报错，如果属性无对应字段可在该属性上标注 <code>@TableField(exist = false)</code> 表示该属性在表中不存在。</p></li></ul><ol start="3"><li>实现 Service 业务类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 IService 接口，泛型为要操作的基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// 1. 标注 @Service 实现 service 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="comment">// 2. 继承 ServiceImpl 泛型分别为操作的 mapper 与基类</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>实现 Controller 请求：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;user&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">user</span><span class="params">( <span class="meta">@RequestParam(value = &quot;pN&quot;, defaultValue = &quot;1&quot;)</span> Integer pageNum )</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;User&gt; users = userService.list(); <span class="comment">// 查询表中所有数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分页查询</span></span><br><span class="line">        Page&lt;User&gt; userPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, <span class="number">2</span>);</span><br><span class="line">        Page&lt;User&gt; page = userService.page(userPage);</span><br><span class="line">        </span><br><span class="line">        map.put(<span class="string">&quot;users&quot;</span>, users);</span><br><span class="line">        map.put(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分页查询还需要使用分页插件（其它插件使用方式同理）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 分页拦截器，已有默认属性可自定义分页属性</span></span><br><span class="line">        <span class="type">PaginationInnerInterceptor</span> <span class="variable">paginationInnerInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis："><a href="#Redis：" class="headerlink" title="Redis："></a>Redis：</h3><ol><li>引入 Redis 场景：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 需要 jedis 操作 Redis 时引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>默认引入了 <strong>Lettuce</strong> 操作 Redis，使用 <strong>jedis</strong> 需要我们手动引入并且在 <code>client-type</code> 配置项中申明想使用的客户端。</li></ul><ol start="2"><li>Redis 配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span> <span class="comment"># springboot 3.x 开始需要 data 配置项</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.166</span> <span class="comment"># 服务器地址</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># 端口</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># 数据库索引</span></span><br><span class="line">      <span class="attr">username:</span> <span class="comment"># 用户名（没有可以去除）</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span> <span class="comment"># 密码</span></span><br><span class="line">      <span class="attr">connect-timeout:</span> <span class="string">10s</span> <span class="comment"># 连接超时时间</span></span><br><span class="line">      <span class="comment"># client-type: jedis # 切换操作 Redis 的客户端</span></span><br><span class="line">      <span class="attr">lettuce:</span> <span class="comment"># redis 客户端（默认 lettuce，还有 jedis）</span></span><br><span class="line">      <span class="attr">pool:</span> <span class="comment"># 连接池配置</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 最大连接数（负数表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">200s</span> <span class="comment"># 最大阻塞等待时间（负数表示没有限制，默认 -1）</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 最大空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 最小空闲连接</span></span><br></pre></td></tr></table></figure><h3 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h3><ul><li>SpringBoot 对事务提供了实现并自动配置我们只需在需要添加事务的方法上添加如下注释即可：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br></pre></td></tr></table></figure><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="简介与使用："><a href="#简介与使用：" class="headerlink" title="简介与使用："></a>简介与使用：</h3><h4 id="1-引入依赖：-3"><a href="#1-引入依赖：-3" class="headerlink" title="1. 引入依赖："></a>1. 引入依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-Junit5："><a href="#2-Junit5：" class="headerlink" title="2. Junit5："></a>2. Junit5：</h4><p>SpringBoot 2.2.0 版本开始引入 JUnit5 作为单元测试默认库，由三个不同子项目的几个不同模块组成<br><code>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</code> 。</p><p><strong>JUnit Platform</strong>: Junit Platform 是在 JVM 上启动测试框架的基础，不仅支持 Junit 自制的测试引擎，其他测试引擎也都可以接入。</p><p><strong>JUnit Jupiter</strong>: JUnit Jupiter 提供了 JUnit5 的新的编程模型，是 JUnit5 新特性的核心。内部包含了一个<strong>测试引擎</strong>，用于在 Junit Platform 上运行。</p><p><strong>JUnit Vintage</strong>: 由于 JUint 已经发展多年，为了照顾老的项目，JUnit Vintage 提供了兼容JUnit4.x,Junit3.x 的测试引擎。</p><ul><li>SpringBoot2.4 以上版本移除了默认对 <strong>JUnit Vintage</strong> 的依赖，如果需要兼容 junit4 需要自行引入：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试兼容 Junit4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hamcrest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hamcrest-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-使用方式："><a href="#3-使用方式：" class="headerlink" title="3. 使用方式："></a>3. 使用方式：</h4><ol><li>分别使用 <code>@SpringBootTest</code> 与 <code>@Test</code> （org.junit.<strong>jupiter</strong>.api.Test）注解标记测试类与测试方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringBootTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>被 <code>@SpringBootTest</code> 标记的类支持  <code>@Autowired</code> 、 <code>@Transactional</code> （标注的测试方法，测试完成后自动回滚） 等 SpringBoot 注解。</li></ol><h3 id="Junit5-常用注解："><a href="#Junit5-常用注解：" class="headerlink" title="Junit5 常用注解："></a>Junit5 常用注解：</h3><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">JUnit 5 官方文档 - 常用注解</a></p><ul><li><strong>@ParameterizedTest</strong> : 表示方法是参数化测试</li><li><strong>@RepeatedTest</strong> : 表示方法可重复执行</li><li><strong>@DisplayName</strong> : 为测试类或者测试方法设置展示名称</li><li><strong>@BeforeEach</strong> : 表示方法在每个单元测试之前执行， <code>@AfterEach</code> （之后）同理</li><li><strong>@BeforeAll</strong> : 表示 <strong>静态方法</strong> 在所有单元测试之前执行， <code>@AfterAll</code> 同理</li><li><strong>@Tag</strong> : 表示单元测试类别，类似于 JUnit4 中的 <code>@Categories</code></li><li><strong>@Disabled</strong> : 表示测试类或测试方法不执行，类似于 JUnit4 中的 <code>@Ignore</code></li><li><strong>@Timeout</strong> : 表示测试方法运行如果超过了指定时间将会返回错误</li><li><strong>@ExtendWith</strong> : 为测试类或测试方法提供扩展类引用</li></ul><h3 id="断言机制："><a href="#断言机制：" class="headerlink" title="断言机制："></a>断言机制：</h3><h4 id="1-简单断言："><a href="#1-简单断言：" class="headerlink" title="1. 简单断言："></a>1. 简单断言：</h4><ul><li>测试方法中前面的断言失败则后面的代码不会执行。</li><li>断言方法一般都是 <code>Assertions</code> 中的静态方法，简单使用方式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals; <span class="comment">// 直接导入静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">simple</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 是否相等，参1 期望值、参2 实际值、参3（可选）错误信息</span></span><br><span class="line">    assertEquals(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;值不相等&quot;</span>);</span><br><span class="line">    <span class="comment">// 是否是同一个对象</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    assertSame(o, o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常用简单断言：</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>两个对象值或两个原始类型值是否相等</td></tr><tr><td>assertNotEquals</td><td>两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>给定的对象引用是否不为 null</td></tr><tr><td>assertArrayEquals</td><td>两个对象或原始类型的数组是否相等</td></tr></tbody></table><h4 id="2-组合断言："><a href="#2-组合断言：" class="headerlink" title="2. 组合断言："></a>2. 组合断言：</h4><ul><li>有需要多个断言全部满足条件时可使用 <code>assertAll</code> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assertAllTest</span><span class="params">()</span>&#123;</span><br><span class="line">    assertAll(<span class="string">&quot;组合断言&quot;</span>, <span class="comment">// 参1（可选）为该组合断言取名字</span></span><br><span class="line">            ()-&gt; assertTrue(<span class="literal">true</span>),</span><br><span class="line">            ()-&gt; assertNotEquals(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-异常断言："><a href="#3-异常断言：" class="headerlink" title="3. 异常断言："></a>3. 异常断言：</h4><ul><li>业务逻辑在某情况下一定出现异常时使用 <code>assertThrows</code> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assertThrowsTest</span><span class="params">()</span>&#123;</span><br><span class="line">    assertThrows(ArithmeticException.class, <span class="comment">// 预期错误类型</span></span><br><span class="line">            ()-&gt; &#123; <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; &#125;,</span><br><span class="line">            <span class="string">&quot;异常成功触发&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-超时断言："><a href="#4-超时断言：" class="headerlink" title="4. 超时断言："></a>4. 超时断言：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timeoutTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//如果测试方法时间超过1s将会异常</span></span><br><span class="line">    Assertions.assertTimeout(Duration.ofMillis(<span class="number">1000</span>), () -&gt; Thread.sleep(<span class="number">500</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-快速失败："><a href="#5-快速失败：" class="headerlink" title="5. 快速失败："></a>5. 快速失败：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shouldFail</span><span class="params">()</span> &#123;</span><br><span class="line">    fail(<span class="string">&quot;This should fail&quot;</span>); <span class="comment">// 直接失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前置条件："><a href="#前置条件：" class="headerlink" title="前置条件："></a>前置条件：</h3><p>assumptions（假设）当不满足某前置条件时测试将不会继续执行但不会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assumeTest</span><span class="params">()</span>&#123;</span><br><span class="line">    assumeTrue(<span class="literal">true</span>, <span class="string">&quot;不是 true&quot;</span>);</span><br><span class="line">    assumingThat(<span class="literal">true</span>, <span class="comment">// 条件满足时执行 Executable 接口</span></span><br><span class="line">        ()-&gt; System.out.println(<span class="string">&quot;是 true&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套测试："><a href="#嵌套测试：" class="headerlink" title="嵌套测试："></a>嵌套测试：</h3><p>在 Java 内部类上标注 <code>@Nested</code> 注解可实现嵌套测试（可无限嵌套），且内部单元测试会激活外部的 <code>@BeforeEach</code> 等（BeforeAll、After…）方法（反之不行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JunitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">NestedTest</span>&#123;</span><br><span class="line">        <span class="comment">// 测试方法或更多内部类嵌套...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数化测试："><a href="#参数化测试：" class="headerlink" title="参数化测试："></a>参数化测试：</h3><ul><li><p><code>@ValueSource</code> : 为参数化测试指定入参来源，支持八大基础类以及 String 类型, Class 类型</p></li><li><p><code>@NullSource</code> : 表示为参数化测试提供一个 null 的入参</p></li><li><p><code>@EnumSource</code> : 表示为参数化测试提供一个枚举入参</p></li><li><p><code>@CsvFileSource</code> ：表示读取指定 CSV 文件内容作为参数化测试入参</p></li><li><p><code>@MethodSource</code> ：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p></li></ul><p>使用 <code>@ParameterizedTest</code> 注解标注方法表示这是一个参数化测试的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = &#123;&quot;1&quot;, &quot;2&quot;&#125;)</span> <span class="comment">// 将值依次传入测试方法中测试</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">valueSourceTest</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    assertNotNull(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(&quot;method&quot;)</span> <span class="comment">// 1. 指定方法名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWithExplicitLocalMethodSource</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    assertNotNull(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 方法必须是 static 且返回流</span></span><br><span class="line"><span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><h3 id="SpringBoot-Actuator"><a href="#SpringBoot-Actuator" class="headerlink" title="SpringBoot Actuator:"></a>SpringBoot Actuator:</h3><ol><li>依赖导入：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>访问路径：</li></ol><p><a href="http://localhost:8080/actuator/">localhost:8080&#x2F;actuator&#x2F;</a> 在此路径下还可以访问更详细的监控端点 <code>/actuator/**</code> ，默认 JMX 暴露所有端点而 web（http） 只默认暴露 <strong>health</strong> (&#x2F;actuator&#x2F;health) 和 <strong>info</strong> 端点。</p><ol start="3"><li>配置：</li></ol><p>常用监控端点（Endpoint）：Health 监控状况、Metrics 运行时指标、Loggers 日志记录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 配置所有端点的默认行为</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">false</span> <span class="comment"># 关闭所有监控端点</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment"># 以 web 方式暴露所有监控端点</span></span><br><span class="line">  <span class="comment"># 配置具体端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启 health 监控端点</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span> <span class="comment"># 开启 health 端点的详细信息显示</span></span><br><span class="line">    <span class="attr">metrics:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启 metrics 端点</span></span><br><span class="line">    <span class="attr">loggers:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>定制 Endpoint （Health、Metrics、Info、Endpoint 等）信息略。</li><li>可视化：<a href="https://github.com/codecentric/spring-boot-admin">spring-boot-admin：https://github.com/codecentric/spring-boot-admin</a></li></ol><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><h3 id="启动原理："><a href="#启动原理：" class="headerlink" title="启动原理："></a>启动原理：</h3><ol><li>在主程序中 <code>SpringApplication.run(MainApplication.class, args)</code> 方法创建了一个 <code>SpringApplication</code> 对象：</li></ol><ul><li><p>保存信息，判断当前应用类型。</p></li><li><p>找到所有的 bootstrapRegistryInitializers 初始启动引导器（在 spring.factories 找）。</p></li><li><p>找到所有的 ApplicationContextInitializer 初始化器（在 spring.factories 找）。</p></li><li><p>找到所有的 ApplicationListener 应用监听器（在 spring.factories 找）。</p></li></ul><ol start="2"><li>执行 <code>SpringApplication</code> 对象的 <code>run</code> 方法：</li></ol><ul><li>记录应用启动时间，创建引导上下文（DefaultBootstrapContext），它会挨个执行之前获取的 <strong>初始启动引导器</strong> 的 initialize 方法完成引导启动器上下文环境设置。</li><li>让当前应用进入 headless（java.awt.headless） 模式。</li><li>获取所有 SpringApplicationRunListeners 运行监听器（在 spring.factories 找），遍历所有的运行监听器并调用它的 <code>starting</code> 方法（监听器执行 <strong>应用开始启动</strong> 事件）。</li><li>保存命令行参数 ApplicationArguments 。</li><li>准备环境 ConfigurableEnvironment：<ul><li>当前上下文有环境信息就获取否则就新创建一个基础环境信息。</li><li>配置环境信息对象，读取所有配置源的配置属性值，绑定环境信息。</li><li>遍历所有的运行监听器并调用它的 <code>environmentPrepared</code> 方法（监听器执行 <strong>环境准备完成</strong> 事件）。</li></ul></li><li>创建 IOC 容器 <code>createApplicationContext()</code> (根据项目类型创建容器)。</li><li>prepareContext 准备 IOC 容器基本信息：<ul><li>applyInitializers 应用初始化器，遍历所有 <strong>初始化器</strong> 对 IOC 容器进行初始化。</li><li>遍历所有的运行监听器并调用它的 <code>contextPrepared</code> 方法（监听器执行 <strong>IOC 容器准备完成</strong> 事件）。</li><li>遍历所有的运行监听器并调用它的 <code>contextLoaded</code> 方法（监听器执行 <strong>IOC 容器已加载</strong> 事件）。</li></ul></li><li>refreshContext 刷新容器，在容器中创建所有需要创建的组件。</li><li>afterRefresh 执行容器刷新后处理。</li><li>遍历所有的运行监听器并调用它的 <code>started</code> 方法（监听器执行 <strong>IOC 容器已启动</strong> 事件）。</li><li>callRunners 调用所有的 runners：<ul><li>获取容器中的 ApplicationRunner 与 CommandLineRunner 并且按照 <code>@Order</code> 进行排序。</li><li>遍历所有 runners 执行 run 方法。</li></ul></li><li>如果以上有异常发生将调用运行监听器的 failed 方法（监听器执行 <strong>项目启动失败</strong> 事件）。</li><li>无异常将调用运行监听器的 ready 方法（实际执行 running 方法，监听器执行 <strong>项目已完全启动</strong> 事件），其中如果发生异常依然执行 failed 方法。</li><li>最后返回整个 IOC 容器。</li></ul><h3 id="自定义监听组件："><a href="#自定义监听组件：" class="headerlink" title="自定义监听组件："></a>自定义监听组件：</h3><ol><li>需要在 resources 中 <code>META-INF/spring.factories</code> 内配置的组件：</li></ol><ul><li><p>ApplicationContextInitializer</p></li><li><p>ApplicationListener</p></li><li><p>SpringApplicationRunListener</p></li></ul><ol start="2"><li>直接可通过 Spring 注入容器中的组件（如添加 <code>@Component</code> 注解等方式）：</li></ol><ul><li><p>ApplicationRunner</p></li><li><p>CommandLineRunner</p></li></ul><h2 id="整合-Jsp"><a href="#整合-Jsp" class="headerlink" title="整合 Jsp"></a>整合 Jsp</h2><blockquote><p>  产考文献：<a href="https://blog.csdn.net/fmwind/article/details/81144905">Spring Boot 中使用之 JSP 篇</a></p><p>  其它问题：<a href="https://blog.csdn.net/jxchallenger/article/details/86760245?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">spring boot 设置启动时初始化 DispatcherServlet 出错</a></p></blockquote><h3 id="1-所需依赖："><a href="#1-所需依赖：" class="headerlink" title="1. 所需依赖："></a>1. 所需依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot 内置tomcat对jsp的解析包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- servlet 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jsp 依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jsp对jstl语法的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-application-配置："><a href="#2-application-配置：" class="headerlink" title="2. application 配置："></a>2. application 配置：</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.view.prefix</span>: <span class="string">/WEB-INF/jsp/ # jsp存放文件夹(注意不包含webapp文件夹)</span></span><br><span class="line"><span class="attr">spring.mvc.view.suffix</span>: <span class="string">.jsp # 视图文件后缀</span></span><br></pre></td></tr></table></figure><p>这是 properties 文件配置 yml 配置文件同理转化即可。</p><h3 id="3-idea-设置和问题："><a href="#3-idea-设置和问题：" class="headerlink" title="3. idea 设置和问题："></a>3. idea 设置和问题：</h3><h4 id="1-资源过滤问题："><a href="#1-资源过滤问题：" class="headerlink" title="1. 资源过滤问题："></a>1. 资源过滤问题：</h4><p>如果遇到 jsp 文件不在编译后的项目中可在 <code>pom.xml</code> 的 <code>build</code> 标签中添加如下资源过滤配置。（可以根据需要更改配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一些项目中包含xml配置文件或资源文件可能在</span></span><br><span class="line"><span class="comment">打包时不能成功，需要在project中添加下配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将webapp中的页面编译到META-INF/resources中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-将webapp在idea中设置为web资源文件夹："><a href="#2-将webapp在idea中设置为web资源文件夹：" class="headerlink" title="2. 将webapp在idea中设置为web资源文件夹："></a>2. 将webapp在idea中设置为web资源文件夹：</h4><p><img src="/images/java/springboot/boot+jsp.png" alt="SpringBoot整合jsp"></p><h4 id="3-项目找不到-jsp-文件："><a href="#3-项目找不到-jsp-文件：" class="headerlink" title="3. 项目找不到 jsp 文件："></a>3. 项目找不到 jsp 文件：</h4><p><img src="/images/java/springboot/boot+jsp2.png" alt="SpringBoot整合jsp"></p><p>视图前缀配置中有人容易加上 <code>webapp</code> 文件夹前缀，也是造成jsp页面访问不到的原因。</p><h2 id="SpringBoot-任务"><a href="#SpringBoot-任务" class="headerlink" title="SpringBoot 任务"></a>SpringBoot 任务</h2><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><ol><li>在主程序类上使用 <code>@EnableAsync</code> 注解开启异步任务。</li><li>在需要异步执行的业务方法上添加 <code>@Async</code> 注解。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>该方法执行时自动异步执行，不会阻碍下方的代码执行。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;asyncTest&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">asyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    testService.asyncTest();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;asyncTest&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3><ol><li>导入依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>以 QQ 邮箱为例，在账户中开启 <strong>POP3&#x2F;SMTP</strong> 服务并获取 <strong>授权码</strong> 。</li><li>邮箱配置：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.163.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">mail</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtp</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">socketFactory:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">25</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure><ol start="4"><li>发送邮件：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String from;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;sendMail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendMail</span><span class="params">(<span class="meta">@RequestParam</span> String msg)</span>&#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">sendMail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>(); <span class="comment">// 简单的邮件协议</span></span><br><span class="line">    sendMail.setFrom(from); <span class="comment">// 发件人</span></span><br><span class="line">    sendMail.setTo(<span class="string">&quot;2994160002@qq.com&quot;</span>); <span class="comment">// 收件人</span></span><br><span class="line">    sendMail.setSubject(<span class="string">&quot;邮件主题&quot;</span>);</span><br><span class="line">    sendMail.setText(<span class="string">&quot;邮件内容&quot;</span>);</span><br><span class="line">    mailSender.send(sendMail);</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">&quot; - 发送成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>复杂邮件：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage(); <span class="comment">// 创建邮件</span></span><br><span class="line"><span class="comment">// 使用邮件助手设置邮件</span></span><br><span class="line"><span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">helper.setFrom(from);</span><br><span class="line">helper.setTo(<span class="string">&quot;2994160002@qq.com&quot;</span>);</span><br><span class="line">helper.setSubject(<span class="string">&quot;邮件主题&quot;</span>);</span><br><span class="line">helper.setText(<span class="string">&quot;&lt;h1&gt;开启 HTML 解析&lt;/h1&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">helper.addAttachment(<span class="string">&quot;附件名称&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\桌面文件\\IDEA-java主题配色.jar&quot;</span>));</span><br><span class="line">mailSender.send(mimeMessage); <span class="comment">// 发送邮件</span></span><br></pre></td></tr></table></figure><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ol><li>在主程序类上使用 <code>@EnableScheduling</code> 注解标注开启定时任务功能。</li><li>在需要开启定时任务的业务方法上使用 <code>@Scheduled</code> 注解标注，并使用 <strong>cron</strong> 表达式指定执行时间。</li></ol><p><a href="https://cron.qqe2.com/">在线Cron表达式生成器 (qqe2.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cron： 秒 分 时 日 月 星期</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0/5 * * * * *&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedulingTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    System.out.println(date.format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot; 每五秒执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><h4 id="添加依赖："><a href="#添加依赖：" class="headerlink" title="添加依赖："></a>添加依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Server（服务端）："><a href="#Server（服务端）：" class="headerlink" title="Server（服务端）："></a>Server（服务端）：</h4><ol><li>配置类中注入 <code>ServerEndpointExporter</code> 启用 websocket 支持：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 websocket 服务端：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;id&#125;&quot;)</span> <span class="comment">// 定义 websocket 访问地址(地址前必须有 &#x27;/&#x27;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Session&gt; sessionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(<span class="meta">@PathParam(&quot;id&quot;)</span> String id, Session session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;onOpen: &#123;&#125; , 当前连接数: &#123;&#125;&quot;</span>, id, sessionMap.size());</span><br><span class="line">        sessionMap.put(id, session);</span><br><span class="line">        sendMsgAll(<span class="string">&quot;欢迎: &quot;</span>+ id +<span class="string">&quot;, 当前人数: &quot;</span>+ sessionMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnMessage</span><span class="params">(<span class="meta">@PathParam(&quot;id&quot;)</span> String id, String message)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnMessage: &#123;&#125; -&gt; &#123;&#125;&quot;</span>, id, message);</span><br><span class="line">        sendMsgAllNotMe(id, id+ <span class="string">&quot;：&quot;</span>+ message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnClose</span><span class="params">(<span class="meta">@PathParam(&quot;id&quot;)</span> String id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnClose: &#123;&#125; , 当前连接数: &#123;&#125;&quot;</span>, id, sessionMap.size());</span><br><span class="line">        sessionMap.remove(id);</span><br><span class="line">        sendMsgAll(<span class="string">&quot;退出: &quot;</span>+ id +<span class="string">&quot;, 当前人数: &quot;</span>+ sessionMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span> <span class="comment">// Throwable 参数必须有否则报错</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnError</span><span class="params">(<span class="meta">@PathParam(&quot;id&quot;)</span> String id, Throwable error)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnError: &#123;&#125; , 当前连接数: &#123;&#125;&quot;</span>, id, sessionMap.size());</span><br><span class="line">        <span class="keyword">if</span> (sessionMap.containsKey(id))&#123;</span><br><span class="line">            sessionMap.remove(id);</span><br><span class="line">        &#125;</span><br><span class="line">        sendMsgAll(<span class="string">&quot;出错: &quot;</span>+ id +<span class="string">&quot;, 当前人数: &quot;</span>+ sessionMap.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(String id, String message)</span>&#123;</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionMap.get(id);</span><br><span class="line">        session.getAsyncRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsgAll</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Session session : sessionMap.values())&#123;</span><br><span class="line">            session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsgAllNotMe</span><span class="params">(String id, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String i : sessionMap.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (!i.equals(id))&#123;</span><br><span class="line">                <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> sessionMap.get(i);</span><br><span class="line">                session.getAsyncRemote().sendText(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Client（客户端）："><a href="#Client（客户端）：" class="headerlink" title="Client（客户端）："></a>Client（客户端）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ClientEndpoint</span> <span class="comment">// 定义客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CqClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Session s;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;client.uri&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uri;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || !s.isOpen())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s =  ContainerProvider.getWebSocketContainer()</span><br><span class="line">                        .connectToServer(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="built_in">this</span>.uri));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnOpen</span><span class="params">(Session session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnOpen 连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收消息 ---&gt; &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnClose</span><span class="params">(Session session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnClose 连接关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnError</span><span class="params">(Session session, Throwable throwable)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;OnError 连接出错&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(String msg)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        s.getAsyncRemote().sendText(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><ul><li>基本使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(MyClass.class);</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line">logger.info(<span class="string">&quot;This is an info message&quot;</span>);</span><br><span class="line">logger.warn(<span class="string">&quot;This is a warning message&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;This is an error message&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用占位符 &#123;&#125;</span></span><br><span class="line">logger.debug(<span class="string">&quot;User &#123;&#125; logged in successfully&quot;</span>, username);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试时条件</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">expensiveDebugInfo</span> <span class="operator">=</span> generateExpensiveDebugInfo();</span><br><span class="line">    logger.debug(<span class="string">&quot;Expensive debug info: &#123;&#125;&quot;</span>, expensiveDebugInfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议错误日志打印方式</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Some code that may throw an exception</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;An error occurred: &#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在 Spring Boot 项目中只需将 <code>logback-spring.xml</code> 文件放置在 <code>src/main/resources</code> 目录下，Spring Boot 就会在启动时自动加载并应用这个日志配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Spring Boot 提供的默认配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/base.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义变量 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件的存储位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./logs&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 应用程序名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;application&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件的最大历史记录数，单个日志文件的最大大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MAX_HISTORY&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MAX_FILE_SIZE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10MB&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台和文件的日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台日志配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件日志配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;RollingFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件名与日志格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;-0-current.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志滚动策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件名、单个日志文件最大大小 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;MAX_FILE_SIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件保存最多个数，超过时会删除之前的文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAX_HISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- root 处理所有的日志事件，level=&quot;INFO&quot; 日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为特定的包或类配置单独的日志事件（可定义多个），</span></span><br><span class="line"><span class="comment">        additivity=&quot;false&quot; 不会将日志传递给其祖先 Logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.example&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;RollingFile&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> swagger </tag>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC数据处理</title>
      <link href="/2020/08/22/java/ssm/springMVC/date/"/>
      <url>/2020/08/22/java/ssm/springMVC/date/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC-高级属性"><a href="#SpringMVC-高级属性" class="headerlink" title="SpringMVC 高级属性"></a>SpringMVC 高级属性</h1><h2 id="SpringMvc与JSON："><a href="#SpringMvc与JSON：" class="headerlink" title="SpringMvc与JSON："></a>SpringMvc与JSON：</h2><h3 id="1-JS对象与JSON转换："><a href="#1-JS对象与JSON转换：" class="headerlink" title="1. JS对象与JSON转换："></a>1. JS对象与JSON转换：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;<span class="attr">name</span>:<span class="string">&quot;test&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">pass</span>:<span class="number">111</span>&#125;;</span><br><span class="line"><span class="comment">// stringify：对象转json字符串</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(o);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(json); <span class="comment">// &#123;&quot;name&quot;:&quot;test&quot;,&quot;age&quot;:18,&quot;pass&quot;:111&#125;</span></span><br><span class="line"><span class="comment">// parse：json字符串转对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123;name: &quot;test&quot;, age: 18, pass: 111&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-了解-Jackson："><a href="#2-了解-Jackson：" class="headerlink" title="2. 了解 Jackson："></a>2. 了解 Jackson：</h3><h4 id="1-导入依赖："><a href="#1-导入依赖：" class="headerlink" title="1. 导入依赖："></a>1. 导入依赖：</h4><ul><li><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind">依赖地址</a>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-ResponseBody："><a href="#2-ResponseBody：" class="headerlink" title="2. @ResponseBody："></a>2. @ResponseBody：</h4><ul><li>SpringMvc 中导入 Jackson 使用 @ResponseBody 标识的方法的返回值是一个对象，那么 Jackson 会自动将该对象转为 json 字符串并返回。</li><li>@ResponseBody 标注的类则此类中所有的方法都返回 JSON 字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// produces 解决乱码问题</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/hello&quot;,produces=&quot;application/json;charset=utf-8&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">// 使该方法不通过视图解析器，直接返回字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">// 对json处理都依赖于此对象</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">// 将传入的java任意对象（包括集合，数组等）转换为json字符串</span></span><br><span class="line">    <span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;test&quot;</span>,<span class="number">111</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于专返回 json 字符串的 controller 类可直接在类上标注 <strong><code>@RestController</code></strong> 注解，此注解是 <code>@Controller</code> 与 <code>@ResponseBody</code> 的结合。</li></ul><h4 id="3-JSON编码统一处理："><a href="#3-JSON编码统一处理：" class="headerlink" title="3. JSON编码统一处理："></a>3. JSON编码统一处理：</h4><ul><li>在 SpringMvc 配置文件中对返回的字符串进行编码设置：省去对每一个方法设置编码的步骤</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-RequestBody："><a href="#4-RequestBody：" class="headerlink" title="4. @RequestBody："></a>4. @RequestBody：</h4><ul><li><strong>@RequestBody</strong> 注解能获取到本次请求的 <strong>请求体</strong> ，get没有请求体所以会获取到空。</li><li>如果请求体是一个对象的 JSON 字符串，它能将此 JSON 映射到对应的对象上，需要为 ajax 请求中设置 <code>contentType: &quot;application/json&quot;</code> 表示内容格式为 JSON 字符串类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HttpEntity："><a href="#HttpEntity：" class="headerlink" title="HttpEntity："></a>HttpEntity：</h5><ul><li>方法中还能使用一个参数 <code>HttpEntity</code> 它能同时拿到 <strong>请求体和请求头</strong> 的数据：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpEntity&lt;String&gt; str)</span> &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ResponseEntity："><a href="#ResponseEntity：" class="headerlink" title="ResponseEntity："></a>ResponseEntity：</h5><ul><li>方法的返回值可以是 <code>ResponseEntity</code> 它可以 <strong>返回响应体的同时设置响应头</strong> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.add(<span class="string">&quot;Set-Cookie&quot;</span>,<span class="string">&quot;user=root&quot;</span>);</span><br><span class="line">    <span class="comment">// 参数1 响应体(泛型数据类型)，参数2 响应头，参数3 响应状态码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;String&gt;(<span class="string">&quot;&#123;a:1&#125;&quot;</span>, headers, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-时间对象-Date-："><a href="#5-时间对象-Date-：" class="headerlink" title="5. 时间对象(Date)："></a>5. 时间对象(Date)：</h4><ul><li>SpringMvc 中默认 Date 对象转换为时间戳，可以通过设置 ObjectMapper 时间格式处理返回的 Date 对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对json处理都依赖于此对象</span></span><br><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="comment">//不使用时间戳的方式</span></span><br><span class="line">mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//自定义日期格式对象</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//指定日期格式</span></span><br><span class="line">mapper.setDateFormat(sdf);</span><br><span class="line"><span class="comment">// 传入Date对象，返回指定时间格式字符串</span></span><br><span class="line"><span class="keyword">return</span> mapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br></pre></td></tr></table></figure><ul><li>pojo 类成员上使用注解方式指定时间格式(推荐)，每次 Jackson 将 pojo 类转为 JSON 时都会按照你在成员上方注解的规则进行转化：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span> <span class="comment">// 转 JSON 时忽略此成员</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> pass;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> <span class="comment">// 规定转 JSON 时时间的格式</span></span><br><span class="line"><span class="keyword">private</span> Date date;</span><br></pre></td></tr></table></figure><h4 id="6-使用-Jackson："><a href="#6-使用-Jackson：" class="headerlink" title="6. 使用 Jackson："></a>6. 使用 Jackson：</h4><ol><li>jackson 对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li>java对象序列化为json：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对java象转化为json字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line"><span class="comment">// 将java对象转化为json字符串并序列化为json文件</span></span><br><span class="line">mapper.writeValue(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;json/js.json&quot;</span>),<span class="keyword">new</span> <span class="title class_">User</span>());</span><br></pre></td></tr></table></figure><ol start="3"><li>json反序列化为java对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json字符串转java对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.readValue(json, User.class);</span><br><span class="line"><span class="comment">// 将读取的json文件（或者url）转化为java对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.readValue(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;json/js.json&quot;</span>), User.class);</span><br></pre></td></tr></table></figure><ol start="4"><li>通过<code>TypeReference</code>反序列化为集合(list，map)：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用TypeReference将json字符串转化为集合（list,map）</span></span><br><span class="line">ArrayList&lt;String&gt; list =</span><br><span class="line">        mapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;ArrayList&lt;String&gt;&gt;()&#123;&#125;);</span><br><span class="line">HashMap&lt;String, Object&gt; map =</span><br><span class="line">        mapper.readValue(json,<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;HashMap&lt;String, Object&gt;&gt;()&#123;&#125;);</span><br><span class="line"><span class="comment">// 使用TypeReference是为了保证数据准确性和安全，也可以直接转换但不准确</span></span><br></pre></td></tr></table></figure><ol start="5"><li>JsonNode 对象读取json：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过ObjectMapper将json字符串转化为JsonNode对象</span></span><br><span class="line"><span class="type">JsonNode</span> <span class="variable">jsonNode</span> <span class="operator">=</span> mapper.readTree(json);</span><br><span class="line"><span class="comment">// 通过json的key获取value的JsonNode对象</span></span><br><span class="line"><span class="type">JsonNode</span> <span class="variable">name</span> <span class="operator">=</span> jsonNode.get(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="comment">// JsonNode 获取该节点的json字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> name.toString();</span><br><span class="line"><span class="comment">// 或将该节点转化为某值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> name.asText();</span><br></pre></td></tr></table></figure><h3 id="3-了解-fastjson："><a href="#3-了解-fastjson：" class="headerlink" title="3. 了解 fastjson："></a>3. 了解 fastjson：</h3><ol><li>导入依赖，<a href="https://mvnrepository.com/artifact/com.alibaba/fastjson">依赖地址</a>：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>fastjson常用方法：</li></ol><p>fastjson 三个主要的类：<strong>JSONObject  代表 json 对象</strong> ，<strong>JSONArray  代表 json 对象数组</strong>，<strong>JSON代表 JSONObject和JSONArray的转化</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>);</span><br><span class="line">List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(user1);</span><br><span class="line">list.add(user2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java对象 转 JSON字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON字符串 转 Java对象</span></span><br><span class="line">User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java对象 转 JSON对象</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(user2);</span><br><span class="line"><span class="comment">// 根据key获取json对象中的值</span></span><br><span class="line">jsonObject1.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON对象 转 Java对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject1, User.class);</span><br></pre></td></tr></table></figure><h2 id="数据校验："><a href="#数据校验：" class="headerlink" title="数据校验："></a>数据校验：</h2><p>Java 标准提案第 303 条规定了数据校验的标准形成了 <strong>JSR303</strong> ，它是为 Java Bean 数据合法性校验提供的标准框架已经包含在 Java EE 6.0 中。</p><p><strong>Hibernate Validator</strong> 是 JSR303 的一种参考实现，除 jsr 标准注解外它还支持额外的一些注解：</p><ul><li>maven添加依赖支持：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>常用注解（所有注解都有一个message属性，自定义错误信息）：</li></ul><table><thead><tr><th>Constraint</th><th>详细信息</th><th>作用类型</th></tr></thead><tbody><tr><td>@Null</td><td>元素必须为 null</td><td>引用类型</td></tr><tr><td>@NotNull</td><td>元素必须不为 null</td><td>引用类型</td></tr><tr><td>@AssertTrue</td><td>元素必须为 true</td><td>boolean</td></tr><tr><td>@AssertFalse</td><td>元素必须为 false</td><td>boolean</td></tr><tr><td>@Min(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td><td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger</td></tr><tr><td>@Max(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td><td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger</td></tr><tr><td>@DecimalMin(value)</td><td>必须是一个数字，其值必须大于等于指定的最小值</td><td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger、String</td></tr><tr><td>@DecimalMax(value)</td><td>必须是一个数字，其值必须小于等于指定的最大值</td><td>byte、short、int、long及对应的包装类型以及BigDecimal、BigInteger、String</td></tr><tr><td>@Size(max, min)</td><td>大小必须在指定的范围内</td><td>String、Collection、Map和数组</td></tr><tr><td>@Digits (integer, fraction)</td><td>必须是一个数字，其值必须在可接受的范围内</td><td>byte、short、int、long及各自的包装类型以及BigDecimal、BigInteger、String</td></tr><tr><td>@Past</td><td>必须是一个过去的日期</td><td>java.util.Date,java.util.Calendar</td></tr><tr><td>@Future</td><td>必须是一个将来的日期</td><td>java.util.Date,java.util.Calendar</td></tr><tr><td>@Pattern(regex&#x3D;)</td><td>必须符合指定的正则表达式</td><td>String</td></tr><tr><td>@Valid</td><td>需要递归验证</td><td>引用对象</td></tr><tr><td>以下是Hibernate Validator新增的</td><td></td><td></td></tr><tr><td>@Email</td><td>必须是电子邮箱地址</td><td>String</td></tr><tr><td>@Length(min&#x3D;下限, max&#x3D;上限)</td><td>字符串的大小必须在指定的范围内</td><td>String</td></tr><tr><td>@NotEmpty</td><td>必须非空并且size大于0</td><td>String、Collection、Map和数组</td></tr><tr><td>@NotBlank</td><td>必须不为空且不能全部为’ ‘(空字符串)</td><td>String</td></tr><tr><td>@Range(min&#x3D;最小值, max&#x3D;最大值)</td><td>必须在合适的范围内</td><td>byte、short、int、long及各自的包装类型以及BigDecimal、BigInteger、String</td></tr></tbody></table><ul><li>为 pojo 类需要的属性添加相应校验注解后，SpringMvc 请求方法中在使用到该 pojo 的变量前使用注解声明该 pojo 自动封装为对象时需要校验：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="comment">// Valid 标注需要验证,添加 BindingResult 参数接收封装校验结果</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult result)</span>&#123;</span><br><span class="line">    result.hasErrors(); <span class="comment">// 是否有校验错误</span></span><br><span class="line">    <span class="comment">// 获取所有验证错误的对象</span></span><br><span class="line">    List&lt;ObjectError&gt; allErrors =result.getAllErrors();</span><br><span class="line">    <span class="keyword">for</span> (ObjectError allError : allErrors) &#123;</span><br><span class="line">        allError.getDefaultMessage(); <span class="comment">// 错误信息</span></span><br><span class="line">        allError.getObjectName(); <span class="comment">// 错误字段名</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：校验的 pojo 类后需要紧跟一个 <code>BindingResult</code> 来接收前一个参数(pojo类)的校验结果，中间不能有其它的参数。</p><h2 id="拦截器："><a href="#拦截器：" class="headerlink" title="拦截器："></a>拦截器：</h2><p>SpringMVC 的拦截器类似于 Servlet 中的过滤器 Filter ,区别在于 <strong>拦截器是AOP思想的具体应用</strong>。</p><ul><li>自定义拦截器必须继承 <strong>HandlerInterceptor</strong> 接口。源码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 目标方法运行之前,此方法的返回值表示对请求是否放行</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 默认请求放行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标方法运行之后</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 整个请求完成后，来到目标页面（preHandle放行，资源响应之后）</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义拦截器后需要在spring-mvc.xml中配置拦截器：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截器管理配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置当个bean默认拦截所有请求 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean class=&quot;ruoxijun.config.MyInterceptor&quot;/&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 单个拦截器配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截的请求路径，**表示此请求下的所有请求 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定拦截器类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可配置多个interceptor（拦截器） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>拦截器可用于用户的登录等权限管理操作，常搭配 <strong>Session</strong> 与 <strong>Cookie</strong> 一同使用（详情见javawab章）。</li><li><strong>mvc单拦截器运行流程：</strong><ol><li>preHandle：目标方法运行前</li><li>目标方法执行</li><li>postHandle：目标方法运行后</li><li>页面加载完成</li><li>afterCompletion：请求完成后</li></ol></li><li><strong>mvc多拦截器运行流程</strong> ：（如有两个拦截器，且1配置在2之前）<ol><li>preHandle1 -&gt; preHandle2 -&gt; 后目标方法运行</li><li>postHandle2 -&gt; postHandle1 -&gt; 后页面加载</li><li>afterCompletion2 -&gt; afterCompletion1</li></ol></li></ul><h2 id="异常处理："><a href="#异常处理：" class="headerlink" title="异常处理："></a>异常处理：</h2><p>SpringMvc 中也能使用 <code>SimpleMappingExceptionResolver </code> 在配置文件中配置异常处理。</p><h3 id="1-ExceptionHandler："><a href="#1-ExceptionHandler：" class="headerlink" title="1. @ExceptionHandler："></a>1. @ExceptionHandler：</h3><p>controller 类中可以使用 <code>@ExceptionHandler</code> 注解来处理该 controller发生的异常，它标注在一个方法上且 value 属性值为需要拦截的异常类数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标注此方法专处理该 controller 中发生的某些异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler(&#123;Exception.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">err</span><span class="params">(Exception exception)</span>&#123; <span class="comment">// 填写异常类参数接收异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;err&quot;</span>; <span class="comment">// 与请求方法一样经过视图解析器，返回 err.jsp 页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>该方法参数只能是异常类为参数来接收异常，返回值与请求方法类似(可返回 <code>ModelAndView</code> )</li><li>当一个 controller 中有多个 @ExceptionHandler 标注的方法，发生异常时异常会匹配更精确的那个方法</li></ul><h3 id="2-ControllerAdvice："><a href="#2-ControllerAdvice：" class="headerlink" title="2. @ControllerAdvice："></a>2. @ControllerAdvice：</h3><p>被 <code>@ControllerAdvice</code> 标注的类被自动添加到 spring 的 ioc 容器中，该类中被 <code>@ExceptionHandler</code> 标注的方法就是全局异常处理方法，同时这个类也被称之为全局异常处理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Err</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">err</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;err&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller 异常处理方法和全局异常处理类同时存在时，优先使用 controller 本类中的存在的异常处理方法。</li></ul><h3 id="3-ResponseStatus："><a href="#3-ResponseStatus：" class="headerlink" title="3. @ResponseStatus："></a>3. @ResponseStatus：</h3><p>自定义异常类注解 <code>@ResponseStatus</code> 当发生该类异常时会来到一个 SpringMvc 异常显示界面，当存在异常处理方法拦截到该异常时将由异常处理方法处理，不再去 SpringMvc 的异常显示界面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus(reason = &quot;自定义异常发生&quot; ,</span></span><br><span class="line"><span class="meta">                code = HttpStatus.NOT_ACCEPTABLE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="文件上传与下载："><a href="#文件上传与下载：" class="headerlink" title="文件上传与下载："></a>文件上传与下载：</h2><h3 id="文件上传注意事项："><a href="#文件上传注意事项：" class="headerlink" title="文件上传注意事项："></a>文件上传注意事项：</h3><ol><li>为保证服务器安全，上传文件应放在外界无法访问的目录下，如WEB-INF目录。</li><li>为防止文件覆盖现象应为上传文件产生一个唯一文件名。</li><li>限制上传文件的最大值，限制上传文件的类型。</li></ol><h3 id="上传文件具体实现："><a href="#上传文件具体实现：" class="headerlink" title="上传文件具体实现："></a>上传文件具体实现：</h3><h4 id="1-添加依赖："><a href="#1-添加依赖：" class="headerlink" title="1. 添加依赖："></a>1. 添加依赖：</h4><p>添加<code>commons-fileupload</code>依赖，maven会自动导入它的依赖包<code>commons-io</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-表单配置："><a href="#2-表单配置：" class="headerlink" title="2. 表单配置："></a>2. 表单配置：</h4><ol><li>form 属性 <code>method</code> 需要设置为 <code>post</code> ，<code>get</code> 不能传输文件，但会接收到文件名。</li><li>form 属性 <code>enctype</code> 设置为 <code>multipart/form-data</code> (文件传输必须设置，表示已二进制流方式处理表单数据)</li><li>input 的 <code>type</code> 设置为 <code>file</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/download&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-配置文件上传解析器："><a href="#3-配置文件上传解析器：" class="headerlink" title="3. 配置文件上传解析器："></a>3. 配置文件上传解析器：</h4><p>SpringMvc 提供了即插即用文件上传解析器 <strong>MultipartResolver（CommonsMultipartResolver类）</strong> ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springmvc文件上传解析器，id必须为multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传大小上限，10MB=10485760字节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;1024*1024*10&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-文件上传："><a href="#4-文件上传：" class="headerlink" title="4. 文件上传："></a>4. 文件上传：</h4><ul><li>CommonsMultipartFile 的 常用方法：</li></ul><ol><li><p><strong>String getOriginalFilename()：获取上传文件的原名</strong></p></li><li><p><strong>InputStream getInputStream()：获取文件流</strong></p></li><li><p><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></p></li></ol><ul><li>使用流（getInputStream）获取保存文件：</li></ul><p>SpringMvc 将上传的文件信息都封装在了 <code>CommonsMultipartFile</code> 中，在使用文件上传时一般我们只需在接收上传文件的方法参数中添加它的父类 <code>MultipartFile</code> 参数来接收上传的文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般不直接使用 CommonsMultipartFile 而是使用它的父类 MultipartFile</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">file</span><span class="params">(<span class="meta">@RequestPart(value = &quot;file&quot;)</span>CommonsMultipartFile file,</span></span><br><span class="line"><span class="params">                   HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 该文件 input 的 name 值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> file.getName(); </span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 创建存放文件的文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())&#123;</span><br><span class="line">        path.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取上传文件的文件流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">    <span class="comment">// 存放文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(filePath);</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 **transferTo ** 方法保存文件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">file</span><span class="params">(<span class="meta">@RequestPart(value = &quot;file&quot;)</span>CommonsMultipartFile file,</span></span><br><span class="line"><span class="params">                   HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 创建存放文件的未文件夹</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (!path.exists())&#123;</span><br><span class="line">        path.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存放文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">    <span class="comment">// 定义文件对象后使用transferTo方法，直接保存文件</span></span><br><span class="line">    file.transferTo(filePath);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-多文件上传："><a href="#5-多文件上传：" class="headerlink" title="5. 多文件上传："></a>5. 多文件上传：</h4><p>SpringMvc 多文件上传时将每一个文件的信息都封装在了 <code>MultipartFile</code> 最终将它们组成了一个 <code>MultipartFile[]</code> 的数组，我们只需在接收上传文件的方法中添加此数组参数即可接收上传的文件。</p><p>HTML中表单设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> &gt;</span></span><br><span class="line">    &lt;%-- 文件控件同名 --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    &lt;%-- 不同 name 需要分别处理 --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span> <span class="comment">// 将MultipartFile设置为数组</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span> MultipartFile[] file,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestPart(&quot;file2&quot;)</span> MultipartFile file2)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : file) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!multipartFile.isEmpty())&#123; <span class="comment">// 当文件不为空时保存起来</span></span><br><span class="line">            multipartFile.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\&quot;</span>,</span><br><span class="line">                multipartFile.getOriginalFilename()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestPart"><a href="#RequestPart" class="headerlink" title="@RequestPart:"></a>@RequestPart:</h4><p>@RequestPart 适用于复杂的请求域（像JSON，XML），既可以接收 JSON 字符串并封装为对象又可以接收二进制数据流（multipart&#x2F;form-data）。</p><h3 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h3><p>文件下载注意配置 response 响应头和一些必要配置，都是一些固定设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">file</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 设置页面不缓存,清空buffer</span></span><br><span class="line">    response.reset();</span><br><span class="line">    <span class="comment">// 设置字符编码</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">// 二进制传输数据</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;fileName=&quot;</span>+</span><br><span class="line">            URLEncoder.encode(<span class="string">&quot;wallhaven-eyg6l8.jpg&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/file&quot;</span>));</span><br><span class="line">    <span class="type">File</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,<span class="string">&quot;wallhaven-eyg6l8.jpg&quot;</span>);</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">    <span class="comment">// 获取传输文件输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    out.close();</span><br><span class="line">    in.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMvc-运行流程："><a href="#SpringMvc-运行流程：" class="headerlink" title="SpringMvc 运行流程："></a>SpringMvc 运行流程：</h2><ol><li>发起请求，前端控制器（DispatcherServlet）接受请求，调用doDispatch进行处理</li><li>根据HandlerMapper中保存的请求映射信息找到，处理当前请求的处理器执行链（包含拦截器）</li><li>根据当前处理器找到它的HandlerAdapter（适配器）</li><li>拦截器的preHandle先执行</li><li>适配器执行目标方法，并返回ModelAndView<ol><li>ModelAttribute注解标注的方法提前运行</li><li>执行目标方法时确定目标方法用的参数，根据参数前有无注解和参数类型(如Model)执行不同。<ul><li>如果是自定义类型：<ol><li>看隐含模型中有没有，有就从隐含模型中取</li><li>否则再看是否为SessionAttributes标注的属性，是则拿，拿不到则报错</li><li>以上都不满足利用反射创建对象</li></ol></li></ul></li></ol></li><li>拦截器的postHandle执行</li><li>处理结果；（页面渲染流程）<ol><li>如果有异常使用异常解析器处理，处理完成后返回ModelAndView</li><li>调用render进行页面渲染<ol><li>视图解析器根据视图名得到视图对象</li><li>视图对象调用render方法</li></ol></li><li>执行拦截器的afterCompletion</li></ol></li></ol><p>&#x3D;&#x3D;掌握1-7（7.1-7.3）&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
            <tag> fastjson </tag>
            
            <tag> jackson </tag>
            
            <tag> json </tag>
            
            <tag> 文件上传 </tag>
            
            <tag> 异常 </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> springmvc运行流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC基础</title>
      <link href="/2020/08/19/java/ssm/springMVC/index/"/>
      <url>/2020/08/19/java/ssm/springMVC/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC-入门"><a href="#Spring-MVC-入门" class="headerlink" title="Spring MVC 入门"></a>Spring MVC 入门</h1><h2 id="MVC-简介："><a href="#MVC-简介：" class="headerlink" title="MVC 简介："></a>MVC 简介：</h2><p>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范：</p><ul><li><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p></li><li><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p></li><li><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p></li></ul><h2 id="Spring-MVC-简单实例："><a href="#Spring-MVC-简单实例：" class="headerlink" title="Spring MVC 简单实例："></a>Spring MVC 简单实例：</h2><h3 id="1-导入所需依赖："><a href="#1-导入所需依赖：" class="headerlink" title="1. 导入所需依赖："></a>1. 导入所需依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springmvc核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可能会使用servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还有可能使用jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>servlet 的 maven 依赖分为 <code>javax.servlet-api</code> 和 <code>servlet-api</code> 带 <strong>javax</strong> 前缀表示最新版本。</p><h3 id="2-配置web-xml-："><a href="#2-配置web-xml-：" class="headerlink" title="2. 配置web.xml ："></a>2. 配置web.xml ：</h3><p>SpringMVC 思想是用一个前端控制器能拦截所有请求，并智能派发。这个前端控制器是一个 servlet 需要在 web.xml 中进行配置。它提供的前端控制器叫 <strong>DispatcherServlet 它继承自 HttpServlet</strong> 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet SpringMvc 的请求拦截分发器(前端控制器) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> <span class="comment">&lt;!-- 指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当没有指定配置文件时，会默认寻找：/WEB-INF/前端控制器名-servlet.xml 文件</span></span><br><span class="line"><span class="comment">            即 /WEB-INF/dispatcherServlet-servlet.xml 文件</span></span><br><span class="line"><span class="comment">             就是你配置的前端控制器servlet的名字为前缀的文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- servlet启动加载：</span></span><br><span class="line"><span class="comment">             servlet 原本是第一次访问时创建对象。</span></span><br><span class="line"><span class="comment">             springmvc 中服务器启动时创建对象，值越小优先级越高 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- /  ：拦截所有 url 路径请求,一般使用此拦截方式</span></span><br><span class="line"><span class="comment">             /* ：拦截到所有请求，路径请求和后缀请求（如*.jsp|*.html|*.js...） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-springmvc-配置文件："><a href="#3-springmvc-配置文件：" class="headerlink" title="3. springmvc 配置文件："></a>3. springmvc 配置文件：</h3><p>在 <strong>resources</strong> 文件夹中新建 springmvc-servlet.xml (推荐名，可自定义) 配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.添加处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.添加处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.添加视图解析器:拼接目标地址字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <strong>处理器映射器和处理器适配器</strong> 是使用了显示的方式去指定，实际1、2也可 **省略 ** springmvc会采用默认的 <strong>处理器映射器和处理器适配器</strong> 。</p><h3 id="4-编写-Controller-类："><a href="#4-编写-Controller-类：" class="headerlink" title="4. 编写 Controller 类："></a>4. 编写 Controller 类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现 org.springframework.web.servlet.mvc.Controller 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// springmvc方法中允许我们传入原生的API</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                      HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// ModelAndView 模型和视图类</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="comment">// 封装对象，放在ModelAndView中。</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">// 封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ModelAndView 的 <code>setViewName</code> 方法和配置文件中的视图解析器，决定了要跳转的视图和视图的具体位置（通过拼接字符串）。如上表示跳转到 &#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp 视图（页面）。hello.jsp中的内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span>$&#123;msg&#125;<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-Controller-加入IOC容器："><a href="#5-Controller-加入IOC容器：" class="headerlink" title="5. Controller 加入IOC容器："></a>5. Controller 加入IOC容器：</h3><p>在 springmvc-servlet.xml 中，注册我们刚刚书写的 HelloController 类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意此处的id表示访问时的url后缀，”/“ 不能舍去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.ruoxijun.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>到此启动项目浏览器中输入： <strong>localhost:8080&#x2F;springmvc_demo01&#x2F;hello</strong> 访问，浏览器显示 <strong>HelloSpringMVC!</strong> 的字样表示成功了。</p><h2 id="实例改写注解开发："><a href="#实例改写注解开发：" class="headerlink" title="实例改写注解开发："></a>实例改写注解开发：</h2><h3 id="1-springmvc-servlet-xml-配置："><a href="#1-springmvc-servlet-xml-配置：" class="headerlink" title="1. springmvc-servlet.xml 配置："></a>1. springmvc-servlet.xml 配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;io.ruoxijun&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源(如.css、.js等)</span></span><br><span class="line"><span class="comment">         除我们添加的映射请求，其它请求交给Tomcat处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加静态处理后我们映射的动态请求也会被Tomcat静态处理，需要加上此句 </span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入</span></span><br><span class="line"><span class="comment">        省略了手动注册以上两个bean的实例的步骤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可指定视图类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-注解实现-Controller-："><a href="#2-注解实现-Controller-：" class="headerlink" title="2. 注解实现 Controller ："></a>2. 注解实现 Controller ：</h3><p><strong><code>@Controller </code></strong> 注解的类中使用 <strong><code>@RequestMapping</code></strong> 注解的方法就相当于一个 handleRequest 方法。被注解类中的所有方法如果返回值为 <strong>String</strong> ，并且有具体的页面可以跳转那么就会被视图解析器解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Controller注解不用再继承Controller接口</span></span><br><span class="line"><span class="meta">@Controller</span> <span class="comment">// 实现Controller接口是一种较老的方法，推荐使用注解实现</span></span><br><span class="line"><span class="comment">// 可在类上再加一层请求路径的映射,也可省略</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// 映射请求路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span> <span class="comment">// 请求：项目路径/controller/hello</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span>&#123; <span class="comment">// 参数可自定义，此处的Model存储传递数据</span></span><br><span class="line">        <span class="comment">// 向模型存入数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springmvc&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回的字符串表示视图：/WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">// 如果没有配置视图解析器，返回 &quot;/WEB-INF/jsp/hello.jsp&quot; 也能达到效果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类中可以配置多个 RequestMapping 方法，同时它还可以作用在类上相当于为类中所有的请求路径之前加了一层请求的路径映射。</p><h2 id="RequestMapping-属性："><a href="#RequestMapping-属性：" class="headerlink" title="RequestMapping 属性："></a>RequestMapping 属性：</h2><h3 id="常规方式传参："><a href="#常规方式传参：" class="headerlink" title="常规方式传参："></a>常规方式传参：</h3><p>首先定义一个需要接收两个参数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span> <span class="comment">// &quot;/&quot; 可省略（使用时自动添加）</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,Model model)</span>&#123; <span class="comment">// 需要接受ab两个参数</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;两数和为：&quot;</span>+(a+b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：</p><p><strong>localhost:8080&#x2F;springmvc_demo02&#x2F;add</strong> ：直接访问add方法，不传入参数报 <strong>500错误</strong>。</p><p><strong>localhost:8080&#x2F;springmvc_demo02&#x2F;add?a&#x3D;1&amp;b&#x3D;2</strong> ：正确访问方式，使用常规的get方式传参。</p><h3 id="1-模糊匹配-Ant-风格-URL-："><a href="#1-模糊匹配-Ant-风格-URL-：" class="headerlink" title="1. 模糊匹配(Ant 风格 URL)："></a>1. 模糊匹配(Ant 风格 URL)：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ? 匹配单个任意字符（0个或多个字符都会导致404）</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello?&quot;)</span></span><br><span class="line"><span class="comment">// * 匹配多个字符(可0个)或一层路径，hello? 与 hello* 同时存在优先访问精确度高的</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/*/hello*&quot;)</span></span><br><span class="line"><span class="comment">// ** 可匹配多层路径</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/**/hello&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="2-RestFul-与-PathVariable："><a href="#2-RestFul-与-PathVariable：" class="headerlink" title="2. RestFul 与 PathVariable："></a>2. RestFul 与 PathVariable：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大括号声明路径变量值在 url 中映射的位置，</span></span><br><span class="line"><span class="comment"> * 路径变量在url中的位置和个数可以随意更改（/add/&#123;a&#125;/&#123;b&#125;/&#123;a&#125;：a值为最后一个a值），</span></span><br><span class="line"><span class="comment"> * 但必须给所有路径变量声明并赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="comment">// @PathVariable 默认将路径变量名与参数名匹配，也可value属性值来指定</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> a, // 基本数据类型建议使用封装类型接收</span></span><br><span class="line"><span class="params">                  <span class="meta">@PathVariable(&quot;b&quot;)</span> <span class="type">int</span> b,</span></span><br><span class="line"><span class="params">                  // 支持将所有的路径变量 k,v 都封装在一个 Map&lt;String,String&gt; 中</span></span><br><span class="line"><span class="params">                  <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv, </span></span><br><span class="line"><span class="params">                  Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;两数和为：&quot;</span>+(a-b));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：</p><p><strong>localhost:8080&#x2F;springmvc_demo02&#x2F;add?a&#x3D;1&amp;b&#x3D;2</strong>：使用常规的get方式传参，报404错误。</p><p><strong>localhost:8080&#x2F;springmvc_demo02&#x2F;add&#x2F;2&#x2F;1</strong>：正确访问方式，RestFul 风格传参。</p><h4 id="RestFul-风格-URL："><a href="#RestFul-风格-URL：" class="headerlink" title="RestFul 风格 URL："></a>RestFul 风格 URL：</h4><ol><li>常规 URL 请求设计方式：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以书籍管理的 URL 请求为例</span></span><br><span class="line">/getBook?id=<span class="number">1</span>    <span class="comment">// 获取书籍</span></span><br><span class="line">/deleteBook?id=<span class="number">1</span> <span class="comment">// 删除书籍</span></span><br><span class="line">/addBook         <span class="comment">// 添加书籍</span></span><br><span class="line">/updateBook?id=<span class="number">1</span> <span class="comment">// 更新书籍</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Rest 风格 URL 请求设计方式：以简洁的 URL 提交请求，以请求方式来区分对资源的操作。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// restRul：资源名/资源标识</span></span><br><span class="line">/book/<span class="number">1</span>  <span class="comment">// GET    请求：获取书籍</span></span><br><span class="line">/book/<span class="number">1</span>  <span class="comment">// DELETE 请求：删除书籍</span></span><br><span class="line">/book    <span class="comment">// POST   请求：保存或新增书籍</span></span><br><span class="line">/book/<span class="number">1</span>  <span class="comment">// PUT    请求：更新书籍</span></span><br></pre></td></tr></table></figure><h4 id="Sring-对-Rest-请求的支持："><a href="#Sring-对-Rest-请求的支持：" class="headerlink" title="Sring 对 Rest 请求的支持："></a>Sring 对 Rest 请求的支持：</h4><ol><li>浏览器中一般只支持 get、post 请求，springmvc 提供了将普通请求转化为规定请求的 <strong>Filter</strong> ：</li></ol><p><code>org.springframework.web.filter.HiddenHttpMethodFilter</code> 首先在 web.xml 配置此 Filter 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>hiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>实现方式：</li></ol><p>创建 post 请求，在请求数据中携带一个名为 <strong><code>_method</code></strong> 的参数， <strong><code>_method</code></strong> 的值就是你想要的请求方式，如：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 指定要请求的 rest 风格路径，发送请求方式为 post --%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/book/1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;%-- 指定 _method 参数值，表示 springmvc 要将此 post 请求转化为 DELETE --%&gt;</span><br><span class="line">    &lt;input name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;DELETE&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;删除图书&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>高版本 tomcat 的 Rest 请求方法中不支持返回 jsp页面：</li></ol><p>tomcat 8 以上返回 Rest 的请求方法返回 jsp 页面时会报 405 的错误，可以在 jsp 页面的头部添加：</p><p> <code>&lt;%@page isErrorPage=&quot;true&quot; %&gt;</code> 在 jsp page标签中添加 isErrorPage 为 true 让 jsp 将错误封装起来。</p><h3 id="3-MatrixVariable-矩阵变量："><a href="#3-MatrixVariable-矩阵变量：" class="headerlink" title="3. MatrixVariable 矩阵变量："></a>3. MatrixVariable 矩阵变量：</h3><p><code>@MatrixVariable</code> ：SpringBoot 默认禁用了矩阵变量功能，需要手动开启，矩阵变量必须有url路径变量的支持。</p><h3 id="4-method-请求方式："><a href="#4-method-请求方式：" class="headerlink" title="4. method 请求方式："></a>4. method 请求方式：</h3><p>http 规定的请求方式有 GET、HEAD、POST、PUT、PATCH、DELETE、OPTIONS、TRACE ，而我们可以通过 method 属性来指定某个请求的具体请求方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RequestMapping 中可以通过给method赋值指定请求方式（非指定方式请求将会报错）</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.POST)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// springmvc 也提供了具体请求方式的注解，它们是RequestMapping的快捷方式使用方法类似</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure><h3 id="5-params-指定-URL-参数"><a href="#5-params-指定-URL-参数" class="headerlink" title="5. params 指定 URL 参数:"></a>5. params 指定 URL 参数:</h3><p>params 设置 URL 请求中是否必须包含或不能包含某些参数，不符合是 404 错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;hello02&quot;,params=&#123;&quot;name&quot;&#125;)</span> <span class="comment">// 必须包含name参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello03&quot;,params=&#123;&quot;!name&quot;&#125;)</span> <span class="comment">// 不能包含name参数</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello04&quot;,params=&#123;&quot;name=4&quot;&#125;)</span> <span class="comment">// 指定参数且指定值</span></span><br><span class="line"><span class="comment">// 指定参数不能为某指定值(可以为空或参数不存在)</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello04&quot;,params=&#123;&quot;name!=4&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;hello05&quot;,params=&#123;&quot;name!=5&quot;,&quot;age&quot;&#125;)</span> <span class="comment">// 添加多个参数条件</span></span><br></pre></td></tr></table></figure><h3 id="6-headers-请求头参数"><a href="#6-headers-请求头参数" class="headerlink" title="6. headers 请求头参数:"></a>6. headers 请求头参数:</h3><p>使用规则与 params 属性设置的表达式类似，针对请求头的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Windows 浏览器中访问时请求头中有个参数： sec-ch-ua-platform: &quot;Windows&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;sec-ch-ua-platform=Windows&quot;</span>&#125; <span class="comment">// 表示只能 win 访问</span></span><br></pre></td></tr></table></figure><h3 id="7-consumes-与-produces："><a href="#7-consumes-与-produces：" class="headerlink" title="7. consumes 与 produces："></a>7. consumes 与 produces：</h3><ul><li>consumes：只接受内容类型为指定值的请求，即规定请求头中的 <code>Content-type</code></li><li>produces：告诉浏览器返回的内容类型，即为响应头添加 <code>Content-type:text/html;charset=utf-8</code> 类似属性值。</li></ul><h2 id="转发与重定向："><a href="#转发与重定向：" class="headerlink" title="转发与重定向："></a>转发与重定向：</h2><h3 id="1-使用-servlet-API-："><a href="#1-使用-servlet-API-：" class="headerlink" title="1. 使用 servlet API ："></a>1. 使用 servlet API ：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(HttpServletRequest req,HttpServletResponse rsp)</span> </span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// rsp.sendRedirect(&quot;index.jsp&quot;);</span></span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello springmvc&quot;</span>);</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用-springMVC："><a href="#2-使用-springMVC：" class="headerlink" title="2. 使用 springMVC："></a>2. 使用 springMVC：</h3><p>带有 forward 和 redirect 关键字的前缀的字符串不会被视图解析器解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 转发方式一：默认就是转发方式</span></span><br><span class="line">    <span class="comment">// return &quot;hello&quot;;</span></span><br><span class="line">    <span class="comment">// return &quot;../../index&quot;; // return 中允许使用相对路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转发方式二：使用关键字forward，将不会自动拼接前后缀</span></span><br><span class="line">    <span class="comment">// return &quot;forward:/index.jsp&quot;; // 必须有 / ,不加就是相对路径</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重定向：使用关键字redirect，且有视图解析器时重定向也能正常使用</span></span><br><span class="line"><span class="comment">     * 重定向本质就是重新请求所以不一定要返回路径也可以是一个新请求</span></span><br><span class="line"><span class="comment">     * 不会自动拼接前后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求处理："><a href="#请求处理：" class="headerlink" title="请求处理："></a>请求处理：</h2><h3 id="1-简单数据："><a href="#1-简单数据：" class="headerlink" title="1. 简单数据："></a>1. 简单数据：</h3><ul><li>@RequestParam：</li></ul><p>添加 @RequestParam 注解的变量默认该参数是必须的(可以为空字符串：&amp;password&#x3D;)，参数不存在时报 404。</p><p>RequestParam 属性： <code>defaultValue</code> 为变量设置默认值， <code>required</code> 为 false 表示不是必须的(默认true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 请求为：localhost:8080/springmvc_demo03/hello?user=test&amp;password=111&amp;pets=cat&amp;pets=pig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 请求中参数名与变量名一致时自动赋值，不存在时值为 null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pass 当请求中参数名与变量名冲突时，在变量前使用 <span class="doctag">@RequestParam</span> 指定要接收的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="comment">// 未接受到值的变量为该java类型的默认值</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String user,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;password&quot;)</span><span class="type">int</span> pass, // 根据 key 获取指定参数</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;pets&quot;)</span>List&lt;String&gt; pets, // 一个 key 有多个值时可以封装为一个集合</span></span><br><span class="line"><span class="params">                    // 拿到当前所有的参数(想拿到 pets 所有值使用 SpringMvc 工具类 MultiValueMap 替换 Map)</span></span><br><span class="line">                    <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span><br><span class="line">                    Model model) &#123;</span><br><span class="line">    String msg=<span class="string">&quot;用户名：&quot;</span>+user+<span class="string">&quot;，密码：&quot;</span>+pass;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解：<a href="https://blog.csdn.net/weixin_38004638/article/details/99655322">POST、GET、@RequestBody 和 @RequestParam 区别</a></p><ul><li>@RequestHeader：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取请求头中的信息，可设置属性同上</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello04</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span>String userAgent, // 根据 key 来获取请求头的信息</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header )</span>&#123;&#125; <span class="comment">// 获取所有的 header 信息</span></span><br></pre></td></tr></table></figure><ul><li>@CookieValue：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 cookie 中的值，可设置属性同上</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello04</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span>String jId,</span></span><br><span class="line"><span class="params">                      <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> Cookie cookie)</span>&#123;</span><br><span class="line">    <span class="comment">// 可以将 cookie 封装在 Cookie 对象中</span></span><br><span class="line">    System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接受指定时间格式类型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM--dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date date; <span class="comment">// 某pojo类中的Date成员属性</span></span><br></pre></td></tr></table></figure><h3 id="2-映射对象："><a href="#2-映射对象：" class="headerlink" title="2. 映射对象："></a>2. 映射对象：</h3><p>首先建一个pojo类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略get set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pass;</span><br><span class="line">    <span class="keyword">private</span> Book book; <span class="comment">// 关联Book类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略get set方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123; <span class="keyword">private</span> String name; &#125;</span><br></pre></td></tr></table></figure><p>添加接受对象参数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 请求为：localhost:8080/springmvc_demo03/hello?name=test&amp;pass=111&amp;book.name=mybook</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user 请求中的参数与该类中有set方法的成员（基本类型和String）名一致时，</span></span><br><span class="line"><span class="comment"> *             将给该成员变量赋值，无映射的成员变量为该java类型的默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 同样参数与变量名一致时还会给该变量赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(User user,String name, Model model)</span> &#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,user+<span class="string">&quot;,name=&quot;</span>+name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-原生-API"><a href="#3-原生-API" class="headerlink" title="3. 原生 API :"></a>3. 原生 API :</h3><p>springmvc 中允许直接在方法参数中添加原生的 API 参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                  HttpServletResponse response,</span></span><br><span class="line"><span class="params">                  HttpSession session)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>除上3个常用 api 以外还有一下 api 可用：</p><ul><li>java.security.Principal ：与 https 安全相关</li><li>Locale ：国际化相关</li></ul><h2 id="数据回显："><a href="#数据回显：" class="headerlink" title="数据回显："></a>数据回显：</h2><h3 id="1-提供-AIP-参数："><a href="#1-提供-AIP-参数：" class="headerlink" title="1. 提供 AIP 参数："></a>1. 提供 AIP 参数：</h3><p>在 springmvc 中除使用原生 API 将数据传递给页面以外，springmvc 中提供了 <strong>Map</strong> 、 <strong>Model</strong> 、 <strong>ModelMap</strong> 。springmvc 允许将它们添加在请求方法的参数列表中给我们使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Map&lt;String,Object&gt; map,</span></span><br><span class="line"><span class="params">                   Model model, ModelMap modelMap)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们添加的数据都被保存在 <strong>请求域(requestScope)</strong> 中，如在 jsp 页面我们通过 <code>$&#123;requestScope.key&#125;</code> 获取到数据。它们3都是利用了 <strong>BindingAwareModelMap</strong> 来实现数据的保存。</p><h3 id="2-ModelAndView-返回值："><a href="#2-ModelAndView-返回值：" class="headerlink" title="2. ModelAndView 返回值："></a>2. ModelAndView 返回值：</h3><p>springmvc 中还提供了一种不在方法中添加参数，而是通过方法返回值返回 <code>RequestMapping</code> 对象的方式来传递数据。它的数据也一样被保存在 <strong>请求域(requestScope)</strong> 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// new ModelAndView(&quot;index&quot;); // 构造函数允许指定视图(页面)</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    mv.setViewName(<span class="string">&quot;index&quot;</span>); <span class="comment">// 设置视图</span></span><br><span class="line">    mv.addObject(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;val&quot;</span>); <span class="comment">// 添加数据</span></span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-为-session-域添加数据："><a href="#3-为-session-域添加数据：" class="headerlink" title="3. 为 session 域添加数据："></a>3. 为 session 域添加数据：</h3><p>SessionAttributes 将上方 Model 等保存的数据同时在 <strong>session域(sessionScope)</strong> 中保存，建议使用原生 API(HttpSession)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给model存储数据时key等于value数组中值的数据，将同时在 session 域中存储一份</span></span><br><span class="line"><span class="comment">// types 将model中同类型的数据在session中储存一份</span></span><br><span class="line"><span class="meta">@SessionAttributes(value = &#123;&quot;msg&quot;,&quot;key&quot;&#125; , types = &#123;String.class&#125;)</span> <span class="comment">// 在类上使用此注解</span></span><br></pre></td></tr></table></figure><h3 id="4-其它："><a href="#4-其它：" class="headerlink" title="4.  其它："></a>4.  其它：</h3><h4 id="1-ModelAttribute："><a href="#1-ModelAttribute：" class="headerlink" title="1. @ModelAttribute："></a>1. @ModelAttribute：</h4><ul><li>基本不用了。</li></ul><h4 id="2-RequestAttribute："><a href="#2-RequestAttribute：" class="headerlink" title="2. @RequestAttribute："></a>2. @RequestAttribute：</h4><ul><li><code>RequestAttribute</code> 获取请求域中的信息：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/goToPage&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">goToPage</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">// 通过原生 API 在 request 域中保存信息</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;request msg&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/success&quot;</span>; <span class="comment">// 转发请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">success</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestAttribute(&quot;msg&quot;)</span>String msg)</span>&#123; <span class="comment">// 获取到 request 域中的 msg 信息</span></span><br><span class="line">    <span class="comment">// @RequestAttribute(value=&quot;msg&quot;, required=false) // required 参数是否必须存在（默认 true）</span></span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="乱码问题："><a href="#乱码问题：" class="headerlink" title="乱码问题："></a>乱码问题：</h2><p>在 web.xml 中添加过滤器即可，springmvc 提供了字符编码过滤器，也可使用自定义的过滤器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符编码过滤器，必须放在所有过滤器(Filter)之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定要使用的字符编码级 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 响应编码格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拦截所有请求设置编码格式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springmvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring数据库操作</title>
      <link href="/2020/08/18/java/ssm/spring/sm/"/>
      <url>/2020/08/18/java/ssm/spring/sm/</url>
      
        <content type="html"><![CDATA[<h1 id="事务管理与SM整合"><a href="#事务管理与SM整合" class="headerlink" title="事务管理与SM整合"></a>事务管理与SM整合</h1><h2 id="事务控制："><a href="#事务控制：" class="headerlink" title="事务控制："></a>事务控制：</h2><blockquote><ul><li><p>Spring 的事务控制是基于 AOP (切面编程)的，因此需要导入AOP的包。</p></li><li><p>spring 中只需告诉它哪些方法是事务方法即可，spring自动进行事务控制。</p></li><li><p>事务4个特性：原子性，一致性，隔离性，持久性。</p></li></ul></blockquote><h3 id="1-注解开启事务："><a href="#1-注解开启事务：" class="headerlink" title="1. 注解开启事务："></a>1. 注解开启事务：</h3><ul><li>spring-service.xml中添加开启事务配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 配置事务管理器，让其进行事务控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dataSource 是数据源，数据库的连接配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 开启基于注解的事务控制模式，依赖tx名称空间</span></span><br><span class="line"><span class="comment">     transaction-manager：值默认为transactionManager</span></span><br><span class="line"><span class="comment">     当与事务管理器 bean id 相同时可以不用配置此属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>业务类的业务方法(对数据库的增删改方法)上添加 <strong>Transactional</strong> 开启事务：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> * add(..) &#123;</span><br><span class="line">    <span class="comment">// 数据库cud操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Transactional属性取值：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事务方法执行超出指定时长后回滚</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>; <span class="comment">// 秒为单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否设置事务为只读，增加数据库的查询速度，存在更改数据方法时报错</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 事务隔离级别(使用请百度)：</span></span><br><span class="line">Isolation <span class="title function_">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务传播行为(使用请百度)：（！多事务方法嵌套是否回滚问题）</span></span><br><span class="line">Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任何异常tyr-catch后不抛出都不会回滚</span></span><br><span class="line"><span class="comment"> * 异常回滚分类：所有的运行时异常都默认回滚</span></span><br><span class="line"><span class="comment"> * 编译时异常 throws 抛出后不回滚</span></span><br><span class="line"><span class="comment"> * 我们可以使用如下属性，对需要的异常指定回滚与否的操作：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 指定那些需要回滚(一般针对编译时异常)：</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类对象</span></span><br><span class="line">String[] rollbackForClassName() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类全类名</span></span><br><span class="line">    <span class="comment">// 抛出找不到文件异常时需要回滚,多个异常使用逗号隔开</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = &#123;FileNotFoundException.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定那些事务不需要回滚(一般针对运行时异常)：</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类对象</span></span><br><span class="line">String[] noRollbackForClassName() <span class="keyword">default</span> &#123;&#125;; <span class="comment">// 异常类全类名</span></span><br><span class="line">    <span class="comment">// 假如此计算不影响数据，指定抛出算数异常时不需要回滚</span></span><br><span class="line">    <span class="meta">@Transactional(noRollbackFor = &#123;ArithmeticException.class&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="2-事务隔离级别："><a href="#2-事务隔离级别：" class="headerlink" title="2. 事务隔离级别："></a>2. 事务隔离级别：</h3><h4 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h4><ol><li><strong>脏读</strong> (一定不能发生)：a、b 并发访问数据库，a 在事务方法中修改 val 还未提交，b 读了 val 的值此时 a 发送错误回滚。b 读到的值是无效的，这就是脏读。</li><li><strong>不可重复读</strong> (针对字段)：a 在事务方法内读取了 val，b 在此时修改了 val 的值并提交了，a 还在未完成的事务中再次读取了 val 的值。这种在一个事务中多次读取一个字段值不同的问题叫不可重复读。</li><li><strong>幻读</strong> (针对行)：a 在事务中查询 &gt;4 的 val行，b此时向表中插入或删除了几条 &gt;4 的 val 并提交了，a在事务中再次读取时数据个数发生变化，误以为多读或者少读了数据。</li></ol><h4 id="2-隔离级别："><a href="#2-隔离级别：" class="headerlink" title="2. 隔离级别："></a>2. 隔离级别：</h4><ol><li>读未提交（READ UNCOMMITTED）</li><li>读已提交 （READ COMMITTED）</li><li>可重复读 （REPEATABLE READ）</li><li>串行化 （SERIALIZABLE 几乎不可能使用）</li></ol><h4 id="3-关系表："><a href="#3-关系表：" class="headerlink" title="3. 关系表："></a>3. 关系表：</h4><table><thead><tr><th>隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td>读未提交</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>读已提交</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td>可重复读</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td>串行化</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h3 id="3-xml配置事务："><a href="#3-xml配置事务：" class="headerlink" title="3. xml配置事务："></a>3. xml配置事务：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 利用切面编程添加事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务，pointcut只是说明事务管理器要切入这些方法，</span></span><br><span class="line"><span class="comment">      advice中的method配置指明哪些方法添加事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  配置事务传播特性,transaction-manager 指向之前配置的事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method 指明那些方法是事务方法，</span></span><br><span class="line"><span class="comment">                其它属性设置请参考注解中的属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有以query开头的方法添加事务，且设置为只读属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &quot;*&quot;：为所有属性添加事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-整合-MyBatis："><a href="#Spring-整合-MyBatis：" class="headerlink" title="Spring 整合 MyBatis："></a>Spring 整合 MyBatis：</h2><h3 id="1-导入整合需要的依赖："><a href="#1-导入整合需要的依赖：" class="headerlink" title="1. 导入整合需要的依赖："></a>1. 导入整合需要的依赖：</h3><p>Spring整合Mybatis除了它们自身需要的包以外，还需要mybatis和spring整合的包 <strong>mybatis-spring</strong> 包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis 结合 spring 使用需要导入此包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 jdbc 数据源操作数据库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-新建-spring-dao-xml-对-mybatis-进行配置："><a href="#2-新建-spring-dao-xml-对-mybatis-进行配置：" class="headerlink" title="2. 新建 spring-dao.xml 对 mybatis 进行配置："></a>2. 新建 <code>spring-dao.xml</code> 对 mybatis 进行配置：</h3><h4 id="1-datasource：spring-管理数据源"><a href="#1-datasource：spring-管理数据源" class="headerlink" title="1. datasource：spring 管理数据源"></a>1. datasource：spring 管理数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">            useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;991314&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通常以上属性的value值会单独配置到一个 <code>properties</code> 文件中方便我们管理，这时需要在配置数据源的文件中添加 <code>&lt;context:property-placeholder location=&quot;classpath:database.properties&quot;/&gt;</code> 的配置引用外部属性文件。</li><li><strong>classpath</strong> ：是固定写法，表示引用类路径下的一个资源。</li><li>在 value 中填入配置文件的值只需使用 <code>$&#123;key&#125;</code> 即可，为了防止配置文件中的 key 与 spring 中自带的属性冲突通常会在数据源配置的 key 前加上 <strong>jdbc.</strong> 的前缀(如 username 就是 spring 自带的属性则我们配置文件中不能使用 username ，可以改为 jdbc.username )。</li></ul><h4 id="2-在-MyBatis-Spring-中，可使用-SqlSessionFactoryBean-来创建-SqlSessionFactory-。将配置的数据源赋给-sqlSessionFactory-的-dataSource-属性"><a href="#2-在-MyBatis-Spring-中，可使用-SqlSessionFactoryBean-来创建-SqlSessionFactory-。将配置的数据源赋给-sqlSessionFactory-的-dataSource-属性" class="headerlink" title="2. 在 MyBatis-Spring 中，可使用 SqlSessionFactoryBean 来创建 SqlSessionFactory 。将配置的数据源赋给 sqlSessionFactory 的 dataSource 属性"></a>2. 在 MyBatis-Spring 中，可使用 SqlSessionFactoryBean 来创建 SqlSessionFactory 。将配置的数据源赋给 sqlSessionFactory 的 dataSource 属性</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定mybatis配置文件，spring才能读取到配置文件。</span></span><br><span class="line"><span class="comment">         否则在此利用SqlSessionFactoryBean属性代替mybatis配置所有设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 它的属性还能替换mybatis中的配置，例如下为代替mybatis注册Mapper.xml文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:ruoxijun/mapper/*.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-在-MyBatis-Spring-中-SqlSessionTemplate-就是-SqlSession，需要利用构造函数传入我们配置好的sqlSessionFactory"><a href="#3-在-MyBatis-Spring-中-SqlSessionTemplate-就是-SqlSession，需要利用构造函数传入我们配置好的sqlSessionFactory" class="headerlink" title="3. 在 MyBatis-Spring 中 SqlSessionTemplate 就是 SqlSession，需要利用构造函数传入我们配置好的sqlSessionFactory"></a>3. 在 MyBatis-Spring 中 SqlSessionTemplate 就是 SqlSession，需要利用构造函数传入我们配置好的sqlSessionFactory</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 官方推荐使用 index=&quot;0&quot;，此处我们使用name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-在spring的总配置文件applicationContext-xml中导入mybatis的spring配置："><a href="#4-在spring的总配置文件applicationContext-xml中导入mybatis的spring配置：" class="headerlink" title="4. 在spring的总配置文件applicationContext.xml中导入mybatis的spring配置："></a>4. 在spring的总配置文件<code>applicationContext.xml</code>中导入mybatis的spring配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入对mybatis的配置，与正常的导入一个beans.xml文件一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写-MapperImpl-实现类："><a href="#3-编写-MapperImpl-实现类：" class="headerlink" title="3. 编写 MapperImpl 实现类："></a>3. 编写 MapperImpl 实现类：</h3><p>对数据库进行操作除编写 Mapper接口 定义方法和配置 Mapper.xml 以外，spring中新增一项那就是还需要给Mapper接口编写<strong>MapperImpl实现类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123; <span class="comment">// 实现Mapper接口</span></span><br><span class="line">    <span class="comment">// 此类中需要获取SqlSession，之前说过MyBatis-Spring中SqlSessionTemplate就是SqlSession</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 在实现的方法中：获取Mapper实现类调用方法并返回结果</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-将MapperImpl实现类配置为bean："><a href="#4-将MapperImpl实现类配置为bean：" class="headerlink" title="4. 将MapperImpl实现类配置为bean："></a>4. 将MapperImpl实现类配置为bean：</h3><p>在 <code>applicationContext.xml</code> 中配置MapperImpl类并将sqlSession注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-测试："><a href="#5-测试：" class="headerlink" title="5. 测试："></a>5. 测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context=<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> (UserMapper) context.getBean(<span class="string">&quot;userMapper&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.getUserList();</span><br></pre></td></tr></table></figure><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><ul><li>除4中那样直接实现Mapper接口外，还提供了一种继承<strong>SqlSessionDaoSupport</strong>类+实现Mapper接口的方式，这样我们不必再自己去获取写获取sqlsession方法，它的内部提供了**<code>getSqlSession</code>**方法获取SqlSession。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>applicationContext.xml</code> 中配置MapperImpl的bean时，可以选择只注入sqlSessionFactory表示我们连<code>spring-dao.xml</code>的第2步的第3小步也可省略：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 两参数注入择一即可，也可同时注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务管理："><a href="#事务管理：" class="headerlink" title="事务管理："></a>事务管理：</h3><p>spring中事务 <strong>利用 AOP 给指定方法配置事务</strong> ，当方法中的语句出错时，那么此方法中所有有关数据库数据的操作的事务都不会提交。并且对某方法增加事务只需在 beans.xml 进行配置，不用改动原程序这正是aop的概念。</p><p><strong>实例</strong>：在 <code>spring-dao.xml</code>  对 mybatis 进行新增事务配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.要开启Spring的事务处理功能，在Spring配置文件中创建DataSourceTransactionManager对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置数据源，构造方法和set注入二选一即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.结合aop实现事务的置入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.1 配置事务通知(配置事务的类，由spring提供) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定给SQL的那些方法提供事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 常用，一般使用下一项即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.2 配置事务切入，给指定方法设置事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.mapper.UserMapperImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mybatis逆向工程（mybatis-generator）："><a href="#mybatis逆向工程（mybatis-generator）：" class="headerlink" title="mybatis逆向工程（mybatis.generator）："></a>mybatis逆向工程（mybatis.generator）：</h2><ul><li>导入依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在项目根目录下新建xml配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 去除注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置数据库连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm_crud?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;991314&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定javabean生成（pojo）的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.bean&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定SQL映射文件生成位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.dao&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper接口生成位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;ruoxijun.dao&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定每个表的生成策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;tbl_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Department&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>新建测试类运行代码生成文件：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">overwrite</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 指定配置文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">configFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;mbg.xml&quot;</span>);</span><br><span class="line"><span class="type">ConfigurationParser</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationParser</span>(warnings);</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> cp.parseConfiguration(configFile);</span><br><span class="line"><span class="type">DefaultShellCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShellCallback</span>(overwrite);</span><br><span class="line"><span class="type">MyBatisGenerator</span> <span class="variable">myBatisGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis逆向工程 </tag>
            
            <tag> spring与mybatis整合 </tag>
            
            <tag> mybatis代码生成器 </tag>
            
            <tag> 事务隔离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解开发与Aop</title>
      <link href="/2020/08/16/java/ssm/spring/aop/"/>
      <url>/2020/08/16/java/ssm/spring/aop/</url>
      
        <content type="html"><![CDATA[<h1 id="注解开发与Aop"><a href="#注解开发与Aop" class="headerlink" title="注解开发与Aop"></a>注解开发与Aop</h1><h2 id="注解开发："><a href="#注解开发：" class="headerlink" title="注解开发："></a>注解开发：</h2><h3 id="1-注解实现自动装配："><a href="#1-注解实现自动装配：" class="headerlink" title="1. 注解实现自动装配："></a>1. 注解实现自动装配：</h3><p>在使用注解之前我们还需要在bean文件中加入注解驱动（在spring4之后使用注解开发要保证 <strong>aop</strong> 包导入了）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Cat&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;猫&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狗&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用 <strong>@Autowired</strong> 注解：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">// Autowired表示自动装配，它有个required属性默认为true</span></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 注解的成员无get,set等方法也能自动装配</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="comment">// required为false时表示该属性可以为null，即bean文件中没有该对象时不会报错</span></span><br><span class="line">    <span class="meta">@Autowired(required=false)</span> </span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>原理</strong> ：先按照 <strong>类型</strong> 在容器中寻找相应组件，找到多个时根据 <strong>bean id</strong> 匹配（使用变量名与id进行匹配），未找到时报错。</p><ol start="2"><li><strong>@Autowired</strong> 和 <strong>@Qualifier(value &#x3D; “id”)</strong> 结合使用可指定装配某一个bean：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="comment">// 默认使用变量名与id匹配</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;cat&quot;)</span> <span class="comment">// 指定的一个id与bean id匹配</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><p>扩展：**@Autowired** 和 <strong>@Qualifier(value &#x3D; “id”)</strong> 还能为方法使用，注意使用 Autowired 注解的方法会装配后自动运行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="comment">// 为方法的每一个参数自动赋值，原理一样</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="meta">@Qualifier(&quot;a&quot;)</span> A a)</span>&#123; <span class="comment">// 为某参数指定bean</span></span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>java中jdk自带有一个和 <strong>@Autowired</strong> 类似的注解 <strong>@Resource</strong>：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="comment">// 自动匹配</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog&quot;)</span> <span class="comment">// 指定对象，也可指定类型type = Dog.class</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意Resource与Autowired的区别：Resource先按照名称装配，其次按照类型装配，扩展性强。</p><p>Resource与Autowired都可以标注在属性的set方法上，且Autowired只能在加入了IOC容器中的类才能使用。</p><h3 id="2-注解实现bean功能："><a href="#2-注解实现bean功能：" class="headerlink" title="2. 注解实现bean功能："></a>2. 注解实现bean功能：</h3><p>在使用这些注解之前还需要在bean文件中添加下面这句，spring会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注入到IOC容器中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启包注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 类排除： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type=&quot;annotation&quot;：按照指定注解排除，assignable：排除指定类</span></span><br><span class="line"><span class="comment">             expression：给出全类名即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;注解全类名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 类指定：（使用与类排除基本一致）</span></span><br><span class="line"><span class="comment">         use-default-filters=&quot;false&quot;：必须禁用默认规则才会生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;ruoxijun.service&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;assignable&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;指定类全类名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 此注解同时启用了注释驱动的 <code>&lt;context:annotation-config/&gt;</code> 配置</p><ul><li>注解实现bean（ <strong>@Component</strong> ）与属性值注入（ <strong>@value</strong> ）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件，等价于：&lt;bean id=&quot;cat&quot; class=&quot;ruoxijun.pojo.cat&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 默认id类名首字母小写，可传入字符串更改为指定id</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="comment">// 属性注入,等价于：&lt;property name=&quot;name&quot; value=&quot;猫&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;猫&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Component</strong> 衍生注解：</li></ul><p>java中web开发按照MVC分为dao，service，controller层。</p><table><thead><tr><th>包层</th><th>注解</th></tr></thead><tbody><tr><td><strong>dao</strong></td><td><strong><code>@Repository</code></strong></td></tr><tr><td><strong>service</strong></td><td><strong><code>@Service</code></strong></td></tr><tr><td><strong>controller</strong></td><td><strong><code>@Controller</code></strong></td></tr></tbody></table><p>这三个注解的作用与 <strong>@Component</strong> 作用相同只是表达的含义不同而已。</p><ul><li>作用域，在类的上方使用注解 <strong>@Scope</strong> ：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定作用域，等价于：&lt;bean id=&quot;cat&quot; class=&quot;ruoxijun.pojo.cat&quot; scope=&quot;singleton&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span> <span class="comment">//单例模式，默认</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">//原型模式</span></span><br></pre></td></tr></table></figure><h3 id="3-注解实现配置类（bean文件）："><a href="#3-注解实现配置类（bean文件）：" class="headerlink" title="3. 注解实现配置类（bean文件）："></a>3. 注解实现配置类（bean文件）：</h3><ul><li>java类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;若惜君&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用 <strong>@Configuration</strong> 实现一个 bean 配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 代表这是一个配置类，等同与beans.xml文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 等同于一个 bean标签，方法名就是id，返回值就是class</span></span><br><span class="line">    <span class="comment">// @Bean(&quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>AnnotationConfigApplicationContext</code>构造器获取Spring上下文对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Config.class);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"><span class="comment">// getBean(Config.class) 注意配置类本身也是一个组件</span></span><br></pre></td></tr></table></figure><p>使用组件 bean 对象调用方法也同样可以拿到对应对象，注解有个 <code>proxyBeanMethods</code> 属性默认为 true（单实例）。</p><ul><li>此外还有两个注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扫描包注解，等同于：&lt;context:component-scan base-package=&quot;ruoxijun&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;ruoxijun&quot;)</span></span><br><span class="line"><span class="comment">// 导入其它配置类的bean，也可以导入组件类会在此类中自动生成组件bean</span></span><br><span class="line"><span class="meta">@Import(Config.class)</span> <span class="comment">// 可使用逗号分隔导入多个</span></span><br></pre></td></tr></table></figure><h2 id="AOP知识储备："><a href="#AOP知识储备：" class="headerlink" title="AOP知识储备："></a>AOP知识储备：</h2><blockquote><p>  OOP：Object Oriented Programming 面向对象编程</p><p>  AOP：Aspect Oriented Programming 面向切面编程(基于OOP)</p><p>  面向切面编程：指在程序运行期间，将某段代码 <strong>动态切入到指定位置</strong> 运行。</p></blockquote><p><img src="/images/java/AOP%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD.jpg" alt="AOP专业术语"></p><h3 id="1-代理模式："><a href="#1-代理模式：" class="headerlink" title="1. 代理模式："></a>1. 代理模式：</h3><p>客户类与目标类之间存在中介类，中介类就称之为代理类。</p><ul><li>优点：可以限制客户类直接访问目标类，实现了解耦。同时完成业务时可再在其中附加一些功能，完成功能增强。</li><li>缺点：目标类较多时会产生大量的代理类。</li></ul><h3 id="2-动态代理（了解原理）："><a href="#2-动态代理（了解原理）：" class="headerlink" title="2. 动态代理（了解原理）："></a>2. 动态代理（了解原理）：</h3><p>利用jdk反射机制创建代理对象，并动态的指定要代理的目标类。我们只需创建目标对象，后利用如下两个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">InvocationHandler：实现动态代理的接口，invoke方法，表示代理对象要执行的方法，如下参数：</span><br><span class="line">    Object proxy：代理对象</span><br><span class="line">    Method method：method.invoke(目标对象实例, args) <span class="comment">// 执行目标对象方法</span></span><br><span class="line">    <span class="comment">// 在目标对象方法执行前后我们可以定义我们需要的方法</span></span><br><span class="line">    Object[] args：目标对象方法的参数</span><br><span class="line">    <span class="comment">// invoke的返回值就是代理对象执行方法后的返回值</span></span><br><span class="line">    </span><br><span class="line">Proxy：创建动态代理对象，通过它静态的 newProxyInstance 方法，如下参数：</span><br><span class="line">    ClassLoader loader：通过反射获取类加载器:目标类对象.getClass().getClassLoader()</span><br><span class="line">    Class&lt;?&gt;[] interfaces：目标对象实现的所有接口数组:目标类对象.getClass().getInterfaces()</span><br><span class="line">    InvocationHandler h：代理类要完成功能（上方实现的 InvocationHandler 接口类）</span><br></pre></td></tr></table></figure><h3 id="3-动态代理实现案例："><a href="#3-动态代理实现案例：" class="headerlink" title="3. 动态代理实现案例："></a>3. 动态代理实现案例：</h3><p>jdk动态代理的弊端时目标类必须有实现的接口，所以需要为目标类编写接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 目标方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;A的show方法执行了&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标对象(需要被代理的对象)</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">// 添加功能</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;方法执行之前&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> method.invoke(a,args);</span><br><span class="line">                System.out.println(<span class="string">&quot;方法执行之后&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 获取目标类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> a.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获取目标类的实现接口数组</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = a.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 创建动态代理对象</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">o</span> <span class="operator">=</span> (A) Proxy.newProxyInstance(loader,interfaces,in);</span><br><span class="line">        <span class="comment">// 调用动态代理对象的实现方法</span></span><br><span class="line">        o.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP的实现："><a href="#AOP的实现：" class="headerlink" title="AOP的实现："></a>AOP的实现：</h2><p>Spring使用AOP需要导入 <em><strong>aspectjweaver</strong></em> 依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-API接口方式实现："><a href="#1-API接口方式实现：" class="headerlink" title="1. API接口方式实现："></a>1. API接口方式实现：</h3><ul><li>Spring实现AOP主要有以下接口：</li></ul><ol><li>MthodBeforeAdvice：目标方法实施前</li><li>AfterReturningAdvice：目标方法实施后</li><li>ThrowsAdvice 异常抛出</li><li>IntroductionAdvice 为目标类添加新的属性和方法。可以构建组合对象来实现多继承</li><li>MethodInterceptor 方法拦截器，环绕在方法执行前之前，在方法执行后之前</li></ol><ul><li><strong>定义目标接口和实现类</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123; <span class="comment">// 目标接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123; <span class="comment">// 目标类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;add User&quot;</span>); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;delete User&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>代理类功能实现准备：</strong></li></ul><p><strong>MethodBeforeAdvice接口</strong> 根据需求在方法执行前实现额外功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBefore</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123; <span class="comment">// 方法执行前接口</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 参数解析：参1：目标方法对象，参2：目标方法参数，参3：目标对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MethodBeforeAdvice：&quot;</span>+o.getClass().getName()+</span><br><span class="line">                <span class="string">&quot;类&quot;</span>+method.getName()+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AfterReturningAdvice接口</strong> 根据需求在方法执行后实现额外功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAfter</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123; <span class="comment">// 方法执行后接口</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">// 参数解析：参1：目标方法返回值，参2：目标方法对象，参3：目标方法参数，参4：目标对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AfterReturningAdvice：&quot;</span>+o1.getClass().getName()+</span><br><span class="line">                <span class="string">&quot;类&quot;</span>+method.getName()+<span class="string">&quot;方法,返回&quot;</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>bean文件完成代理类配置</strong>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 先将所有类注册为bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userBefore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserBefore&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userAfter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserAfter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP需要在beans标签中导入aop约束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点配置：</span></span><br><span class="line"><span class="comment">         id：取名，expression：表达式（指定要执行的aop方法） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 执行环绕增加：</span></span><br><span class="line"><span class="comment">         advice-ref：实现了接口的类</span></span><br><span class="line"><span class="comment">         pointcut-ref：切入点（pointcut）的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;userBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不使用配置的切入点，pointcut：直接指定切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;userAfter&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 这里看似获取目标类，实则获取到的是代理类。     </span></span><br><span class="line"><span class="comment">// 因为返回的是代理类，所以这里只能使用接口类型接受对象。使用目标类型会报错</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.add();</span><br></pre></td></tr></table></figure><h3 id="2-自定义类实现："><a href="#2-自定义类实现：" class="headerlink" title="2. 自定义类实现："></a>2. 自定义类实现：</h3><p>之前我们分别使用两个类分别实现两个接口的方式，在目标方法执行前后的额外功能实现，再在bean文件中配置组合成了代理类。现在我们需要在一个自定义类中，定义在目标方法执行前后的额外功能实现，通过这个自定义类和bean文件配置来实现代理类。</p><ul><li>自定义类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义方法，实现目标方法执行前执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义方法，实现目标方法执行后执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置bean文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserProxy&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义切面，ref自定义的切面类bean id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;userProxy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:后跟切入点，指定目标方法执行前需要执行的方法，method值指定方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定目标方法执行后需要执行的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>高级配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- order：多切面时指定当前切面的优先执行等级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;countAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- after-returning：目标方法正常执行结束返回之后</span></span><br><span class="line"><span class="comment">                returning：指定通知方法接收返回值的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span> = <span class="string">&quot;aspectAfterReturning&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">pointcut-ref</span> = <span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">returning</span> = <span class="string">&quot;result&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- after-throwing：目标方法抛出异常之后</span></span><br><span class="line"><span class="comment">                throwing：指定通知方法接收产生异常的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span> = <span class="string">&quot;aspectAfterThrowing&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">pointcut-ref</span> = <span class="string">&quot;pointcut&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">throwing</span> = <span class="string">&quot;exception&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-注解实现AOP："><a href="#3-注解实现AOP：" class="headerlink" title="3. 注解实现AOP："></a>3. 注解实现AOP：</h3><ul><li>使用注解之前需要开启AOP的注解支持：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启对aop注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将该自定义类注册为bean，也可在类中使用注解注册 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.proxy.UserProxy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将自定义类修改为注解注册的aop类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProxy</span> &#123;</span><br><span class="line">    <span class="comment">// @Before定义目标方法执行前的操作，参数为execution表达式指定给那些方法添加</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @After定义目标方法执行后的操作</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// @Around 环绕通知，类似于一个完整的动态代理</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* ruoxijun.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕开始&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">re</span> <span class="operator">=</span> pjp.proceed(); <span class="comment">// 让目标开始执行方法，并返回方法返回值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕结束&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> re; <span class="comment">// 返回方法执行后的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用注解如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span> <span class="comment">// 在目标方法之前</span></span><br><span class="line"><span class="meta">@After</span> <span class="comment">// 在目标方法结束后</span></span><br><span class="line"><span class="meta">@AfterReturning</span> <span class="comment">// 在目标方法正常返回之后</span></span><br><span class="line"><span class="meta">@AfterThrowing</span> <span class="comment">// 在目标方法抛出异常之后运行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span> <span class="comment">// 定义目标方法执行时环绕的操作</span></span><br></pre></td></tr></table></figure><h3 id="4-Spring-AOP-执行流程："><a href="#4-Spring-AOP-执行流程：" class="headerlink" title="4. Spring AOP 执行流程："></a>4. Spring AOP 执行流程：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 方法前置</span></span><br><span class="line">    pjp.procced(args) <span class="comment">// 方法执行</span></span><br><span class="line">    <span class="meta">@AfterReturning</span> <span class="comment">// 方法正常返回</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception exception) &#123;</span><br><span class="line">    <span class="meta">@AfterThrowing</span> <span class="comment">// 方法抛出异常时</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 方法执行完成后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-spring-4-执行流程："><a href="#1-spring-4-执行流程：" class="headerlink" title="1. spring 4 执行流程："></a>1. spring 4 执行流程：</h4><p>正常执行顺序：<code>Before -&gt; After -&gt; AfterReturning</code></p><p>异常执行顺序：<code>Before -&gt; After -&gt; AfterThrowing</code></p><p>添加环绕通知(环绕优先)：<code>环绕前置 -&gt; Before -&gt;方法执行 -&gt; 环绕后置 -&gt; After -&gt; AfterReturning</code></p><h4 id="2-spring-5-执行流程："><a href="#2-spring-5-执行流程：" class="headerlink" title="2. spring 5 执行流程："></a>2. spring 5 执行流程：</h4><p>正常执行顺序：<code>Before -&gt; AfterReturning -&gt; After</code></p><p>异常执行顺序：<code>Before -&gt; AfterThrowing -&gt; After</code></p><p>添加环绕通知：<code>环绕前置 -&gt; Before -&gt;方法执行 -&gt; AfterReturning -&gt; After -&gt; 环绕后置</code></p><h2 id="AOP细节："><a href="#AOP细节：" class="headerlink" title="AOP细节："></a>AOP细节：</h2><p>spring注解实现AOP只对通知方法内的参数做检查，对通知方法的修饰符,返回值,方法名都无要求可以任意。但配置（xml）实现AOP时必须保证方法的修饰符是可以让配置文件访问到的。</p><h3 id="1-获取方法基本信息："><a href="#1-获取方法基本信息：" class="headerlink" title="1. 获取方法基本信息："></a>1. 获取方法基本信息：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;)</span></span><br><span class="line"><span class="comment">// 在切面类的通知方法的参数中添加一个JoinPoint参数，这个参数能拿到方法信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aspectBefore</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取方法参数</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    <span class="comment">// 方法签名</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    signature.getName(); <span class="comment">// 方法名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取方法返回值："><a href="#2-获取方法返回值：" class="headerlink" title="2. 获取方法返回值："></a>2. 获取方法返回值：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;,</span></span><br><span class="line"><span class="meta">        returning = &quot;result&quot;)</span></span><br><span class="line"><span class="comment">// AfterReturning的returning属性指定接收方法返回值的参数，并添加同名的参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aspectAfterReturning</span><span class="params">(Object result)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法的返回值：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-方法产生异常后获取异常："><a href="#3-方法产生异常后获取异常：" class="headerlink" title="3. 方法产生异常后获取异常："></a>3. 方法产生异常后获取异常：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;,</span></span><br><span class="line"><span class="meta">        throwing = &quot;exception&quot;)</span></span><br><span class="line"><span class="comment">// AfterThrowing的throwing属性指定接收方法产生异常的参数，并添加Exception类型的同名参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aspectAfterThrowing</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法抛出异常：&quot;</span>+exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-简化切入点表达式："><a href="#4-简化切入点表达式：" class="headerlink" title="4. 简化切入点表达式："></a>4. 简化切入点表达式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* ruoxijun.service.CountImpl.*(..))&quot;)</span> <span class="comment">// 切入点写入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 填写上方方法(其它方法需要在同样的execution表达式直接复用即可)</span></span><br><span class="line"><span class="meta">@Before(value = &quot;init()&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="5-expression表达式："><a href="#5-expression表达式：" class="headerlink" title="5. expression表达式："></a>5. expression表达式：</h3><p>原型：<code>execution(访问权限 返回值类型 方法全类名(参数列表))</code></p><p>统配符：<code>*</code>：任意个字符(在方法参数中表示任意一个参数)，<code>..</code>：任意个参数</p><p><code>execution(* ruoxijun.service.UserServiceImpl.*(..))</code></p><p> expression表达式分为4个部分加上expression关键字为5个部分：</p><ol><li>第一部分“ * ”号表示返回值，这里表示可以为任何类型</li><li>第二部分为包名</li><li>第三部分为类名，我们这里是<code>UserServiceImpl</code>这个类，也可以 <strong><code>service.*</code></strong> 表示service包中的<strong>所有类</strong></li><li>第四部分为方法名和参数，“ * ”号表示所有方法括号内的 “ .. “ 表示任何参数。</li></ol><h3 id="6-指定动态代理的实现方式："><a href="#6-指定动态代理的实现方式：" class="headerlink" title="6. 指定动态代理的实现方式："></a>6. 指定动态代理的实现方式：</h3><p>开启对aop注解的支持标签中 <strong><code>proxy-target-class</code></strong> 属性能控制动态代理的实现方式，Spring <strong>默认使用JDK基于接口的代理实现即属性值为false</strong> ， <strong>属性值修改为true则使用 cglib 模拟子类继承的方式</strong> 实现动态代理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启对aop注解的支持，并使用cglib实现动态代理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>动态代理的目标类都需要有接口的实现，并使用时需要利用接口类型接受bean这是因为此时得到的类时一个Porxy类它也实现了该接口，这都是使用jdk实现动态代理。使用cglib进行代理便可以不需要接口给任意类添加代理，返回的bean也是本类型。</p><p><strong>spring5 自动根据运行类选择JDK或CGLIB代理，无需设置proxy-target-class属性。</strong></p><h3 id="7-多切面运行："><a href="#7-多切面运行：" class="headerlink" title="7. 多切面运行："></a>7. 多切面运行：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注此类为一个切面</span></span><br><span class="line"><span class="meta">@Order(1)</span> <span class="comment">// 当有多个切面时可添加此注解，设置当前切面的优先级，值小的优先级高</span></span><br></pre></td></tr></table></figure><p>优先级高的切面前置方法先执行，后置方法越后执行。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> aop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 基础</title>
      <link href="/2020/08/14/java/ssm/spring/index/"/>
      <url>/2020/08/14/java/ssm/spring/index/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-入门"><a href="#Spring-入门" class="headerlink" title="Spring 入门"></a>Spring 入门</h1><blockquote><p>  框架：对高通用性可重用代码进行高质量抽取的一种设计，形成多个可重用的模块集合后而组成对某个领域整体的解决方案。</p><p>  框架编程流程：导包、编写配置、测试、编写业务。</p></blockquote><h2 id="Spring-简介："><a href="#Spring-简介：" class="headerlink" title="Spring 简介："></a>Spring 简介：</h2><ul><li>Spring 是一个开源免费，轻量级，非入侵式的框架</li><li>重点核心：控制反转（ <strong>IOC</strong> )，面向切面编程（ <strong>AOP</strong> ） </li><li>支持事务的处理，对其他框架整合支持</li><li><strong>弊端</strong> ：配置十分繁琐，人称 “配置地狱”</li></ul><h2 id="Spring组成："><a href="#Spring组成：" class="headerlink" title="Spring组成："></a>Spring组成：</h2><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。</p><p><img src="/images/java/spring_framework.gif" alt="Spring 框架是一个分层架构，由 7 个定义良好的模块组成。"></p><h3 id="添加-Spring-依赖："><a href="#添加-Spring-依赖：" class="headerlink" title="添加 Spring 依赖："></a>添加 Spring 依赖：</h3><p>由上可知Spring分为许多模块，在使用Spring时我们选择导入 <strong><code>spring-webmvc</code></strong> 依赖。此包中包含了多数我们需要使用的模块。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="IOC（控制反转）："><a href="#IOC（控制反转）：" class="headerlink" title="IOC（控制反转）："></a>IOC（控制反转）：</h2><blockquote><p>  IOC：Inversion Of Control 控制反转</p></blockquote><p>控制反转将对象的创建交给了IOC容器，<strong>IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建</strong>。</p><p>Spring在初始化时先读取配置文件，根据配置文件创建对象并存入<strong>IOC容器</strong>，根据使用再从<strong>IOC容器</strong>中取出需要的对象，即获取对象的方式反转了。</p><h2 id="简单入门实例："><a href="#简单入门实例：" class="headerlink" title="简单入门实例："></a>简单入门实例：</h2><h3 id="1-定义两个类："><a href="#1-定义两个类：" class="headerlink" title="1. 定义两个类："></a>1. 定义两个类：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//使用了 lombok 注解快速生成了必要方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str; <span class="comment">// 一个字符串</span></span><br><span class="line">    <span class="keyword">private</span> Hi hi; <span class="comment">// 一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hi</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-在-resources-文件夹中创将-Bean-配置文件："><a href="#2-在-resources-文件夹中创将-Bean-配置文件：" class="headerlink" title="2. 在 resources 文件夹中创将 Bean 配置文件："></a>2. 在 resources 文件夹中创将 Bean 配置文件：</h3><p>在 resources 文件夹下创建 <strong><code>applicationContext.xml</code></strong> （推荐命名，也可以自定义命名）文件，此文件也称之为 <strong>bean</strong> 文件因为其内部的一个<code>bean</code>标签就表示一个对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bean文件的文件头标签与申明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- bean：对象配置标签</span></span><br><span class="line"><span class="comment">         id：唯一标识符</span></span><br><span class="line"><span class="comment">         class：对象的全限定名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property：属性赋值，该成员变量必须有set方法(set注入)</span></span><br><span class="line"><span class="comment">             name：对应对象的某一属性（根据set方法决定，</span></span><br><span class="line"><span class="comment">             与类中属性的名无关，它是set后首字母小写相关联）</span></span><br><span class="line"><span class="comment">             value：为该属性赋值（只能是基本类型或String值） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;World&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- name：当前对象别名，且可使用“,”逗号“;”分号或者空格三种分隔符取多个别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;property&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref：为成员对象引用bean对象，值为bean的id或别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 给bean（对象）取别名，不常用</span></span><br><span class="line"><span class="comment">         name：需要取别名bean的id</span></span><br><span class="line"><span class="comment">         alias：别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;helloAlias&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-编写测试类："><a href="#3-编写测试类：" class="headerlink" title="3. 编写测试类："></a>3. 编写测试类：</h3><p>spring 中有一个接口 <strong>ApplicationContext</strong> 它就代表 IOC 容器接口，它的实现类可以帮我们来获取对象。</p><p>xml 配置对象（bean），可以通过 <strong>ClassPathXmlApplicationContext</strong> 类来获取。它会获取resources文件夹下指定的xml配置文件，所以传入参数时请以resources为根目录传入bean文件的完整路径名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 通过bean文件(xml)获取Spring上下文对象，可传入多个bean文件用“,”分隔。</span></span><br><span class="line"><span class="comment"> * 2. 容器启动前所有的bean实例化为对象，后存入容器了，等待被调用（getBean）。</span></span><br><span class="line"><span class="comment"> * 3. new FileSystemXmlApplicationContext(&quot;绝对路径&quot;);//配置文件在其它位置时可使用此类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 上方代码执行后 bean.xml 内的 bean 对象已创建完成。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 getBean 方法取出对象，并且返回的是Object类型</span></span><br><span class="line">System.out.println(context.getBean(<span class="string">&quot;hi1&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBean 传入bean的id（或则别名）作为参数，获取对应的对象</span></span><br><span class="line"><span class="type">Hello</span> <span class="variable">hello1</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>); <span class="comment">// id 获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型获取，只能存在一个该类型的bean时才能成功。否则报错</span></span><br><span class="line"><span class="comment">// User user = context.getBean(User.class); //类型获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参2传入对象对应类型的类对象，将返回对应类型(参1也可以是id)</span></span><br><span class="line"><span class="type">Hello</span> <span class="variable">hello2</span> <span class="operator">=</span>context.getBean(<span class="string">&quot;Hello&quot;</span>,Hello.class); <span class="comment">// 别名获取</span></span><br><span class="line">System.out.println(hello1+<span class="string">&quot;\n&quot;</span>+hello2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBean同一个bean拿到的是同一个对象（spring默认是单例的）</span></span><br><span class="line">System.out.println(hello1==hello2);</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello(str=property, hi=Hi(str=World))</span><br><span class="line">Hello(str=property, hi=Hi(str=World))</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="4-import-关联配置文件："><a href="#4-import-关联配置文件：" class="headerlink" title="4. import 关联配置文件："></a>4. import 关联配置文件：</h3><p>此外我们在了解一下<strong>bean文件导入</strong>。如我们将入门案例中bean的 <code>hi1</code> 与 <code>hi2</code> 对象（标签）移到新建名为**<code>hi.xml</code><strong>的bean文件中再回到</strong><code>applicationContext.xml</code><strong>添加如下配置引入<code>hi.xml</code>。不改变其它内容你会发现程序一切正常，这说明我们将<code>hi.xml</code>中的bean成功引入到了</strong><code>applicationContext.xml</code>**中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- import：导入其他的bean文件，resource：文件的相对路径</span></span><br><span class="line"><span class="comment">    当有多个bean文件时，可在一个主bean文件中，使用import导入合并其它需要的bean。</span></span><br><span class="line"><span class="comment">    当多个bean的id或者别名重名时后导入的会覆盖先导入的。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;hi.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DI（依赖注入，反射赋值）："><a href="#DI（依赖注入，反射赋值）：" class="headerlink" title="DI（依赖注入，反射赋值）："></a>DI（依赖注入，反射赋值）：</h2><blockquote><p>  DI：Dependency Injection 依赖注入</p></blockquote><h3 id="1-构造器注入："><a href="#1-构造器注入：" class="headerlink" title="1.构造器注入："></a>1.构造器注入：</h3><p>使用有参构造器创建对象则需要在 <strong>bean</strong> 中需要使用 <strong><code>constructor-arg</code></strong> 标签，根据属性不同分为三种方式。</p><ul><li>利用下标：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过构造方法构造对象，下标锁定</span></span><br><span class="line"><span class="comment">          index下标值从0开始，即构造函数参数的下标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-index&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;h2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用类型：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型锁定：type除基本类型，其它类型均写全限定名</span></span><br><span class="line"><span class="comment">          通过构造器参数的类型并赋值，来指定构造器创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-type&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span> <span class="attr">value</span>=<span class="string">&quot;h2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>利用参数名称（常用）：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数名锁定：name利用构造器参数的变量名称来锁定构造器，创建对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>了解直接赋值，此方式需严格按照构造器参数顺序赋值：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按顺序给构造器属性赋值，也可以搭配index，type等属性来辅助赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;constructor-arg-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;hi2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于重载的构造器需要可能需要使用多个属性来进行指定赋值，最方便的方式就是通过 <strong>name</strong> 属性赋值。</p><h3 id="2-Set-注入（重点）："><a href="#2-Set-注入（重点）：" class="headerlink" title="2. Set 注入（重点）："></a>2. Set 注入（重点）：</h3><p>之前我们已经学过了两种类型的Set注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;values&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.基本类型与String类型利用 value 注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.bean创建的对象利用 ref 引用bean，值为bean对象的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 除 ref 引用外，还可以利用内部 bean 实现对象注入(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注意：内部bean只能在内部使用，外部无法引用该bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其它类型的Set注入( <strong>除字符串和基本类型以外其它所有的复杂类型都在 property 标签内进行</strong> )：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.array标签数组注入，value为每一项的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arrs&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>index0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>index1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 4.list标签list集合注入，value为每一项的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>listValue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如需对象可使用bean，&lt;ref bean=&quot;beanId&quot;/&gt;等标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 5.map标签map集合注入，entry中有key和value属性添加值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- value-ref（key-ref）属性可引用bean对象，也可使用内部bean。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 6.set标签set集合注入，一个value为一项元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>setValue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 7.property --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pro&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>value<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 8.空字符串和null值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 空字符串值：&lt;property name=&quot;empty&quot; value=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;empty&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 级联属性赋值（了解） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;book&quot;</span>/&gt;</span><span class="comment">&lt;!-- 引用对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book.name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myBook&quot;</span>/&gt;</span><span class="comment">&lt;!-- 改变引用对象属性的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置信息重用，内容基本一致只有少部分属性需要修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.User&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在此配置需要修改的属性即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 还可配置设置模板，bean中使用 abstract=&quot;true&quot; 属性，</span></span><br><span class="line"><span class="comment">         表示这个配置是抽象的不能获取实例。其它的bean通过parent属性即可使用该模板 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- bean对象默认是根据配置文件中的先后顺序创建的，如我们有些类想指定在某些类</span></span><br><span class="line"><span class="comment">         创建之后创建可以通过 depends-on=&quot;id,id2&quot; 属性，即指定的bean创建后该bean</span></span><br><span class="line"><span class="comment">         才会被创建。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-p-命名和-c-命名空间注入："><a href="#3-p-命名和-c-命名空间注入：" class="headerlink" title="3. p 命名和 c 命名空间注入："></a>3. p 命名和 c 命名空间注入：</h3><p>p和c命名空间实则就是对 <code>property</code> 和 <code>constructor-arg</code> 标签的简化使用，同时它们的作用还能防止出现标签重复。</p><ul><li><strong>p命名空间属性注入</strong>：</li></ul><p>要使用<strong>p命名空间注入</strong>需要在bean文件的头标签（beans）中添加如下属性值（IDEA中可自动生成）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><p>之前注入是利用<code>property</code>对应的name和values属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;values&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启p命名空间后bean中会多出一种p属性，“:”后面跟上此类中可set注入的属性名进行赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span> <span class="attr">p:address</span>=<span class="string">&quot;value&quot;</span> <span class="attr">p:</span>**=<span class="string">&quot;***&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可存在多个p属性值，根据bean类的属性而定。对象引用bean对象需要使用 p:属性名-ref=&quot;bean的id&quot; --&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>c命名空间构造器注入</strong>：</li></ul><p>同理需要在bean文件的头标签（beans）中添加开启<strong>c命名空间注入</strong>的属性值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><p>使用同理：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Address&quot;</span> <span class="attr">c:address</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bean-作用域："><a href="#bean-作用域：" class="headerlink" title="bean 作用域："></a>bean 作用域：</h2><p>之前 <strong><code>getBean</code> 同一个 bean 时拿到的是同一个对象</strong> ，这是因为 <strong>bean作用域</strong> 问题。bean的 <strong>scope</strong> 属性默认值为 <strong>singleton</strong> 也就是 <strong>单例模式</strong> ，所有我们拿到的对象始终是同一个的原因。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hi&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.pojo.Hi&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过改变<strong>scope</strong>属性值来改变bean的作用域，它的值有一下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">singleton <span class="comment">// 单例模式，Spring默认模式（容器启动完成之前创建对象存入容器）</span></span><br><span class="line">prototype <span class="comment">// 原型模式，每一次getBean创建一个对象</span></span><br><span class="line"><span class="comment">// 以下不常用</span></span><br><span class="line">request <span class="comment">// 同一次请求，创建一个bean</span></span><br><span class="line">session <span class="comment">// 同一次回话，创建一个bean</span></span><br><span class="line">application</span><br><span class="line">websocket</span><br></pre></td></tr></table></figure><h2 id="Spring与工厂模式："><a href="#Spring与工厂模式：" class="headerlink" title="Spring与工厂模式："></a>Spring与工厂模式：</h2><blockquote><ul><li>工厂模式：创建一个类的实例需要配置许多繁杂的属性时，我们可以通过工厂模式来完成类的创建并通过工厂的方法来获取该类的实例。在工厂类中对每个实例做了默认配置，我们只需修改我们需要的属性即可。</li><li>静态工厂：不用创建工厂本身对象，通过静态方法调用获取对象实例<ul><li>对象&#x3D;工厂类.获取实例静态方法名();</li></ul></li><li>动态工厂：需要创建工厂本身对象，调用工厂方法获取对象实例<ul><li>工厂类对象&#x3D;new 工厂类(); 对象&#x3D;工厂类对象.获取实例方法名();</li></ul></li></ul></blockquote><h3 id="1-静态工厂："><a href="#1-静态工厂：" class="headerlink" title="1. 静态工厂："></a>1. 静态工厂：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 静态工厂：</span></span><br><span class="line"><span class="comment">    class：指定工厂类</span></span><br><span class="line"><span class="comment">    factory-method：指定工厂中获取实例的方法</span></span><br><span class="line"><span class="comment">    利用constructor-arg给方法传递参数，只有一个参数时无需name属性</span></span><br><span class="line"><span class="comment">    该工厂bean获取到的对象为实例对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;staticFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneStaticFactory&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;jz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-动态工厂："><a href="#2-动态工厂：" class="headerlink" title="2. 动态工厂："></a>2. 动态工厂：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态工厂（实例工厂）</span></span><br><span class="line"><span class="comment">     1. 先注册实例工厂bean，</span></span><br><span class="line"><span class="comment">     2. 再注册工厂对应的实例bean，</span></span><br><span class="line"><span class="comment">        class：工厂生产的对象的class</span></span><br><span class="line"><span class="comment">        factory-bean：指定使用的工厂bean</span></span><br><span class="line"><span class="comment">        factory-method：指定工厂中获取实例的方法</span></span><br><span class="line"><span class="comment">        如方法需传参利用constructor-arg传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneInstanceFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该bean获取到的对象为上工厂bean指针的实例对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airPlane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlane&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAirPlane&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;jz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王五&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-FactoryBean："><a href="#3-FactoryBean：" class="headerlink" title="3. FactoryBean："></a>3. FactoryBean：</h3><p>Spring中实现了 <strong>FactoryBean接口</strong> 的类spring会自动识别为工厂类，spring会自动调用工厂方法创建实例。 <strong>FactoryBean泛型</strong> 为你需要创建的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FactoryBean&lt;AirPlane&gt; 中的泛型为你需要此工厂类为你创建实例的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirPlaneFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;AirPlane&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 返回创建对象</span></span><br><span class="line">    <span class="keyword">public</span> AirPlane <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AirPlane</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 返回创建对象的类型</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;AirPlane&gt; <span class="title function_">getObjectType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AirPlane.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 是否为单例模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终在使用时该bean会自动调用 getObject 方法获取实例对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.AirPlaneFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意该类 isSingleton 无论是否单例都只会在获取该bean时（getBean）才会 <strong>创建实例对象</strong> 。</p><h2 id="创建带生命周期方法的bean："><a href="#创建带生命周期方法的bean：" class="headerlink" title="创建带生命周期方法的bean："></a>创建带生命周期方法的bean：</h2><ul><li>在类中定义两个要作为生命周期的方法，方法名和返回值都可以随意，但此方法 <strong>参数必须为空</strong> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在构造方法之后执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;初始化时&quot;</span>); &#125; </span><br><span class="line"><span class="comment">// 单例：ioc容器关闭时 多例：不调用此方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123; System.out.println(<span class="string">&quot;销毁时&quot;</span>); &#125;</span><br></pre></td></tr></table></figure><ul><li>配置bean并指定初始和销毁方法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- init-method：指定初始化时的方法</span></span><br><span class="line"><span class="comment">    destroy-method：指定销毁时的方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.类&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-后置处理器："><a href="#Spring-后置处理器：" class="headerlink" title="Spring 后置处理器："></a>Spring 后置处理器：</h2><p>spring中实现 <strong>BeanPostProcessor</strong> 接口的类并注册为bean后被自动识别为后置处理器。该类的两个监控方法会在Spring初始化每一个bean时调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 初始化之前，参1 当前bean对象，参2bean对象name</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之前&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 初始化之后，参1 当前bean对象，参2bean对象name</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化之后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bean-生命周期总结："><a href="#bean-生命周期总结：" class="headerlink" title="bean 生命周期总结："></a>bean 生命周期总结：</h3><p><code>构造器</code> → <code>后置处理器before</code> → <code>init-method(初始化方法)</code> → <code>初始化完成</code> → <code>后置处理器after</code> → <code>(容器关闭)destroy-method(销毁方法)</code></p><h2 id="自动装配（autowire）："><a href="#自动装配（autowire）：" class="headerlink" title="自动装配（autowire）："></a>自动装配（autowire）：</h2><p>有如下三个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123; <span class="comment">// 猫</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123; <span class="comment">// 狗</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123; <span class="comment">// 人（同时管理猫和狗）</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在bean文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Cat&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;猫&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.Dog&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;狗&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置人和动物类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bean中提供了一种属性 <strong>autowire</strong> 来帮我们管理像上方这种简单的关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式会根据我们选的模式自动匹配对象对应的成员值，这里的 <strong>byName</strong> 模式表示 <strong>根据对象的成员变量名和bean文件中bean的id进行匹配</strong> ，没找到赋值为null， <strong>byName</strong> 要保证变量名与bean的id一致。</p><p>此外还有一种模式 <strong>byType</strong> ， <strong>根据对象中成员变量的类型与bean文件中bean的类型进行匹配</strong> ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p> **byType **模式有必要保证匹配的类型在bean文件中全局 <strong>唯一</strong> ，即需匹配类型在bean文件中有两个同类型的bean时将无法匹配并且 <strong>报错</strong> ，没有时赋值为null。</p><p>Spring还提供了 <strong>constructor</strong> 自动赋值利用构造器赋值，它先按照 <strong>类型自动装配</strong> 存在多个时再按照 <strong>id属性名</strong> 装配，不存在赋值为null：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ruoxijun.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;若惜君&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
            <tag> 工厂模式 </tag>
            
            <tag> 动态工厂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 动态SQL</title>
      <link href="/2020/08/11/java/ssm/mybatis/advanced/"/>
      <url>/2020/08/11/java/ssm/mybatis/advanced/</url>
      
        <content type="html"><![CDATA[<h2 id="注解，多表查询与动态SQL，缓存"><a href="#注解，多表查询与动态SQL，缓存" class="headerlink" title="注解，多表查询与动态SQL，缓存"></a>注解，多表查询与动态SQL，缓存</h2><h3 id="使用注解开发："><a href="#使用注解开发：" class="headerlink" title="使用注解开发："></a>使用注解开发：</h3><p>使用注解进行开发时要注意：注解来映射简单语句会使代码显得更加简洁，但复杂的操作，最好用 XML 来映射语句。</p><p>使用注解的方法就不用创建Mapper.xml（可以创建），因此在<code>mybatis-config.xml</code>配置文件中注册映射器时建议使用<code>mapper</code>的<strong>class</strong>属性利用Mapper接口来注册映射器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-利用注解查表（-Select）："><a href="#1-利用注解查表（-Select）：" class="headerlink" title="1. 利用注解查表（@Select）："></a>1. 利用注解查表（@Select）：</h4><p>在Mapper接口中定义查询方法，并在方法上使用 <code>@Select</code>注解，参数为SQL查询语句字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;UserPojo&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>使用按正常步骤调用方法即可。</p><p>存在多个参数时使用注解方式就能不再利用对象传参了，在参数（参数必须为基本类型）前使用<code>@Param</code>注解并给参数取别名，在SQL语句中直接**<code>#&#123;别名&#125;</code>**方式调用参数即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where name=#&#123;name&#125; and age=#&#123;age&#125;&quot;)</span></span><br><span class="line">List&lt;UserPojo&gt; <span class="title function_">findUserList</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><p>此方法定义的参数也可在Mapper.xml中直接使用，并且不用<strong>parameterType</strong>属性声明类型：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where name=#&#123;name&#125; and age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-增（Insert-）："><a href="#2-增（Insert-）：" class="headerlink" title="2. 增（Insert@）："></a>2. 增（Insert@）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">addUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><h4 id="3-改（Update-）："><a href="#3-改（Update-）：" class="headerlink" title="3. 改（Update@）："></a>3. 改（Update@）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span> String name,<span class="meta">@Param(&quot;age&quot;)</span> <span class="type">int</span> age)</span>;</span><br></pre></td></tr></table></figure><h4 id="4-删（Delete-）："><a href="#4-删（Delete-）：" class="headerlink" title="4. 删（Delete@）："></a>4. 删（Delete@）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><h3 id="Mybatis-执行流程解析："><a href="#Mybatis-执行流程解析：" class="headerlink" title="Mybatis 执行流程解析："></a>Mybatis 执行流程解析：</h3><ol><li>获取加载<strong>resources</strong>中的全局配置文件流（mybatis-config.xml）。</li><li>实例化<strong>SqlSessionFactoryBuilder</strong>调用<strong>build</strong>方法通过配置文件流解析配置文件（底层使用XMLConfigBuilder对象解析xml文件）。利用<strong>Configuration</strong>对象存储所有配置信息。</li><li><strong>SqlSessionFactory</strong>实例化。</li><li><strong>transactional</strong>事务管理器。</li><li>创建<strong>executor</strong>执行器。</li><li>创建<strong>SqlSession</strong>。</li><li>实现CRUD（SQL增删改查操作），若事务出现问题<strong>事务回滚到第4步</strong>。</li><li>查看CRUD是否执行成功，失败则<strong>回滚到第4步</strong>。</li><li>提交事务并关闭<strong>SqlSession</strong>。</li></ol><blockquote><p>之前我们说过MyBatis对数据库的增删改操作<code>SqlSession</code>必须手动提交事务（commit）才能表修改成功。Mybatis中也提供了指定提交事务的方法：</p><p> <strong><code>sqlSessionFactory.openSession(true)</code></strong> </p><p>即在创建<code>SqlSession</code>时在<code>openSession</code>方法中传入<code>true</code>参数则此<code>SqlSession</code>执行的增删改方法都会自动提交事务。</p></blockquote><h3 id="Lombok-使用："><a href="#Lombok-使用：" class="headerlink" title="Lombok 使用："></a>Lombok 使用：</h3><ol><li><p>idea在settings的插件中搜索 <strong>lombok</strong> 下载。为了使用提示功能。</p></li><li><p>导入<strong>lombok</strong>的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 建议去掉 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解与使用：</p><ul><li><strong>@Data</strong>：在 <strong>类</strong> 上，提供类所有属性的 get 和 set 方法，还提供了equals、canEqual、hashCode、toString 方法。</li><li><strong>@Setter</strong>：在 <strong>属性</strong> 上，为单个属性提供 set 方法。在 <strong>类</strong> 上，为该类所有的属性提供 set 方法， 都提供默认构造方法。</li><li><strong>@Getter</strong>：与 @Setter 类似。</li><li><strong>@Log4j</strong>：在 <strong>类</strong> 上，为类提供一个 属性名为 log 的 log4j 日志对象，提供默认构造方法。</li><li><strong>@Slf4j</strong>：日志 <strong>推荐</strong> 使用 @Slf4j ，它与 @Log4j 使用方法类似。</li><li><strong>@AllArgsConstructor</strong>：在 <strong>类</strong> 上，为类提供一个全参的构造方法，将覆盖默认的空参构造。</li><li><strong>@NoArgsConstructor</strong>：在 <strong>类</strong> 上；为类提供一个无参的构造方法。</li><li><strong>@EqualsAndHashCode</strong>：在 <strong>类</strong> 上, 可以生成 equals、canEqual、hashCode 方法。</li><li><strong>@ToString</strong>：在 <strong>类</strong> 上，可以生成所有参数的 toString 方法，还会生成默认的构造方法。</li><li><strong>@Value</strong>：在 <strong>类</strong> 上，生成含所有参数的构造方法，get 方法，还提供equals、hashCode、toString 方法。</li></ul></li></ol><h3 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h3><p>现在使用这两个表作为演示：</p><p><img src="/images/java/test2.jpg" alt="学生表和老师表"></p><p>学生表实例类（pojo）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123; <span class="comment">// get和set等方法省略...，请自行补齐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;<span class="comment">//老师对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老师表实例类（pojo）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123; <span class="comment">// get和set等方法省略...，请自行补齐</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-多对一"><a href="#1-多对一" class="headerlink" title="1. 多对一:"></a>1. 多对一:</h4><p><strong>需求</strong>：查询所用学生并且查出每个学生对应的老师。</p><p>定义Mapper接口与方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">getStudentsList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法一</strong>：Mapper.xml中通过 <code>association</code> 的<strong>select</strong>属性进行<strong>子查询</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.查询学生表，并设置结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.配置结果集为学生类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id和name默认即可不用配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association：当实体类成员变量为对象时使用，给对象设置结果集</span></span><br><span class="line"><span class="comment">             column：将传递给子查询的参数</span></span><br><span class="line"><span class="comment">             property：对应的成员变量（对象）</span></span><br><span class="line"><span class="comment">             javaType：指定该成员变量的java类型(这里使用的类型别名)</span></span><br><span class="line"><span class="comment">             select：绑定子查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeachersList&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3.作为子查询查询老师表，查询条件为父查询的tid值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeachersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方法二（建议使用）</strong>：直接使用SQL<strong>多表查询</strong>，再配置结果集映射数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.书写多表查询SQL语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">    select s.id id,s.name name,t.id tid,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2.设置结果集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为是多表查询所以所有的字段都需要映射到指定成员变量上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association：给对象设置结果集</span></span><br><span class="line"><span class="comment">        property：指定那个成员对象（成员对象变量名）</span></span><br><span class="line"><span class="comment">        javaType：对象的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置对应的结果集到该对象对应的成员变量上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-一对多："><a href="#2-一对多：" class="headerlink" title="2. 一对多："></a>2. 一对多：</h4><p><strong>需求</strong>：查询指定老师并查出该老师的所有学生。</p><p>定义Mapper接口与方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">    List&lt;Teacher&gt; <span class="title function_">findTeacher</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法一</strong>：Mapper.xml中通过 <code>association</code> 的<strong>select</strong>属性进行<strong>子查询</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 因为id字段在下方被使用，默认映射被覆盖</span></span><br><span class="line"><span class="comment">        在此必须指定id字段的映射否则不被赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collection：为集合元素指定结果集映射</span></span><br><span class="line"><span class="comment">             column：传递给子查询的参数</span></span><br><span class="line"><span class="comment">             property：对应的成员变量名</span></span><br><span class="line"><span class="comment">             javaType：该成员变量的java类型</span></span><br><span class="line"><span class="comment">             ofType：该集合元素的java类型</span></span><br><span class="line"><span class="comment">             select：绑定子查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudents&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where tid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方法二（建议使用）</strong>：直接使用<strong>多表查询</strong>，再配置结果集映射数据：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    select t.id tid,t.name tname,s.id sid,s.name sname</span><br><span class="line">    from teacher t,student s</span><br><span class="line">    where t.id=#&#123;id&#125; and t.id=s.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collection：当成员变量为集合时使用，给集合中的元素设置结果集</span></span><br><span class="line"><span class="comment">             property：对应的集合变量名</span></span><br><span class="line"><span class="comment">             ofType：指定集合中每个元素的java类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为集合中元素对象做结果集映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-多表查询总结："><a href="#3-多表查询总结：" class="headerlink" title="3. 多表查询总结："></a>3. 多表查询总结：</h4><ol><li>多对一：结果集映射到 <strong>对象</strong> 使用 <strong>association</strong> 标签</li><li>一对多：结果集映射到 <strong>集合</strong> 使用 <strong>collection</strong> 标签</li><li>绑定子查询时 <strong>column</strong> 属性中的字段值将作为参数传递到子查询中，通过 <code>#&#123;字段名&#125;</code> 直接调用</li><li><strong>javatype</strong> ：指定实体类中成员变量的java类型</li><li><strong>ofType</strong> ：当成员变量为集合时指定其元素的java类型（泛型的类型）</li><li>多对一（association），一对多（collection）可无限嵌套</li></ol><h3 id="动态sql："><a href="#动态sql：" class="headerlink" title="动态sql："></a>动态sql：</h3><p><a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">Mybatis动态SQL官方API：https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p><p>Mybatis动态SQL标签与<strong>JSTL</strong>（jsp）类似，你对动态 SQL 元素可能会感觉似曾相识。</p><h4 id="1-if："><a href="#1-if：" class="headerlink" title="1. if："></a>1. if：</h4><p>传入的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="number">3</span>);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小张&quot;</span>);</span><br></pre></td></tr></table></figure><p>if标签中<strong>test</strong>属性值就是条件，当条件成立时标签内的内容才会显现。并且你可以发现在<strong>test</strong>属性值内访问参数不需要再通过 <strong><code>#&#123;&#125;</code></strong> 就可以直接访问：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;true&quot;</span>&gt;</span>id,name<span class="tag">&lt;/<span class="name">if</span>&gt;</span> from student where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>and id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-choose、when、otherwise："><a href="#2-choose、when、otherwise：" class="headerlink" title="2. choose、when、otherwise："></a>2. choose、when、otherwise：</h4><p><strong>choose</strong>与java中的<strong>switch</strong>类似，一旦一个<strong>when</strong>满足test条件其它的就不会再判断其它<strong>when</strong>。<strong>otherwise</strong>只有当所有的when都不满足时调用。when和otherwise中可嵌套if，if中可嵌套choose。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;true&quot;</span>&gt;</span>id,name<span class="tag">&lt;/<span class="name">if</span>&gt;</span> from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span><br><span class="line">            where id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>where id=3<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and name=#&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            where 1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-trim、where、set："><a href="#3-trim、where、set：" class="headerlink" title="3. trim、where、set："></a>3. trim、where、set：</h4><ul><li><strong>where</strong>：<em>where</em> 标签在SQL语句中只在需要使用where的位置使用，并只会在<strong>子元素返回内容的情况下</strong>才插入 <strong>where</strong>关键字 。而且若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素会将它们自动去除。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>or id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>set</strong>：<em>set</em> 标签在SQL语句中只在需要使用set的位置使用，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会<strong>自动删掉额外的逗号</strong>。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update student</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name=#&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tid != null&quot;</span>&gt;</span>tid=#&#123;tid&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id !=null&quot;</span>&gt;</span>and id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行后SQL语句为 <strong><code>update student SET name=?, tid=? WHERE id=?</code></strong> 可以看到 <code>tid=#&#123;tid&#125;,</code> 后的<strong>，</strong>逗号被去除。还有 <code>and id=#&#123;id&#125;</code> 判断开头的 <code>and</code> 也自动去除。</p><ul><li><strong>trim</strong>：请到官网了解，它就是定义去除关键字的标签。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定制 where 元素的功能，去除内容开头的and或者or --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定制 set 元素的功能，去除内容末尾的逗号（，） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-foreach："><a href="#4-foreach：" class="headerlink" title="4. foreach："></a>4. foreach：</h4><ul><li>首先我们了解一下<strong>SQL片段</strong>：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sql标签：定义SQL片段</span></span><br><span class="line"><span class="comment">        id：唯一标记名</span></span><br><span class="line"><span class="comment">        标签内是需要复用的语句--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-id-name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span>or id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>and name=#&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        /* 在SQL语句中需要使用的地方通过 include 标签来引用 */</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-id-name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>foreach的使用</strong>：</li></ul><p>Mapper接口中定义方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Param注解取别名方便在SQL中调用，也可Map传参put一个List</span></span><br><span class="line">List&lt;Student&gt; <span class="title function_">findStuForeach</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Object&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>Mapper.xml中使用<strong>foreach</strong>动态编写SQL语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- collection：可遍历的集合</span></span><br><span class="line"><span class="comment">    item：遍历集合元素时的别名</span></span><br><span class="line"><span class="comment">    open：语句开始位置的值</span></span><br><span class="line"><span class="comment">    close：语句接受位置的值</span></span><br><span class="line"><span class="comment">    separator：每个item之间的分隔符</span></span><br><span class="line"><span class="comment">    标签内为每一次遍历拼接的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStuForeach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用后拼接为：<code>select * from student where id in ( ? , ? ,...)</code></p><h3 id="Mybatis-缓存："><a href="#Mybatis-缓存：" class="headerlink" title="Mybatis 缓存："></a>Mybatis 缓存：</h3><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">Mybatis 缓存官方文档：https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache</a></p><h4 id="1-缓存简介："><a href="#1-缓存简介：" class="headerlink" title="1.缓存简介："></a>1.缓存简介：</h4><p>缓存就是将用户<strong>经常查询并且不经常改变的数据</strong>放在缓存中，就不用多次从数据库中去查询重复的数据。Mybatis中默认定义了<strong>两级缓存</strong>。一级缓存默认开启，二级缓存需用手动开启。</p><h4 id="2-一级缓存："><a href="#2-一级缓存：" class="headerlink" title="2.一级缓存："></a>2.一级缓存：</h4><ul><li>一级缓存是默认开启的，也无法关闭。一个<strong>SqlSession</strong>就是一个一级缓存，一级缓存的作用域是一个<strong>SqlSession</strong>创建到关闭内。</li><li>同一个<strong>SqlSession</strong>查询同样的数据，只有第一次会从数据库查询。之后都是从缓存中获取，除非<strong>SqlSession</strong>执行清空缓存 <code>clearCache</code> 或者<strong>执行insert、update 和 delete 语句都会刷新缓存</strong>。</li></ul><p><strong>实例1</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> GetSqlSession.getSqlSession();</span><br><span class="line"><span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">mapper.getAll(); <span class="comment">// 查询表中所有数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;==================&quot;</span>);</span><br><span class="line">mapper.getAll(); <span class="comment">// 再次查询表中所有数据</span></span><br><span class="line">sqlSession1.close();</span><br></pre></td></tr></table></figure><p><strong>部分日志</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student        <span class="comment">// 第一次执行数据库查询</span></span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, tid</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 小明, <span class="number">1</span></span><br><span class="line">&lt;==        Row: <span class="number">2</span>, 小红, <span class="number">1</span></span><br><span class="line">&lt;==      Total: <span class="number">2</span></span><br><span class="line">==================</span><br><span class="line"><span class="comment">// 打印 “=” 后，日志中再未出现数据库查询操作，说明二次查询直接来自一级缓存</span></span><br></pre></td></tr></table></figure><p><strong>实例2</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> GetSqlSession.getSqlSession();</span><br><span class="line"><span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line">mapper.getAll();</span><br><span class="line">mapper.updateStudent(map); <span class="comment">// sqlSession1.clearCache()直接刷新缓存</span></span><br><span class="line">sqlSession1.commit();</span><br><span class="line">mapper.getAll();</span><br><span class="line">sqlSession1.close();</span><br></pre></td></tr></table></figure><p><strong>部分日志</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: update student SET name=?, tid=? WHERE id=?</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line"><span class="comment">// 可以看出执行了三次SQL数据库操作，说明更改数据时刷新了缓存</span></span><br></pre></td></tr></table></figure><p><strong>实例3：</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession1</span> <span class="operator">=</span> GetSqlSession.getSqlSession();</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession2</span> <span class="operator">=</span> GetSqlSession.getSqlSession();</span><br><span class="line"><span class="type">StudentMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sqlSession1.getMapper(StudentMapper.class);</span><br><span class="line"><span class="type">StudentMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sqlSession2.getMapper(StudentMapper.class);</span><br><span class="line">mapper1.getAll();</span><br><span class="line">mapper2.getAll();</span><br><span class="line">sqlSession1.close();</span><br><span class="line">sqlSession2.close();</span><br></pre></td></tr></table></figure><p><strong>部分日志</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line">...省略...</span><br><span class="line">==&gt;  Preparing: select * from student</span><br><span class="line"><span class="comment">// 执行了两次数据库查询，由此可知一个 SqlSession 对应一个一级缓存，不同一级缓存之间无法互通。</span></span><br></pre></td></tr></table></figure><h4 id="3-二级缓存："><a href="#3-二级缓存：" class="headerlink" title="3.二级缓存："></a>3.二级缓存：</h4><p>要启用全局的二级缓存，只需要在你的 SQL 映射文件（Mapper.xml）中添加一行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当然也可以配置属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>二级缓存作用域是一个Mapper.xml。也就是说只要<code>getMapper(Mapper.class)</code>对应同一个文件Mapper.xml，那么它们就是同一个二级缓存。</li><li><strong>工作机制</strong>：一个<strong>SqlSession</strong>查询一条数据，查询完成后首先会放在<strong>一级缓存</strong>中。当一级缓存（<strong>SqlSession</strong>）被<strong>关闭</strong>时一级缓存中的数据会被转存到二级缓存中。</li><li><strong>查询机制</strong>：查询数据时首先会到 <strong>二级缓存</strong> 再查询 <strong>一级缓存</strong> 最后还是没有则从<strong>数据库查询</strong>。</li></ul><h4 id="4-自定义缓存："><a href="#4-自定义缓存：" class="headerlink" title="4.自定义缓存："></a>4.自定义缓存：</h4><p>请了解数据库底层后再查看官网。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lombok </tag>
            
            <tag> mybatis </tag>
            
            <tag> 多表查询 </tag>
            
            <tag> 动态sql </tag>
            
            <tag> mybatis缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 配置</title>
      <link href="/2020/08/07/java/ssm/mybatis/config/"/>
      <url>/2020/08/07/java/ssm/mybatis/config/</url>
      
        <content type="html"><![CDATA[<h2 id="配置文件，日志，分页"><a href="#配置文件，日志，分页" class="headerlink" title="配置文件，日志，分页"></a>配置文件，日志，分页</h2><h3 id="核心配置文件解析与优化："><a href="#核心配置文件解析与优化：" class="headerlink" title="核心配置文件解析与优化："></a>核心配置文件解析与优化：</h3><p>详情请看：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">官方配置文档</a></p><blockquote><p>注意官方规定<code>mybatis-config.xml</code>文件中<code>configuration</code>标签中的配置标签必须遵循如下顺序：</p><p><code>properties</code> → <code>settings</code> → <code>typeAliases</code> → <code>typeHandlers</code> → <code>objectFactory</code> → <code>objectWrapperFactory</code> → <code>reflectorFactory</code> → <code>plugins</code> → <code>environments</code> → <code>databaseIdProvider</code> → <code>mappers</code></p></blockquote><h4 id="1-环境配置（environments）："><a href="#1-环境配置（environments）：" class="headerlink" title="1. 环境配置（environments）："></a>1. 环境配置（environments）：</h4><p>从我们熟悉的 <code>environments</code> 标签入手，首先看一下官方提供的环境配置的模板：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>环境与配置：<code>environments</code> 内配置环境可存在多个环境，一个<code>environment</code> 就是一个环境。<code>environments</code> 中的 <strong>default</strong> 值应为某个<code>environment</code> 环境的 <strong>id</strong> 值，它表示默认使用那一个环境。</p><ul><li><p>此外官方还提到：<strong>尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p></li><li><p>如果你连接多个数据库，就需要创建多个 SqlSessionFactory 实例。mybatis提供了以下4种方法创建SqlSessionFactory 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下两种使用`environments`默认的环境</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader, properties);</span><br><span class="line"><span class="comment">// 以下两种可利用参2根据传入`environment`的id来确认使用某个环境</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader, environment);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader, environment, properties);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>事务管理：<code>transactionManager</code> 有两种类型事务管理器即 <strong>type</strong> 的值有 <strong>JDBC</strong> 和 <strong>MANAGED</strong> 两个：</p><ul><li>JDBC：直接使用了 <strong>JDBC 的提交和回滚设施</strong>，它依赖从数据源获得的连接来管理事务作用域。</li><li>MANAGED：几乎不用。mybatis自身不会去实现事务管理，让程序的容器来实现事务的管理。</li><li>官方提到使用 Spring + MyBatis，没有必要配置事务管理器可写成：<code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></li></ul></li><li><p>数据源：<code>dataSource</code> 使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源：</p><ul><li><code>dataSource</code> 属性 <strong>type</strong> 的值有3种其中默认 <strong>POOLED</strong> ：利用“池”将 JDBC 连接对象组织起来，避免创建新的连接实例花费时间。 一般常用此属性，能使并发 Web 应用快速响应请求。</li><li><code>property</code>：中<strong>name</strong>属性常配置的有4个：1. <code>driver</code> JDBC 驱动的 Java 类全限定名，2. <code>url</code> 数据库的 JDBC URL 地址，3.<code>username</code> 登录数据库的用户名，4. <code>password</code> 登录数据库的密码。需要在 <strong>value</strong> 属性中赋予响应的值。</li></ul></li></ol><h4 id="2-属性（properties）："><a href="#2-属性（properties）：" class="headerlink" title="2. 属性（properties）："></a>2. 属性（properties）：</h4><p>利用典型的 Java 属性文件(properties后缀)动态配置属性。在 <code>resources</code> 文件夹下新建文件 <strong>db.properties</strong> (文件名可自定义)，文件中 <strong>&#x3D;</strong> 号前为 <strong>key</strong> 后为 <strong>value</strong>：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">991314</span></span><br></pre></td></tr></table></figure><p>在 <strong>mybatis-config.xml</strong> 文件的<code>configuration</code>标签中利用<code>properties</code>标签引入属性文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>此时就可以利用属性文件动态的替换属性值了，在需要引用的地方利用 <code>$&#123;key&#125;</code> 的方式动态替换。如官方提供的环境配置模板中数据库连接配置处正是使用了此种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>properties</code> 除引入属性文件以外，还能在其内部利用<code>property</code>标签定义键值对。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当<code>properties</code>中和属性文件内都定义了key相同的键值对时会发生什么，我们看一段官方的文档内容：</p><ul><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p>由此可知标签内的键值对先被读取，再读取属性文件内的值。所以属性文件内的值会覆盖标签的定义值。</p><h4 id="3-类型别名（typeAliases）："><a href="#3-类型别名（typeAliases）：" class="headerlink" title="3.类型别名（typeAliases）："></a>3.类型别名（typeAliases）：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.pojo.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上在Mapper.xml中设置select的返回值类型时使用了<code>resultType=&quot;io.github.ruoxijun.pojo.UserPojo&quot;</code>完整路径类名的方式声明类型，项目中不止一个地方会用到这个全名。书写全名是比较繁琐的因此给它<strong>取别名</strong>是最好的选择。</p><ol><li><strong>Mybatis-config.xml</strong>中<code>typeAlias</code>配置单个类型别名：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- typeAliases别名组标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- typeAlias别名配置:</span></span><br><span class="line"><span class="comment">        type：类型名要完整的路径全名</span></span><br><span class="line"><span class="comment">        alias：别名（可以理解为变量名） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;io.github.ruoxijun.pojo.UserPojo&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userPojo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后在需要使用此类型名的地方引用此别名即可，如上例可替换为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Mybatis-config.xml</strong>中<code>package</code>配置包中所有类的类型别名：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;io.github.ruoxijun.pojo&quot;</span> /&gt;</span><span class="comment">&lt;!-- typeAliases标签内 --&gt;</span></span><br></pre></td></tr></table></figure><p>此配置此包内的所有类都会自动取别名，且<strong>别名为忽视大小写的类名</strong>。官方推荐引用时采用<strong>类名首字母小写</strong>的方式引用。</p><ol start="3"><li>使用注解取别名：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span> <span class="comment">// 为此类取别名为 user</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPojo</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>此三种方式可随意使用不冲突，同时使用时取的所有别名都可生效都可引用。</p><h4 id="4-映射器（mappers）："><a href="#4-映射器（mappers）：" class="headerlink" title="4. 映射器（mappers）："></a>4. 映射器（mappers）：</h4><p>之前我们在<code>mybatis-config.xml</code>的mapper中利用<strong>resource</strong>属性注册的Mapper.xml就是映射器。这只是注册映射器的方法之一：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;io/github/ruoxijun/mapper/UserMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用映射器接口实现类的完全限定类名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此方式要求Mapper接口和Mapper.xml的<strong>文件名必须同名且在同一个包下</strong>。</p><ul><li>将包内的映射器接口实现全部注册为映射器</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;io.github.ruoxijun.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：此方式要求Mapper接口和Mapper.xml的<strong>文件名必须同名且在同一个包下</strong>。</p><h3 id="resultMap-结果集映射："><a href="#resultMap-结果集映射：" class="headerlink" title="resultMap 结果集映射："></a>resultMap 结果集映射：</h3><p>之前我们写数据库表的对应字段类时要求，类中成员变量名与字段名要相同。这时我<strong>将第3个成员变量<code>age</code>改为<code>a</code><strong>。运行查询表所有信息后</strong>a为的值全为0</strong>也就是没有赋值，可知Mybatis是根据字段名是否匹配来做操作的。</p><h5 id="1-因此对于查表可以利用SQL查询语句给-字段取别名-方式来解决字段名不同的问题："><a href="#1-因此对于查表可以利用SQL查询语句给-字段取别名-方式来解决字段名不同的问题：" class="headerlink" title="1.因此对于查表可以利用SQL查询语句给 字段取别名 方式来解决字段名不同的问题："></a>1.因此对于查表可以利用SQL查询语句给 <em>字段取别名</em> 方式来解决字段名不同的问题：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;userPojo&quot;</span> &gt;</span></span><br><span class="line">    select id,name,age as a from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但这不是最好的方法，Mybatis有更好的方案来解决此类问题。</p><h5 id="2-在Mapper-xml中-mapper标签内-配置resultMap结果映射："><a href="#2-在Mapper-xml中-mapper标签内-配置resultMap结果映射：" class="headerlink" title="2. 在Mapper.xml中(mapper标签内)配置resultMap结果映射："></a>2. 在Mapper.xml中(mapper标签内)配置resultMap结果映射：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id：此结果映射集的id</span></span><br><span class="line"><span class="comment">    type：表字段对应的字段类(pojo类)，这里使用的该类的类型别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;userPojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于字段名和成员变量同名的字段可以不用配置默认即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column：数据库字段名</span></span><br><span class="line"><span class="comment">        property：映射到此类指定的变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;a&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用时不能在使用<strong>resultType</strong>属性，该为<strong>resultMap</strong>属性值为自定义属性结果集的<strong>id</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> &gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有自行配置<strong>resultMap</strong>之前Mybatis自动创建了一个默认的字段名与映射名相同的<strong>resultMap</strong>。这也是为什么之前我要求类的成员变量名与表的字段名对应的原因。、</p><h3 id="日志："><a href="#日志：" class="headerlink" title="日志："></a>日志：</h3><h4 id="settings-设置："><a href="#settings-设置：" class="headerlink" title="settings 设置："></a>settings 设置：</h4><p>学习日志前先了解一下 Mybatis 核心配置文件中的 <strong>settings</strong> 这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><p><strong>settings</strong> 每一项  <strong>setting</strong> 标签就是一项设置，通过指定属性<code>name</code>和<code>value</code>的值来完成一项设置。其中包括日志的设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis 中的调整设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- logImpl：日志实现 </span></span><br><span class="line"><span class="comment">        STDOUT_LOGGING：控制台日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启驼峰命名自动映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="控制台日志（STDOUT-LOGGING）："><a href="#控制台日志（STDOUT-LOGGING）：" class="headerlink" title="控制台日志（STDOUT_LOGGING）："></a>控制台日志（STDOUT_LOGGING）：</h4><p>上方对<strong>setting</strong>的设置指定使用了控制台日志，运行以后大致会输出以下日志内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开 JDBC 的连接</span></span><br><span class="line">Opening JDBC Connection</span><br><span class="line"><span class="comment">// 创建一个 connection (连接对象)</span></span><br><span class="line">Created connection <span class="number">247944893.</span></span><br><span class="line"><span class="comment">// 在 JDBC 连接上将 autocommit (事务自动提交)设置为 false</span></span><br><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 执行的 SQL 语句</span></span><br><span class="line">==&gt;  Preparing: select * from user</span><br><span class="line"><span class="comment">// 传入的参数(此处参数为空)</span></span><br><span class="line">==&gt; Parameters: </span><br><span class="line"><span class="comment">// 查询的信息</span></span><br><span class="line">&lt;==    Columns: id, name, age</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 张三, <span class="number">10</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="comment">// 打印的数据(System.out.println)</span></span><br><span class="line">UserPojo&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;张三&#x27;</span>, a=<span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">// 在 JDBC 连接上将 autocommit 重置为 true</span></span><br><span class="line">Resetting autocommit to <span class="literal">true</span> on JDBC Connection[com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 关闭 JDBC 连接</span></span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl<span class="meta">@ec756bd</span>]</span><br><span class="line"><span class="comment">// 将连接返回数据库连接池</span></span><br><span class="line">Returned connection <span class="number">247944893</span> to pool.</span><br></pre></td></tr></table></figure><h4 id="LOG4J-日志："><a href="#LOG4J-日志：" class="headerlink" title="LOG4J 日志："></a>LOG4J 日志：</h4><h5 id="文件配置实现日志："><a href="#文件配置实现日志：" class="headerlink" title="文件配置实现日志："></a>文件配置实现日志：</h5><ol><li><p>同在 <strong>settings</strong> 中配置使用 <strong>LOG4J</strong>：<code>&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;</code></p></li><li><p>光设置还不能使用我们还需要导入<strong>LOG4J</strong>依赖，在<strong>pom.xml</strong>中导入log4j的包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<strong>properties</strong>中新建配置文件<strong>log4j.properties</strong>：</p> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span>=<span class="string">./log/runTime.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p> 现在就已经实现对Mybatis的日志打印了。</p></li></ol><h5 id="代码中简单使用LOG4J日志："><a href="#代码中简单使用LOG4J日志：" class="headerlink" title="代码中简单使用LOG4J日志："></a>代码中简单使用<strong>LOG4J</strong>日志：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取日志对象(建议设置为类对象)需要当前类的class对象作为参数</span></span><br><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(Demo.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLog</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 三种不同级别的日志打印方式</span></span><br><span class="line">    logger.info(<span class="string">&quot;Log4j日志打印级别：info&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;Log4j日志打印级别：debug&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;Log4j日志打印级别：error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询数据分页："><a href="#查询数据分页：" class="headerlink" title="查询数据分页："></a>查询数据分页：</h3><h4 id="1-SQL语句-limit-实现分页："><a href="#1-SQL语句-limit-实现分页：" class="headerlink" title="1. SQL语句 limit 实现分页："></a>1. SQL语句 <strong>limit</strong> 实现分页：</h4><p>分页查询数据最简单最实用的方法就是在Mapper.xml中书写SQL语句时使用 <strong>limit</strong> 实现分页查询。</p><p>Mapper接口中定义分页查询方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserPojo&gt; <span class="title function_">getUserLimit</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>Mapper.xml中书写SQL语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLimit&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用（此处省略获取mapper实例等步骤）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">3</span>);</span><br><span class="line">List&lt;UserPojo&gt; userLimit = mapper.getUserLimit(map);</span><br></pre></td></tr></table></figure><h4 id="2-使用-RowBounds-对象方式-了解-："><a href="#2-使用-RowBounds-对象方式-了解-：" class="headerlink" title="2. 使用 RowBounds 对象方式(了解)："></a>2. 使用 RowBounds 对象方式(了解)：</h4><p>RowBounds只是逻辑上的分页，它是将SQL已经查询到的数据进行分页。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数参数与limit类似：参1表示数据开始位置角标，参2表示当前页的数据个数</span></span><br><span class="line"><span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> GetSqlSession.getSqlSession();</span><br><span class="line"><span class="comment">// 参1为 Mapper 接口的全名加使用的方法名，参3传入 RowBounds 即可</span></span><br><span class="line">List&lt;UserPojo&gt; userPojoList = sqlSession</span><br><span class="line">    .selectList(<span class="string">&quot;io.github.ruoxijun.mapper.UserMapper.getUserList&quot;</span>,</span><br><span class="line">                <span class="literal">null</span>, rowBounds);</span><br><span class="line"><span class="keyword">for</span> (UserPojo user : userPojoList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h4 id="3-MyBatis-分页插件-PageHelper-："><a href="#3-MyBatis-分页插件-PageHelper-：" class="headerlink" title="3. MyBatis 分页插件 PageHelper ："></a>3. MyBatis 分页插件 PageHelper ：</h4><p><a href="https://pagehelper.github.io/">MyBatis 分页插件官网（内有文档使用教程）</a></p><ul><li>添加依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mybatis配置文件中配置插件：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span><span class="comment">&lt;!-- 分页合理化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参1：当前第几页，参2：每页的数据量（数据条数）</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 紧跟在上方法后的第一个MyBatis 查询方法会被进行分页</span></span><br><span class="line">List&lt;User&gt; users= UserService.getAll();</span><br><span class="line"><span class="comment">// PageInfo对结果进行包装,参1：查询的数据集合，参2：连续显示的页数</span></span><br><span class="line"><span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>(users,<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;当前页码：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;总页码：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;总记录数&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;连续显示的页码：&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] nums = pageInfo.getNavigatepageNums();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot; &quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;当前页数据：&quot;</span>);</span><br><span class="line">List&lt;User&gt; list = pageInfo.getList();</span><br><span class="line"><span class="keyword">for</span> (User user:users)&#123;</span><br><span class="line">    System.out.println(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> log4j </tag>
            
            <tag> pagehelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis 基础入门</title>
      <link href="/2020/07/17/java/ssm/mybatis/index/"/>
      <url>/2020/07/17/java/ssm/mybatis/index/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis-入门"><a href="#MyBatis-入门" class="headerlink" title="MyBatis 入门"></a>MyBatis 入门</h2><h3 id="MyBatis-环境配置与简单查询实例："><a href="#MyBatis-环境配置与简单查询实例：" class="headerlink" title="MyBatis 环境配置与简单查询实例："></a>MyBatis 环境配置与简单查询实例：</h3><blockquote><p>MyBatis 就是封装版的 JDBC 简化了对数据库的操作：</p><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">MyBatis 中文官网</a></p><p><a href="https://github.com/mybatis/mybatis-3/releases">MyBatis 各版本下载位置</a></p></blockquote><h4 id="1-创建maven程序，添加依赖-jar-包-："><a href="#1-创建maven程序，添加依赖-jar-包-：" class="headerlink" title="1. 创建maven程序，添加依赖 (jar 包)："></a>1. 创建maven程序，添加依赖 (jar 包)：</h4><p>在 maven 项目文件 <code>pom.xml</code> 下的 <code>dependencies</code> 标签中导入一下依赖(jar包)：</p><ul><li>MyBatis 依赖：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>SQL 数据库驱动依赖(根据所使用的数据库自行选择依赖)：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写核心配置xml文件："><a href="#2-编写核心配置xml文件：" class="headerlink" title="2. 编写核心配置xml文件："></a>2. 编写核心配置xml文件：</h4><ul><li>在 <code>resources</code> 文件夹中新建 <code>mybatis-config.xml</code> (文件名也可自定义)：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis 主配置文件：头部的声明，它用来验证 XML 文档的正确性 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 核心配置文件(存放mybatis与数据库的各种配置) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 环境配置组(default值表示默认环境,根据环境id选择) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 环境配置(id为环境名称，可自定义) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理(一般为JDBC，表示使用JDBC管理事务的提交和回滚) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用标准的JDBC数据源接口来配置JDBC连接对象的资源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDBC 连接数据库url设置：</span></span><br><span class="line"><span class="comment">                设置安全连接：useSSL=false</span></span><br><span class="line"><span class="comment">                设置中文可用编码：useUnicode=true</span></span><br><span class="line"><span class="comment">                设置设置编码格式：characterEncoding=utf8</span></span><br><span class="line"><span class="comment">                设置时区为北京：serverTimezone=GMT%2B8 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/数据库名?useSSL=false<span class="symbol">&amp;amp;</span></span></span></span><br><span class="line"><span class="string"><span class="tag">                useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名与密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;991314&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理Mapper接口对应的Mapper.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个Mapper.xml文件都需要在此注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-编写Mapper接口与配置Mapper-xml："><a href="#3-编写Mapper接口与配置Mapper-xml：" class="headerlink" title="3. 编写Mapper接口与配置Mapper.xml："></a>3. 编写Mapper接口与配置Mapper.xml：</h4><p>Mapper接口中定义对数据库表增删改查的方法，接口名建议以 <code>[表名|数据库名]Mapper</code> 命名。以配置Mapper.xml(建议以 <code>对应接口名.xml</code> 命名)的方式实现该接口,下以查询为例：</p><ol><li><p>查询的每一条数据都作为一个对象返回，我们需要先创建一个对应表字段的实体类（pojo）：</p><p>以下表为例：</p><p><img src="/images/java/m-CreTab.jpg" alt="数据库表字段"></p><p>为此表字段编写一个对应的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPojo</span> &#123;</span><br><span class="line"><span class="comment">//    1.设置变量字段，注意变量的名称与类型应与表字段保持一致</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//    2.为每个字段设置 get 和 set 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123; <span class="built_in">this</span>.id = id; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    <span class="comment">// 其它可自行根据需要进行增添设置</span></span><br><span class="line"><span class="comment">//    构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserPojo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserPojo</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    toString 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写执行数据库方法的Mapper接口：</p><p>建议每一个表的实体类(pojo)对应一个Mapper接口，接口中定义对对应表的增删改查方法，接口名建议以 <code>实体类名+Mapper</code> 命名。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsersMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个查询方法返回List，其中每一个元素都是表的字段对象</span></span><br><span class="line">    List&lt;UserPojo&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>编写Mapper.xml实现接口中的方法：</p><p>Mapper.xml建议以 <code>对应接口名.xml</code> 命名，它可以看成是Mapper的具体实现类。对接口中的方法进行配置实现对表的操作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头文件(mapper.xml的头部声明) --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绑定Mapper.xml对应的Mapper接口类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;io.github.ruoxijun.mapper.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select 查询：</span></span><br><span class="line"><span class="comment">    id 对应接口中的方法名</span></span><br><span class="line"><span class="comment">    resultType 每条查询结果封装的类型</span></span><br><span class="line"><span class="comment">    标签内为查询语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在核心配置文件中注册配置好的Mapper.xml：</p><p>注意：resource中值为文件相对路径以 <em><code>/</code></em> 为分隔符，切记不能用 <code>.</code> 分隔。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 在mybatis-config.xml文件的configuration标签内 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注意路径使用的是文件方式 “/” 注册 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;io/github/ruoxijun/mapper/UsersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="4-编写测试类验证程序："><a href="#4-编写测试类验证程序：" class="headerlink" title="4. 编写测试类验证程序："></a>4. 编写测试类验证程序：</h4><p>建议在test文件夹下对应main文件夹下的Mapper接口位置创建测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 主配置文件相对与resources文件夹的路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到主配置文件的流。MyBatis的工具类Resources，它加载资源文件更加容易</span></span><br><span class="line">        inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 利用SqlSessionFactoryBuilder通过主配置文件的流，获取SqlSessionFactory对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过SqlSessionFactory对象拿到执行SQL命令的对象SqlSession</span></span><br><span class="line">    SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SqlSession对象通过Mapper接口的类对象获取实例对象(根据Mapper.xml实例化的对象)</span></span><br><span class="line">    <span class="type">UsersMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UsersMapper.class);</span><br><span class="line">    <span class="comment">// 调用实例方法</span></span><br><span class="line">    List&lt;UserPojo&gt; userList = mapper.getUserList();</span><br><span class="line">    <span class="keyword">for</span> (UserPojo user : userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后因为Maven项目中默认只有resources 文件夹中的资源(配置)文件才能被打包，测试时可能因为我们的Mapper.xml文件在java文件夹中而不能被打包到classpath中。</p><p>所以有必要对 <code>pom.xml</code> 配置构建时的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让Maven进行项目构建时不会忽略java下的xml等配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时运行测试项目成功。</p><h4 id="5-增加带参方法条件查询："><a href="#5-增加带参方法条件查询：" class="headerlink" title="5. 增加带参方法条件查询："></a>5. 增加带参方法条件查询：</h4><ol><li><p>Mapper 接口中新增方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为确定返回的数据最多只有1条，所以返回值类型为该对象而不用List(也行)</span></span><br><span class="line">UserPojo <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml中添加方法配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType 代表传入参数的类型，只有一个参数且为基本类型时可以不声明</span></span><br><span class="line"><span class="comment">     查询语句中增加条件，利用 #&#123;参数(变量)名&#125; 的方式调用参数</span></span><br><span class="line"><span class="comment">     使用 $&#123;&#125;(不安全有SQL注入风险) 或 #&#123;0&#125;(不灵活) 也可达到效果但不推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试时同上所讲获取到接口实例化对象调用方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserPojo</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">4</span>);</span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure></li></ol><h3 id="对象作用域-生命周期-与封装："><a href="#对象作用域-生命周期-与封装：" class="headerlink" title="对象作用域(生命周期)与封装："></a>对象作用域(生命周期)与封装：</h3><h4 id="对象生命周期："><a href="#对象生命周期：" class="headerlink" title="对象生命周期："></a>对象生命周期：</h4><p>了解Mybatis中对象的生命周期也是很重要的，错误的使用会导致严重的<strong>并发问题</strong>。</p><h5 id="SqlSessionFactoryBuilder："><a href="#SqlSessionFactoryBuilder：" class="headerlink" title="SqlSessionFactoryBuilder："></a>SqlSessionFactoryBuilder：</h5><p>​    一旦创建了 SqlSessionFactory，就不再需要它了。所以最好定义为局部方法变量。</p><h5 id="SqlSessionFactory："><a href="#SqlSessionFactory：" class="headerlink" title="SqlSessionFactory："></a>SqlSessionFactory：</h5><p>​    一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</p><h5 id="SqlSession："><a href="#SqlSession：" class="headerlink" title="SqlSession："></a>SqlSession：</h5><p>​    SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的作用域是局部作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。并且使用完后一定要关闭。</p><h4 id="获取-SqlSession-的封装："><a href="#获取-SqlSession-的封装：" class="headerlink" title="获取 SqlSession 的封装："></a>获取 SqlSession 的封装：</h4><p>之后的应用中需要经常用到 <code>SqlSession</code> 不可能每次都写一次，在此对获取 <code>SqlSession</code> 做一个简单的封装。创建一个专用于获取 <code>SqlSession</code> 的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetSqlSession</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">// 让类初始化就加载 SqlSessionFactory 之后就不用重复定义了</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resources=<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputstream</span> <span class="operator">=</span> Resources.getResourceAsStream(resources);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputstream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取 SqlSession 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">open</span><span class="params">()</span>&#123; <span class="keyword">return</span> sqlSessionFactory.openSession(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此后使用时只需要两句便可以获取到Mapper接口的实例对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过定义好的工具类获取 SqlSession</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> GetSqlSession.open();</span><br><span class="line"><span class="comment">// SqlSession对象通过Mapper接口的类对象获取实例对象</span></span><br><span class="line"><span class="type">UsersMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UsersMapper.class);</span><br></pre></td></tr></table></figure><p>这只是一个简单的封装，实际使用时建议使用 <em><strong>单例模式</strong></em> 来设计更好的封装方法。</p><h3 id="增改删操作："><a href="#增改删操作：" class="headerlink" title="增改删操作："></a>增改删操作：</h3><blockquote><p>增改删流程与查类似，Mapper接口中定方法再在Mapper.xml中使用对应的标签(如增是使用insert标签)绑定方法。</p><p>增改删与查不同的是，接口实例对象所有的增改删方法被调用后， <code>SqlSession</code> 对象必须 <code>commit</code> (提交事务)才能生效。且这些方法的返回值为 <code>int</code> 即数据更改成功的个数。</p></blockquote><h4 id="1-增-insert-："><a href="#1-增-insert-：" class="headerlink" title="1. 增(insert)："></a>1. 增(insert)：</h4><ol><li><p>在Mapper接口中定义插入数据的方法： <code>int insertUser(UserPojo user);</code></p></li><li><p>在Mapper.xml中进行对插入方法具体实现的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType中声明传入一个字段对象类型作为参数</span></span><br><span class="line"><span class="comment">      因为字段类中设置了成员变量的get方法，</span></span><br><span class="line"><span class="comment">      可直接通过 #&#123;成员变量名&#125; 的方式来获取具体的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    insert into user(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用时在获取到接口实例对象后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用获取到的接口实例调用方法，传入一个字段对象</span></span><br><span class="line"><span class="type">int</span> <span class="variable">insertNum</span> <span class="operator">=</span> mapper.insertUser(<span class="keyword">new</span> <span class="title class_">UserPojo</span>(<span class="number">6</span>,<span class="string">&quot;哈哈&quot;</span>,<span class="number">18</span>));</span><br><span class="line"><span class="keyword">if</span> (insertNum==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 对表数据更改的操作，必须 commit 提交事务才能生效</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;插入成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-改-update-："><a href="#2-改-update-：" class="headerlink" title="2. 改(update)："></a>2. 改(update)：</h4><p>操作都基本类似，只看一下Mapper.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删-delete-："><a href="#3-删-delete-：" class="headerlink" title="3. 删(delete)："></a>3. 删(delete)：</h4><p>Mapper.xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Map-传参与模糊查询："><a href="#Map-传参与模糊查询：" class="headerlink" title="Map 传参与模糊查询："></a>Map 传参与模糊查询：</h3><h4 id="Map简化传参："><a href="#Map简化传参：" class="headerlink" title="Map简化传参："></a>Map简化传参：</h4><p>上方所讲 <em><strong>改(update)</strong></em> 处在修改方法中传入了一个用户对象，但可以看出实际使用时并未使用到全部属性。当表的字段较多时字段对象的成员变量也会相应增多，而SQL语句中需要用到的值只有几个，此时传入一个完整的对象显得不再合理。利用传入一个 <strong><code>Map</code></strong> 就可只传入我们需要使用的数据，而不用在创建一个完整的对象方式。</p><p>Mapper接口中传入值替换为Map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// key为 String，value类型不定采用 Object</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>Mapper.xml中传入类型替换为map：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- parameterType 值更改为map，即传入的参数类型为Map</span></span><br><span class="line"><span class="comment">      SQL 中调用 Map 元素值用 #&#123;key&#125; 即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;userName&#125; where id=#&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">4</span>);</span><br><span class="line">map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;更改&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SqlSession 获取Mapper接口实例</span></span><br><span class="line"><span class="type">UsersMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlsession.getMapper(UsersMapper.class);</span><br><span class="line">mapper.updateUser2(map); <span class="comment">// 调用方法，传入 Map</span></span><br><span class="line">sqlsession.commit(); <span class="comment">// 一定要提交事务(commit)</span></span><br></pre></td></tr></table></figure><h4 id="模糊查询与SQL拼接："><a href="#模糊查询与SQL拼接：" class="headerlink" title="模糊查询与SQL拼接："></a>模糊查询与SQL拼接：</h4><p>Mapper接口中定义查询方法：<code>List&lt;User&gt; findLikeNameList(String name);</code></p><p>Mapper.xml中实现方法与书写模糊查询语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在标签的SQL语句中字符串 &quot;&quot; 与挨着的变量值会自动拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLikeNameList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;io.github.ruoxijun.data.UserPojo&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在标签内把SQL语句写死，而不用参数的方式 <code>%name%</code> 传入模糊语句是为了数据库安全防止SQL注入。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 数据存储</title>
      <link href="/2020/07/06/android/data/"/>
      <url>/2020/07/06/android/data/</url>
      
        <content type="html"><![CDATA[<h2 id="Android-数据存储"><a href="#Android-数据存储" class="headerlink" title="Android 数据存储"></a>Android 数据存储</h2><blockquote><h3 id="SharedPreferences-轻量级存储："><a href="#SharedPreferences-轻量级存储：" class="headerlink" title="SharedPreferences 轻量级存储："></a>SharedPreferences 轻量级存储：</h3></blockquote><p>SharedPreferences是存储共享变量的接口，文件路径位于“&#x2F;data&#x2F;data&#x2F;应用程序包&#x2F;shared_prefs”目录下的xml文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取共享文件对象，参1为文件名不存在则创建，参2为操作文件的模式推荐使用：&#x27;MODE_PRIVATE&#x27;</span></span><br><span class="line">SharedPreferences sp=getSharedPreferences(<span class="string">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class="line"><span class="comment">// 查看某key数据是否存在</span></span><br><span class="line">sp.contains(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="comment">// 根据key获取value，参2为key不存在时返回的默认值</span></span><br><span class="line">sp.getString(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;defaultValue&quot;</span>);</span><br></pre></td></tr></table></figure><p>Editor接口为SharedPreferences接口的内部接口，专编辑共享数据。通过共享对象的 <code>edit()</code> 获取到该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取该共享文件的编辑对象</span></span><br><span class="line">SharedPreferences.Editor edit=sp.edit();</span><br><span class="line"><span class="comment">// 添加或修改数据值</span></span><br><span class="line">edit.putString(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">edit.clear(); <span class="comment">// 清空该共享文件数据</span></span><br><span class="line"><span class="comment">// 数据编辑完成后，必须使用该方法数据才能载入xml文件中</span></span><br><span class="line">edit.apply();</span><br></pre></td></tr></table></figure><p>以上都以 <code>String</code> 数据演示，还有其它数据可选。</p><blockquote><h3 id="Android-自带数据库-SQLite-存储："><a href="#Android-自带数据库-SQLite-存储：" class="headerlink" title="Android 自带数据库 SQLite 存储："></a>Android 自带数据库 SQLite 存储：</h3><p>Android 数据库文件存在 “&#x2F;data&#x2F;data&#x2F;应用程序包&#x2F;databases” 文件夹中</p></blockquote><h4 id="SQLiteOpenHelper-："><a href="#SQLiteOpenHelper-：" class="headerlink" title="SQLiteOpenHelper ："></a>SQLiteOpenHelper ：</h4><p>Android 操作数据库首先需要继承 <code>SQLiteOpenHelper</code> 抽象类。我们需要实现3个方法：</p><ul><li><p><code>onCreate</code> ：只在创建数据库时调用一次此方法，此方法中一般写入创建表语句。</p></li><li><p><code>onUpgrade</code> ：升级数据库方法。</p></li><li><p><code>构造函数</code> ：构造函数主要为了向父构造方法传参，参2为数据库名，参3为游标工厂对象为 <code>null</code> 时有默认的游标工厂，参4为数据库版本数。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySqlite</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，保存数据库信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySqlite</span><span class="params">(<span class="meta">@Nullable</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, TABLE_ENAME, <span class="literal">null</span>, VERSION);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 创建表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">        db.execSQL(<span class="string">&quot;create table ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 数据库表升级方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="type">int</span> oldVersion, <span class="type">int</span> newVersion)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建继承 <code>SQLiteOpenHelper</code> 类的对象后，并未创建数据库它只利用构造方法记录(赋值)了数据库的信息。</li><li>只有第一次调用  <code>getWritableDatabase</code> 或 <code>getReadableDatabase</code> 方法时才会创建数据库并调用此类的 <code>onCreate</code> 方法(创建表)所以该方法内不能使用此get方法否则会造成无限递归。</li><li>调用  <code>getWritableDatabase</code> 或 <code>getReadableDatabase</code> 方法，会返回 <code>SQLiteDatabase</code> 数据库的操作对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SQL 原生语句&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 SQLiteOpenHelper 数据库对象</span></span><br><span class="line">MySqlite mySqlite=<span class="keyword">new</span> <span class="title class_">MySqlite</span>(context);</span><br><span class="line"><span class="comment">// 获取 SQLiteDatabase 数据库操作对象</span></span><br><span class="line">SQLiteDatabase database=mySqlite.getWritableDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行数据库 &quot;增删改&quot; 方法</span></span><br><span class="line">database.execSQL(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行数据库 &quot;查&quot; 方法，数据保存在 Cursor 对象中返回</span></span><br><span class="line">Cursor cursor=database.rawQuery(sql,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 遍历查找的数据</span></span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;<span class="comment">//查看游标是否指向数据末尾</span></span><br><span class="line">    <span class="comment">// 获取游标当前行的name列的数据，列数从0开始算起</span></span><br><span class="line">    cursor.getString(cursor.getColumnIndex(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库</span></span><br><span class="line">database.close();</span><br></pre></td></tr></table></figure><p>数据库查询的所有类型数据都可通过游标( <code>Cursor</code> )的 <code>getString</code> 方法获取到。</p><p>关于数据库的操作，由于数据库的原生语句容易出错。Android官方还提供了许多API方法简易操作，请自查。</p><blockquote><h3 id="File-文件存储："><a href="#File-文件存储：" class="headerlink" title="File 文件存储："></a>File 文件存储：</h3></blockquote><p>Android分为内部存储和外部存储。上面介绍的轻量级xml键值对文件存储和数据库存储都是是内部存储。<br>内部存储还有 <code>/data/data/应用程序包</code> 下的 <code>files</code> 和 <code>cache</code> 文件夹管理的文件。 我们可以通过上下文对象的 <code>getFilesDir()</code> 和 <code>getCacheDir()</code> 方法获取它们两的file对象。</p><h4 id="内部存储-files-文件夹下："><a href="#内部存储-files-文件夹下：" class="headerlink" title="内部存储 files 文件夹下："></a>内部存储 files 文件夹下：</h4><p>操作都基于 Java 的 IO 流进行。</p><ul><li>文件存储<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过调用上下文的openFileOutput方法，拿到 写 对象</span></span><br><span class="line">FileOutputStream out=openFileOutput(<span class="string">&quot;test.txt&quot;</span>,MODE_PRIVATE);</span><br><span class="line">out.write(<span class="string">&quot;hello world&quot;</span>.getBytes());</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure></li><li>文件取出<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过openFileInput方法，拿到 读 对象</span></span><br><span class="line">FileInputStream in=openFileInput(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] data=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> i=in.read(data);</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,i));</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sharedpreferences </tag>
            
            <tag> sqlite </tag>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 语法基础</title>
      <link href="/2020/07/06/sql/sql/"/>
      <url>/2020/07/06/sql/sql/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-使用与-SQL-语句基础"><a href="#MySql-使用与-SQL-语句基础" class="headerlink" title="MySql 使用与 SQL 语句基础"></a><center>MySql 使用与 SQL 语句基础<center/></h2><blockquote><h3 id="MySql-使用："><a href="#MySql-使用：" class="headerlink" title="MySql 使用："></a>MySql 使用：</h3></blockquote><p>以下操作都是以管理员方式打开 <code>cmd</code> 并切换至安装 MySQL 的 <code>bin</code> 目录下执行：</p><ul><li>启动与关闭 MySql ：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql <span class="operator">/</span><span class="operator">/</span> 启动mysql</span><br><span class="line">net stop mysql <span class="operator">/</span><span class="operator">/</span> 关闭mysql</span><br></pre></td></tr></table></figure><ul><li>登录与退出 MySQL 环境：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="operator">/</span><span class="operator">/</span> 登录密码裸露在外不推荐</span><br><span class="line">mysql <span class="operator">-</span>u用户名 <span class="operator">-</span>p <span class="operator">/</span><span class="operator">/</span> 回车后输入密码(密码隐藏)，推荐使用</span><br><span class="line">mysql <span class="operator">-</span>hIP地址 <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="operator">/</span><span class="operator">/</span>连接指定IP地址的数据库</span><br><span class="line">exit <span class="operator">/</span><span class="operator">/</span> 退出mysql命令行环境</span><br></pre></td></tr></table></figure><blockquote><h3 id="SQL-操作数据库："><a href="#SQL-操作数据库：" class="headerlink" title="SQL 操作数据库："></a>SQL 操作数据库：</h3></blockquote><ul><li>注释：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释，必须有一个以上空格隔开</span></span><br><span class="line"># 单行注释</span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure><h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><ul><li>创建数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名; <span class="operator">/</span><span class="operator">/</span> 基本格式</span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名; <span class="operator">/</span><span class="operator">/</span> 查看数据库，不存在时创建</span><br><span class="line"><span class="keyword">create</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集; <span class="operator">/</span><span class="operator">/</span> 修改字符集</span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集; <span class="operator">/</span><span class="operator">/</span> 综合修改</span><br></pre></td></tr></table></figure><ul><li>删除数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database 数据库名; <span class="operator">/</span><span class="operator">/</span> 直接删除</span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> 数据库名; <span class="operator">/</span><span class="operator">/</span> 查看数据库存在再删除</span><br></pre></td></tr></table></figure><ul><li>修改数据库：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database 数据库名 <span class="type">character</span> <span class="keyword">set</span> 字符集名;</span><br></pre></td></tr></table></figure><ul><li>查看数据库与切换：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; <span class="operator">/</span><span class="operator">/</span> 查看所有数据库名称</span><br><span class="line"><span class="keyword">select</span> database(); <span class="operator">/</span><span class="operator">/</span> 当前正在使用的数据库</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database 数据库名; <span class="operator">/</span><span class="operator">/</span> 查看数据库的创建属性</span><br><span class="line">use 数据库名称; <span class="operator">/</span><span class="operator">/</span> 切换到指定数据库</span><br></pre></td></tr></table></figure><h3 id="数据表："><a href="#数据表：" class="headerlink" title="数据表："></a>数据表：</h3><ul><li>创建表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 基本格式：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>(</span><br><span class="line">    列名<span class="number">1</span> 数据类型 添加约束,</span><br><span class="line">    列名<span class="number">2</span> 数据类型,</span><br><span class="line">    ...(最后一列不能有逗号)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 复制表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 被复制表名;</span><br></pre></td></tr></table></figure><ul><li>删除表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> 表名; <span class="operator">/</span><span class="operator">/</span> 直接删除</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名; <span class="operator">/</span><span class="operator">/</span> 判断表存在则删除</span><br></pre></td></tr></table></figure><ul><li>修改表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名; <span class="operator">/</span><span class="operator">/</span> 修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="type">character</span> <span class="keyword">set</span> utf8; <span class="operator">/</span><span class="operator">/</span> 修改表的字符集</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型; <span class="operator">/</span><span class="operator">/</span> 添加一列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 新数据类型; <span class="operator">/</span><span class="operator">/</span> 修改数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 列名 新列名 新数据类型; <span class="operator">/</span><span class="operator">/</span> 修改列名和数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名; <span class="operator">/</span><span class="operator">/</span> 删除列</span><br></pre></td></tr></table></figure><ul><li>查看表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables; <span class="operator">/</span><span class="operator">/</span> 查看此数据库内的所有表</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名; <span class="operator">/</span><span class="operator">/</span> 查看表创建时的属性</span><br><span class="line"><span class="keyword">desc</span> 表名; <span class="operator">/</span><span class="operator">/</span> 查看指定表的结构</span><br></pre></td></tr></table></figure><ul><li>约束的创建，更改，删除：</li></ul><p><code>not null</code> 约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建时添加非空约束</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test( id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> );</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 直接给字段添加约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p><code>unique</code> 约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建时添加值唯一</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test( id <span class="type">int</span> <span class="keyword">unique</span> );</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> index id;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 直接给字段添加值唯一约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure><p><code>primary key</code> 约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建时添加主键</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(id <span class="type">int</span> <span class="keyword">primary</span> key);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除主键约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 直接给字段添加主键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure><p><code>auto_increment</code> 约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建时给主键添加自动增长</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除主键的自动增长</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 直接给主键添加自动增长</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test modify id <span class="type">int</span> auto_increment;</span><br></pre></td></tr></table></figure><p><code>foreign key</code>设置外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 作为外键的字段必须唯一(<span class="keyword">primary</span> key 或 <span class="keyword">unique</span>)，否则报错</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 创建时添加外键，外键名可随意取</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (本表字段) <span class="keyword">references</span> 外键表(外键表字段)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 删除外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 直接添加外键</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (本表字段) <span class="keyword">references</span> 外键表(外键表字段);</span><br></pre></td></tr></table></figure><h3 id="表数据："><a href="#表数据：" class="headerlink" title="表数据："></a>表数据：</h3><ul><li><code>insert into</code> 插入数据：</li></ul><p>表名后不跟列名时默认给所有列插入数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,...) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><ul><li><code>delete</code> 删除数据：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><ul><li><code>update</code> 修改数据：</li></ul><p>不添加where条件则会一条一条的删除表中所有数据，不推荐此方法清空表效率低。<br>推荐 <code>truncate table 表名;</code> 先删除表，再创建一个一样的空表(效率高)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">2</span>,列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,...[<span class="keyword">where</span> 条件]; <span class="operator">/</span><span class="operator">/</span> 没有条件则整列值被修改</span><br></pre></td></tr></table></figure><h3 id="select-查询数据："><a href="#select-查询数据：" class="headerlink" title="select 查询数据："></a><code>select</code> <strong>查询数据：</strong></h3><ul><li><p>查询所有字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 表</span><br><span class="line">    [<span class="keyword">where</span>]</span><br><span class="line">    [<span class="keyword">group</span> <span class="keyword">by</span>]</span><br><span class="line">    [<span class="keyword">having</span>]</span><br><span class="line">    [<span class="keyword">order</span> <span class="keyword">by</span>]</span><br></pre></td></tr></table></figure></li><li><p>列还可进行四则运算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 第三列为第一列与第二列的和，为<span class="keyword">null</span>的值运算结果为<span class="keyword">null</span>，需要ifnull设置默认值</span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>,列名<span class="number">2</span>,ifnull(列名<span class="number">1</span>,<span class="number">0</span>)<span class="operator">+</span>ifnull(列名<span class="number">2</span>,<span class="number">0</span>) <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>聚合函数：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">distinct</span> 去重</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> count 计算个数(注意它会忽略值为<span class="keyword">null</span>的行)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> max 最大值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> min 最小值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> avg 平均值</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> sum 求和</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(列名) <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><ul><li>where 条件查询：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">like</span> 模糊查询：<span class="string">&#x27;_&#x27;</span>单个字符，<span class="string">&#x27;%&#x27;</span>任意多个字符，[],[<span class="operator">^</span>]指定范围和非指定范围</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件列 <span class="keyword">like</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">in</span> 或值查询：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名 <span class="keyword">in</span>(val1,val2,...);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">between</span> 起始值 <span class="keyword">and</span> 终值 范围查询：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名 <span class="keyword">between</span> 起始值 <span class="keyword">and</span> 终点值;</span><br></pre></td></tr></table></figure><ul><li>order by 排序：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">asc</span>：升序(默认)，<span class="keyword">desc</span>：降序</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 排序列名 排序方式,次排序列名 排序方式,...;</span><br></pre></td></tr></table></figure><ul><li>group by 分组：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 分组列[,聚合函数(列)]... <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组列;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 搭配 <span class="keyword">having</span> 使用(与<span class="keyword">where</span>类似)，对分组后的表格进行条件筛选</span><br><span class="line"><span class="keyword">select</span> class <span class="keyword">as</span> cla <span class="keyword">from</span> t <span class="keyword">group</span> <span class="keyword">by</span> class <span class="keyword">having</span> cla<span class="operator">&gt;</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><ul><li>limit 分页：limit 为mysql方法分页查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 行标从<span class="number">0</span>开始，行标<span class="operator">=</span>(页数<span class="number">-1</span>)<span class="operator">*</span>显示行数</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 limit 行标,显示行数;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 如：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_students limit <span class="number">0</span>,<span class="number">6</span>;</span><br></pre></td></tr></table></figure><h3 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h3><ul><li>查询多表：<code>select * from 表1,表2;</code> 直接查询多表，它会将每个表每行组合的所有可能都显示出来。我们只需要利用条件限制，筛选出自己需要的数据。</li></ul><p>实例：如下查询了3个表的三个字段，通过别名简化操作。通过对条件的限定，筛选出了我们需要的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">/</span><span class="operator">/</span> 表字段</span><br><span class="line">stu.StuName,</span><br><span class="line">cla.Classname,</span><br><span class="line">pro.ProName</span><br><span class="line"><span class="keyword">from</span>    <span class="operator">/</span><span class="operator">/</span> 表</span><br><span class="line">    t_students <span class="keyword">as</span> stu,</span><br><span class="line">    t_classes <span class="keyword">as</span> cla,</span><br><span class="line">    t_pro <span class="keyword">as</span> pro</span><br><span class="line"><span class="keyword">where</span>   <span class="operator">/</span><span class="operator">/</span> 条件</span><br><span class="line">stu.ClassID<span class="operator">=</span>cla.ClassID <span class="keyword">and</span> cla.ProID<span class="operator">=</span>pro.ProID</span><br></pre></td></tr></table></figure><ul><li><code>inner join</code> 进行两表的查询：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from</span><br><span class="line">    表<span class="number">1</span></span><br><span class="line">inner join  <span class="comment">// inner 可省略</span></span><br><span class="line">    表<span class="number">2</span></span><br><span class="line">on 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双表查询，保留左表全部数据并并根据条件取交集部分</span></span><br><span class="line">select * from 表左 left join 表右 on 条件</span><br><span class="line"><span class="comment">// 双表查询，保留右表全部数据并根据条件取交集部分</span></span><br><span class="line">select * from 表左 right join 表右 on 条件</span><br></pre></td></tr></table></figure><ul><li>子查询：查询嵌套查询</li></ul><p>单行单列子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询某值最大的一列，查询中条件中嵌套了一个求最大值的查询</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> 值列名<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">max</span>(值列名) <span class="keyword">from</span> 表);</span><br></pre></td></tr></table></figure><p>多行单列子查询实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    stu.StuName</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_students <span class="keyword">as</span> stu</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    stu.ClassID <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span> ClassID <span class="keyword">from</span> t_classes <span class="keyword">where</span> classname <span class="keyword">in</span>(<span class="string">&#x27;计应用ZK1601&#x27;</span>,<span class="string">&#x27;软件技术ZK1601&#x27;</span>))</span><br></pre></td></tr></table></figure><p>多行多列子查询实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    stu.StuName,cla.Classname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t_students <span class="keyword">as</span> stu,</span><br><span class="line">    (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_classes <span class="keyword">where</span> classname <span class="keyword">in</span>(<span class="string">&#x27;计应用ZK1601&#x27;</span>,<span class="string">&#x27;软件技术ZK1601&#x27;</span>)) <span class="keyword">as</span> cla</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    stu.ClassID<span class="operator">=</span>cla.ClassID </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment 与 ViewPager</title>
      <link href="/2020/07/04/android/ViewPager/"/>
      <url>/2020/07/04/android/ViewPager/</url>
      
        <content type="html"><![CDATA[<h3 id="Fragment-与-ViewPager"><a href="#Fragment-与-ViewPager" class="headerlink" title="Fragment 与 ViewPager"></a>Fragment 与 ViewPager</h3><h4 id="Fragment："><a href="#Fragment：" class="headerlink" title="Fragment："></a>Fragment：</h4><ol><li>创建一个 Fragment：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;<span class="comment">//继承Fragment</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//拿到上下文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//指定视图文件</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="comment">//R.layout.fragement为你创建的Fragment的布局文件</span></span><br><span class="line">        View view=inflater.inflate(R.layout.fragement,container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//对组件做操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(<span class="meta">@NonNull</span> View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">        TextView textView=view.findViewById(R.id.text);</span><br><span class="line">        textView.setText(<span class="string">&quot;--MyFragment2--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 Activity 中的添加 Fragment：</li></ol><p>Activity 的布局文件中添加存放组件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/framelayout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>在 Activity 中向 <code>FrameLayout</code> 添加 Fragment：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyFragment fg= <span class="keyword">new</span> <span class="title class_">MyFragment</span>();<span class="comment">//实例化Fragment类</span></span><br><span class="line"><span class="comment">//add方法向FrameLayout添加了MyFragment</span></span><br><span class="line">getSupportFragmentManager().beginTransaction()</span><br><span class="line">    .add(R.id.framelayout,fg).commitAllowingStateLoss();</span><br></pre></td></tr></table></figure><p>Android 还提供了隐藏和显示 Fragment 的方法,如下方法能切换 fg1 和 fg2 两 Fragment：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hide和show分别为隐藏和显示的方法</span></span><br><span class="line"><span class="keyword">if</span> (fg1.isHidden())&#123;</span><br><span class="line">    getSupportFragmentManager().beginTransaction()</span><br><span class="line">        .hide(fg2).show(fg1).commitAllowingStateLoss();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getSupportFragmentManager().beginTransaction()</span><br><span class="line">        .hide(fg1).show(fg2).commitAllowingStateLoss();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ViewPager："><a href="#ViewPager：" class="headerlink" title="ViewPager："></a>ViewPager：</h4><ul><li>布局文件中添加：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/viewpager&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Activity 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备Fragment</span></span><br><span class="line">MyFragment fg1= <span class="keyword">new</span> <span class="title class_">MyFragment</span>();</span><br><span class="line">MyFragment fg2= <span class="keyword">new</span> <span class="title class_">MyFragment</span>();</span><br><span class="line">MyFragment fg3= <span class="keyword">new</span> <span class="title class_">MyFragment</span>();</span><br><span class="line">ArrayList&lt;Fragment&gt; fragments=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">fragments.add(fg1);</span><br><span class="line">fragments.add(fg2);</span><br><span class="line">fragments.add(fg3);</span><br><span class="line">ViewPager viewPager=findViewById(R.id.viewpager);<span class="comment">//获取ViewPager</span></span><br><span class="line"><span class="comment">// 设置Adapter</span></span><br><span class="line">viewPager.setAdapter(<span class="keyword">new</span> <span class="title class_">MyPagerAdapter</span>(getSupportFragmentManager(),fragments));</span><br><span class="line"><span class="comment">// 显示指定页面</span></span><br><span class="line">viewPager.setCurrentItem(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>Adapter 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyPagerAdapter</span> <span class="keyword">extends</span> <span class="title class_">FragmentPagerAdapter</span> &#123;</span><br><span class="line">    ArrayList&lt;Fragment&gt; fragments;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPagerAdapter</span><span class="params">(<span class="meta">@NonNull</span> FragmentManager fm,ArrayList&lt;Fragment&gt; fragments)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(fm);</span><br><span class="line">        <span class="built_in">this</span>.fragments=fragments;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Fragment <span class="title function_">getItem</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fragments.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TabLayout：联合ViewPager实现标签页"><a href="#TabLayout：联合ViewPager实现标签页" class="headerlink" title="TabLayout：联合ViewPager实现标签页"></a>TabLayout：联合ViewPager实现标签页</h4><p>xml中：<code>ViewPager</code> 内嵌入 <code>TabLayout</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.viewpager.widget.ViewPager</span></span></span><br><span class="line"><span class="tag">    ···</span></span><br><span class="line"><span class="tag">    &lt;<span class="attr">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">        ··· /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.viewpager.widget.ViewPager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>FragmentPagerAdapter类中：重写 <code>getPageTitle</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CharSequence <span class="title function_">getPageTitle</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> titles[position]; <span class="comment">// 返回标题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fragment </tag>
            
            <tag> viewpager </tag>
            
            <tag> tabLayout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File and 字节流</title>
      <link href="/2020/07/03/java/io/file/"/>
      <url>/2020/07/03/java/io/file/</url>
      
        <content type="html"><![CDATA[<h2 id="File-and-字节流"><a href="#File-and-字节流" class="headerlink" title="File and 字节流"></a><center>File and 字节流</center></h2><blockquote><h3 id="File："><a href="#File：" class="headerlink" title="File："></a>File：</h3></blockquote><ul><li>初始化一个 <code>File</code> 对象：<ul><li>以路径最后所指文为准，最后时文件夹则为文件夹对象反之文件同理。</li><li><code>File.separator</code> ：返回系统文件目录分隔符</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受一个目录路径字符串，实例化为文件或文件夹对象</span></span><br><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:&quot;</span>+File.separator+<span class="string">&quot;test&quot;</span>+File.separator+<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//接受两个字符串，参2拼接在参1后面</span></span><br><span class="line">File file2=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:&quot;</span>+File.separator+<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//接受一个file对象，参2接入该目录中</span></span><br><span class="line">File file3=<span class="keyword">new</span> <span class="title class_">File</span>(file,<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//File 对像 tostring 方法返回 getPath 方法值</span></span><br><span class="line">System.out.println(file);</span><br><span class="line">System.out.println(file2);</span><br><span class="line">System.out.println(file3);</span><br></pre></td></tr></table></figure><ul><li><code>File</code> 常用方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line">file.getPath();<span class="comment">//该对象创建时传入的路径</span></span><br><span class="line">file.getAbsolutePath();<span class="comment">//文件的绝对路径</span></span><br><span class="line">file.getName();<span class="comment">//文件名(即文件路径的最后一项)</span></span><br><span class="line">file.exists();<span class="comment">//文件或文件夹是否存在</span></span><br><span class="line">file.length();<span class="comment">//文件大小(字节)</span></span><br><span class="line">file.lastModified();<span class="comment">//文件最近修改时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//是文件或文件夹与后缀名无关，下列方法文件或文件夹不存在时也返回false</span></span><br><span class="line">file.isFile();<span class="comment">//该file对象是否是文件</span></span><br><span class="line">file.isDirectory();<span class="comment">//是否是文件夹</span></span><br><span class="line">file.isHidden();<span class="comment">//是否是隐藏文件或文件夹</span></span><br></pre></td></tr></table></figure><ul><li><code>File</code> 对文件的操作：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * createNewFile:</span></span><br><span class="line"><span class="comment"> * 只能创建文件，文件不存在路径正确创建成功返回true</span></span><br><span class="line"><span class="comment"> * 文件已存在返回false，路径错误将抛出IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">file.createNewFile();</span><br><span class="line"><span class="comment">//删除是直接删除不会存入回收站，正在被使用或不存在的文件无法删除</span></span><br><span class="line">file.delete();</span><br></pre></td></tr></table></figure><ul><li><code>File</code> 对文件夹(目录)的操作：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">file.mkdir();<span class="comment">//一次只能创建一级目录，当路径中多级目录不存在时将创建失败</span></span><br><span class="line">file.mkdirs();<span class="comment">//创建多级目录</span></span><br><span class="line">file.delete();<span class="comment">//删除文件夹(要保证将删除的文件夹为空)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**list():</span></span><br><span class="line"><span class="comment"> * 返回当前文件夹目录下的所有文件和文件夹名组成的String[]</span></span><br><span class="line"><span class="comment"> * 不返回List是因为List是可变的，数组是不可变的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] files=file.list();<span class="comment">//获取该文件夹下的文件和文件夹名</span></span><br><span class="line"><span class="keyword">for</span> (String file_item:files)&#123;<span class="comment">//遍历所有名称</span></span><br><span class="line">System.out.println(file_item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与上list方法类似不过返回File对象组成的数组</span></span><br><span class="line"><span class="comment"> * 如果是系统级的文件夹，java没有权限访问会返回null(可能会造成空指针异常)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">File[] files=file.listFiles();</span><br></pre></td></tr></table></figure><ul><li><code>File</code> 的 list，listFiles 方法添加过滤器：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**过滤器：</span></span><br><span class="line"><span class="comment"> * 需要实现FilenameFilter(文件名过滤器)或FileFilter(文件过滤器)接口</span></span><br><span class="line"><span class="comment"> * 实现accept方法指定过滤方式</span></span><br><span class="line"><span class="comment"> * list只能添加文件名过滤器，listFiles对于两种过滤器都可以</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取到后缀名为&#x27;.txt&#x27;的文件名</span></span><br><span class="line">String[] fileName=file.list(<span class="keyword">new</span> <span class="title class_">FindFileName</span>());</span><br><span class="line"><span class="comment">//获取到File的文件对象</span></span><br><span class="line">File[] files=file.listFiles(<span class="keyword">new</span> <span class="title class_">FindFile</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***过滤器具体实现类***/</span></span><br><span class="line"><span class="comment">//文件名过滤接口实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FindFileName</span> <span class="keyword">implements</span> <span class="title class_">FilenameFilter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line">        <span class="comment">//此过滤器只有后缀名为&#x27;.txt&#x27;的文件满足要求</span></span><br><span class="line">        <span class="keyword">return</span> name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件过滤接口实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FindFile</span> <span class="keyword">implements</span> <span class="title class_">FileFilter</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File pathname)</span> &#123;</span><br><span class="line">        <span class="comment">//此过滤器只有File对象为文件对象满足要求</span></span><br><span class="line">        <span class="keyword">return</span> pathname.isFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="字节流输出流："><a href="#字节流输出流：" class="headerlink" title="字节流输出流："></a>字节流输出流：</h3></blockquote><h4 id="须知基础："><a href="#须知基础：" class="headerlink" title="须知基础："></a>须知基础：</h4><ul><li><p>字符串转字节数组(<code>byte[]</code>)：</p><ol><li><code>str.getBytes()</code>：将字符串按系统默认编码，编码为字节数组</li><li><code>str.getBytes(&quot;utf-8&quot;)</code>：将字符串按指定编码，编码为字节数组</li></ol></li><li><p>字节数组(<code>byte[]</code>)转字符串：</p><ol><li><code>new String(bytes)</code>：将字节数组按系统默认编码，解码为字符串对象</li><li><code>new String(bytes,&quot;utf-8&quot;)</code>：将字节数组按指定编码，解码为字符串对象</li></ol></li><li><p>字节流可操作所有文件，对文本文件编解码有一定困难。对文本文件建议使用字符流。</p></li></ul><h4 id="OutputStream-："><a href="#OutputStream-：" class="headerlink" title="OutputStream ："></a>OutputStream ：</h4><p>字节输出流的顶层抽象父类，它定义了字节输出流的基本方法：</p><ul><li><p><code>write</code>：写方法，它有 3 种重载方法：</p><ul><li>传入一个字节数组 <code>write(byte[] b)</code> 将此字节数组输出</li><li><code>write(byte[] b,int off,int len)</code> 输出一个字节数组，并指定它的某一段</li><li><code>write(int b)</code> 输出一个字节</li></ul></li><li><p><code>flush()</code> ：刷新此输出流</p></li><li><p><code>close()</code> ：关闭此输出流</p></li></ul><h4 id="FileOutputStream-："><a href="#FileOutputStream-：" class="headerlink" title="FileOutputStream ："></a>FileOutputStream ：</h4><p>字节文件输出流继承自<code>OutputStream</code>，有 3 种常用的构造方法：</p><ul><li><code>FileOutputStream(String path)</code> ：传入文件路径的字符串</li><li><code>FileOutputStream(File file, boolean append)</code> ：参 1 为文件对象，参 2 表示是否续写此文件</li><li><code>FileOutputStream(String path, boolean append)</code></li></ul><p>当不选择续写时，文件不存在时会自动创建，文件已存在时将在文件后续写。</p><p>向 <code>e:/test/test.txt</code> 文件中写入 “test” :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个字节文件输出流并选择续写模式</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file,<span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//将字符串转为字节数组</span></span><br><span class="line">fos.write(date);<span class="comment">//将数据写入该文件中</span></span><br><span class="line">fos.flush();<span class="comment">//刷新此输出流</span></span><br><span class="line">fos.close();<span class="comment">//关闭此输出流</span></span><br></pre></td></tr></table></figure><p>IO 流的操作都存在许多异常，上写法存在许多隐患。推荐下方式更标准的一种写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//在try语句外定义文件字节输出流变量</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);<span class="comment">//创建文件字节输出流实例</span></span><br><span class="line">    <span class="type">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//准备数据</span></span><br><span class="line">    fos.write(date);<span class="comment">//写入数据</span></span><br><span class="line">    fos.flush();<span class="comment">//刷新此流</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;<span class="comment">//此语句块内的语句无论上方语句中是否产生异常都会执行</span></span><br><span class="line">    <span class="comment">//有时可能路径问题造成实例创建失败，所有在此需要判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (fos!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">//流不为空时关闭此流</span></span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为流是会消耗系统资源的，所有无论数据写入的成功与否该流都应关闭。因此流的关闭方法写在了 <code>finally</code> 语句块中，此语句块中的语句无论上方 <code>try</code> 块中是否产生异常都必须执行。</p><h4 id="BufferedOutputStream-："><a href="#BufferedOutputStream-：" class="headerlink" title="BufferedOutputStream ："></a>BufferedOutputStream ：</h4><p>字节缓冲输出流继承自<code>FilterOutputStream</code>，缓冲流适用于输出资源较多时。<br>写入的数据将暂存在缓冲区只有调用刷新或关闭方法时才能将缓冲区的数据写入文件中。<br>关闭方法中在关闭前有调用刷新方法，建议每写一次 <code>write</code> 就刷新调一次 <code>flush</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:test/test.txt&quot;</span>);</span><br><span class="line"><span class="comment">//创建一个字节文件输出流</span></span><br><span class="line">FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"><span class="comment">//将字节文件输出流交给字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos=<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"><span class="type">byte</span>[] date=<span class="string">&quot;test&quot;</span>.getBytes();<span class="comment">//准备数据</span></span><br><span class="line">bos.write(date);<span class="comment">//写入数据</span></span><br><span class="line">bos.flush();<span class="comment">//刷新缓冲区，将数据写入</span></span><br><span class="line"><span class="comment">//缓冲流将调用字节文件输出流的关闭方法</span></span><br><span class="line">bos.close();<span class="comment">//缓冲流自身并没有关闭方法</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="字节流输入流："><a href="#字节流输入流：" class="headerlink" title="字节流输入流："></a>字节流输入流：</h3></blockquote><h4 id="InputStream-："><a href="#InputStream-：" class="headerlink" title="InputStream ："></a>InputStream ：</h4><p>读入流的顶层父类，它定义了读入流的基本方法。</p><ul><li><p><code>read</code>：读方法，它有 3 种重载方法：</p><ul><li><code>read(byte[] b)</code> 读取字节数组长度个或小于此长度个字节，字节数组大小建议为 1024 的倍数</li><li><code>read(byte[] b,int off,int len)</code> 读取字节存入字节数组中，并取出其中指定的一段</li><li><code>read()</code> 读取一个字节，读取到末尾时返回-1</li></ul></li></ul><ul><li><code>available()</code> 可读取的剩余字节数的估计</li></ul><ul><li><code>close()</code> 关闭此读入流</li></ul><h4 id="FileInputStream-："><a href="#FileInputStream-：" class="headerlink" title="FileInputStream ："></a>FileInputStream ：</h4><p>FileInputStream 有两个常用构造方法，传入一个 <code>File</code> 对象，或传入文件的路径。</p><p>简单使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e:/test/test.txt&quot;</span>);</span><br><span class="line">FileInputStream is=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line"><span class="type">byte</span>[] bytes=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];<span class="comment">//数据存储(缓冲区)</span></span><br><span class="line">System.out.println(<span class="string">&quot;剩余字节数：&quot;</span>+is.available());</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//接受读取文件的返回值</span></span><br><span class="line"><span class="keyword">while</span> ((i=is.read(bytes))!=-<span class="number">1</span>)&#123;<span class="comment">//文件是否读取到末尾</span></span><br><span class="line">    System.out.println(<span class="string">&quot;剩余字节数：&quot;</span>+is.available());</span><br><span class="line">    <span class="comment">//将字节数组中存有数组的一段组成字符串输出</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,i));</span><br><span class="line">&#125;</span><br><span class="line">is.close();<span class="comment">//关闭流</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> file </tag>
            
            <tag> outputstream </tag>
            
            <tag> inputstream </tag>
            
            <tag> fileoutputstream </tag>
            
            <tag> fileInputstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm</title>
      <link href="/2020/06/29/java/jvm/index/"/>
      <url>/2020/06/29/java/jvm/index/</url>
      
        <content type="html"><![CDATA[<h3 id="ClassLoader-类加载器"><a href="#ClassLoader-类加载器" class="headerlink" title="ClassLoader(类加载器)"></a>ClassLoader(类加载器)</h3><h4 id="加载过程："><a href="#加载过程：" class="headerlink" title="加载过程："></a>加载过程：</h4><ul><li>加载：通过类全名，获取类二进制流。将字节流代表的静态存储结构转化为方法区的数据结构。在堆中生成这个类的 Class 对象。<ul><li>启动类加载器(BootStrap ClassLoader)：使用 <code>c/c++</code> 实现的类，加载 java 核心库(包名为 java,javax,sun 开头的类)。</li><li>扩展类加载器(Extension ClassLoader)：继承至 ClassLoader 抽象类，加载系统变量 <code>Djava.ext.dir</code> 指定指定目录的类库或 jdk 中 jre&#x2F;lib&#x2F;ext 目录下的类库。</li><li>系统类加载器(AppClassLoader)：继承至 ClassLoader 程序默认的加载器，一般加载自定义类。</li></ul></li><li>连接：<ul><li>验证：查看字节流是否符合 Class 文件规范，符合则加载到方法区存储。语句检查。</li><li>准备：静态常量(static final)直接赋值，为类(static)变量分配内存并设置默认初始值。</li><li>解析：虚拟机将常量池内的符号引用替换为直接引用的过程</li></ul></li><li>初始化：执行 jvm 的 <code>&lt;clinit&gt;()</code> 类构造器方法，初始化静态变量和静态块中的数据。数据初始化按代码中的顺序执行。<ul><li>类的构造器方法在 jvm 中是 <code>&lt;init&gt;()</code> 方法， <code>&lt;clinit&gt;()</code> 类构造器方法也会先执行父类的类构造器方法。</li></ul></li></ul><h3 id="Runtime-Data-Areas-运行时数据区"><a href="#Runtime-Data-Areas-运行时数据区" class="headerlink" title="Runtime Data Areas(运行时数据区)"></a>Runtime Data Areas(运行时数据区)</h3><p><strong><em>线程共享</em></strong> (且在虚拟机启动时创建) ：</p><ul><li>方法区：存放类信息，常量池，静态变量，方法编译后的二进制形式的机器指令集。</li><li>堆：存放 <code>new</code> 的对象实例和数组，在此分配内存。从内存回收角度堆还可分为新生代和老年代。</li></ul><p><strong><em>线程私有</em></strong> (生命周期与线程共存) ：</p><ul><li>虚拟机栈：存放栈帧，每一个栈帧表示一个方法，栈帧的入栈和出栈都表示了方法的调用和执行完成。<ul><li>栈帧：存放局部变量表(基本类型的变量和对象指向堆上的地址)、操作数帧、方法返回值、动态链接。</li></ul></li><li>本地方法栈：作用与虚拟机栈相同，只是服务的对象不同。<ul><li>虚拟机栈为 java 方法服务，本地方法栈为虚拟机使用到的 Native(本地)方法服务。</li></ul></li><li>程序计数器：存储当前线程所执行代码的字节码文件的行号。当前线程中断至线程恢复时的代码继续执行，依靠记录的内存地址(代码行号)。</li></ul><h3 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h3><h3 id="本地方法接口"><a href="#本地方法接口" class="headerlink" title="本地方法接口"></a>本地方法接口</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2020/06/27/python/python/"/>
      <url>/2020/06/27/python/python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul><li><p><code>print(&quot;hello world!&quot;)</code> ：打印默认会换行逗号添加 <code>end=&#39;&#39;</code> 解除</p></li><li><p>定义变量：python 定义变量不需要关键字只需要定义变量名和赋值。python 中用 <code>#</code> 作为注释</p></li><li><p><code>print(&quot;hello world!\n&quot; * 3)</code> ：python 中字符串可以做乘法</p></li><li><p><code>input(&quot;请输入：&quot;)</code> ：接受键盘的输入，返回输入的字符串</p></li><li><p>类型转换：<code>int(表达式)</code> 、 <code>str(表达式)</code> 、 <code>float(表达式)</code> ,bool 值<code>True==1</code> 、 <code>False==0</code></p></li><li><p>基本数据类型：<code>str</code> 、 <code>int</code> 、 <code>float</code> 、 <code>bool</code></p></li><li><p>类型判断： <code>type(表达式)</code> 返回其类型的字符串， <code>isinstance(表达式, 数据类型)</code> 判断参 1 的值是否是参 2 的数据类型</p></li><li><p>运算符：<code>**</code> 乘方，<code>//</code> 除法(向下取整)， 非 <code>not</code> 或 <code>or</code> 且<code>and</code></p></li><li><p><code>if</code>：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">elif</span> 条件:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><ul><li><code>match</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">match</span> age:</span><br><span class="line">    <span class="keyword">case</span> x <span class="keyword">if</span> x &lt; <span class="number">10</span>: <span class="comment"># 满足条件赋值给变量 x</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;&lt; 10 years old: <span class="subst">&#123;x&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>: <span class="comment"># 值（可以是任何对象）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;10 years old.&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span> | <span class="number">12</span> | <span class="number">13</span> | <span class="number">14</span> | <span class="number">15</span> | <span class="number">16</span> | <span class="number">17</span> | <span class="number">18</span>: <span class="comment"># 条件</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;11~18 years old.&#x27;</span>)</span><br><span class="line">    <span class="keyword">case</span> _: <span class="comment"># 其它</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not sure.&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>while</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><ul><li><code>for</code>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msg=<span class="string">&quot;123&quot;</span>+ \ <span class="comment"># 多行语句使用 \</span></span><br><span class="line">    +<span class="string">&quot;45&quot;</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> msg:</span><br><span class="line">    <span class="built_in">print</span>(s) <span class="comment"># break与continue 控制循环</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环自然结束时执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate 返回迭代器(index, value)</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br></pre></td></tr></table></figure><p>for 循环常搭配 <code>range([sta]默认0,end,[步进])</code> 一起使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 默认从0开始到5但不取5，输出结果：01234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 从2到5但不取5，输出结果：234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(s,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 每次步进2位数，输出结果：13</span></span><br></pre></td></tr></table></figure><p>生成列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>)] <span class="comment"># [1, 4]</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>] <span class="comment"># [4]</span></span><br><span class="line">[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">&#x27;12&#x27;</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">&#x27;34&#x27;</span>] <span class="comment"># [&#x27;13&#x27;, &#x27;14&#x27;, &#x27;23&#x27;, &#x27;24&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res:&quot;</span>,res)</span><br><span class="line">g = foo()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g)) <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g)) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h2 id="Str-字符串"><a href="#Str-字符串" class="headerlink" title="Str(字符串)"></a>Str(字符串)</h2><ul><li>字符串，列表，元组，在 python 中都是序列。</li><li>python 中字符串可以用单双三引号三种方式定义， <code>r&quot;str\n&quot;</code> 等于 <code>&quot;str\\n&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;hi&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment"># 多行字符串</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world\n</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 原始字符串：</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">r&quot;hello world\n&quot;</span> <span class="comment">#等于&quot;hello world\\n&quot;</span></span><br></pre></td></tr></table></figure><ul><li>字符串与元组类似：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>[<span class="number">0</span>] <span class="comment"># 获取单个字符</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">5</span>:] <span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">str</span>[-<span class="number">10</span>:-<span class="number">1</span>] <span class="comment"># 负数则从末尾计数</span></span><br><span class="line"><span class="built_in">str</span>[::-<span class="number">1</span>] <span class="comment"># 反转字符串</span></span><br></pre></td></tr></table></figure><ul><li>字符串常用方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="built_in">str</span>) <span class="comment"># 返回字符串长度</span></span><br><span class="line"><span class="built_in">str</span>.strip() <span class="comment"># 删除开头和结尾的空白字符</span></span><br><span class="line"><span class="built_in">str</span>.lower() <span class="comment"># 返回小写的字符串</span></span><br><span class="line"><span class="built_in">str</span>.upper() <span class="comment"># 返回大写的字符串</span></span><br><span class="line"><span class="built_in">str</span>.swapcase() <span class="comment"># 切换大小写</span></span><br><span class="line"><span class="built_in">str</span>.replace(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>) <span class="comment"># 返回替换后的字符串</span></span><br><span class="line"><span class="built_in">str</span>.split(<span class="string">&#x27;\n&#x27;</span>,num) <span class="comment"># 返回按指定分隔符分隔的列表,num为分隔次数默认-1分隔全部</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>) <span class="comment"># 查看某字符串是否存在此字符串中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>) <span class="comment"># 与not搭配使用</span></span><br><span class="line"><span class="built_in">str</span>.capitalize() <span class="comment"># 首字母大写，其他字母变小写</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.count(<span class="string">&quot;str&quot;</span>) <span class="comment"># 某字符串出现的次数</span></span><br><span class="line"><span class="comment"># find与index类似，查找某串在字符串中的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.find(<span class="string">&quot;w&quot;</span>)) <span class="comment"># find(value, [[start], end])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.index(<span class="string">&quot;w&quot;</span>)) <span class="comment"># 未查找到时：find方法返回 -1，index方法将引发异常</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.startswith(substr, beg, end) <span class="comment"># 是否以指定子字符串开头</span></span><br><span class="line"><span class="built_in">str</span>.endswith(suffix, beg, end) <span class="comment"># 是否以指定子字符串结束</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123abc&quot;</span>.isalnum() <span class="comment"># 字符串中的字符是否都是字母或数字</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span>.isalpha() <span class="comment"># 字符串中的字符是否都是字母</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>.isdigit() <span class="comment"># 字符串中的字符是否都是数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join按指定分隔符将可迭代对象中的元素，连接为一个字符串</span></span><br><span class="line">lists=(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>.join(lists)) <span class="comment"># 1-2-3</span></span><br><span class="line">d=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;ruoxi&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+&quot;</span>.join(d)) <span class="comment"># name+value key的组合字符串</span></span><br></pre></td></tr></table></figure><ul><li>字符串格式化：<br>因为 python 中字符串不允许与数字相加组成新的字符串 <code>str+1 #报错</code> ，此时我们可借助字符串格式化来完成。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># format 方法格式化</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;hello&#123;&#125;world&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>,<span class="string">&quot;ha&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125;hello&#123;0&#125;world&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1</span>,<span class="string">&quot;ha&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;a&#125;hello&#123;b&#125;world&#123;a&#125;&quot;</span>.<span class="built_in">format</span>(a=<span class="number">1</span>,b=<span class="string">&quot;ha&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># f-string 格式化字符串,f&#x27;&#123;表达式&#125;&#x27;</span></span><br><span class="line"><span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过字典设置参数</span></span><br><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;www&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site))</span><br><span class="line"><span class="comment"># 通过列表索引设置参数</span></span><br><span class="line">lists=[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;www&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(lists))  <span class="comment"># &quot;0&quot; 是必须的</span></span><br><span class="line"><span class="comment"># 还可传入一个对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class="built_in">format</span>(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化数字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>)) <span class="comment"># 保留小数点后两位(为0表示不要小数)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0:+.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>)) <span class="comment"># 带符号保留小数点后两位</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:0&gt;2d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3</span>)) <span class="comment"># 数字补零(填充左边,宽度为2)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0:x&lt;4d&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3</span>)) <span class="comment"># 数字补零(填充左边,宽度为2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %操作符格式化：</span></span><br><span class="line"><span class="comment"># 使用格式：%[(key)][+:右对齐,-:左对齐,0:0填充][字符宽度].[小数位]类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%dhello world%s&quot;</span>%(<span class="number">12</span>,<span class="number">1234</span>)) <span class="comment">#元组方式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%(key1)d hi world %(key2)s&quot;</span> % &#123;<span class="string">&#x27;key1&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="number">123</span>&#125;) <span class="comment"># 字典方式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%-4d&quot;</span> % <span class="number">5</span>) <span class="comment"># 单个元素无须括号包裹</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%+8.3f&quot;</span> % <span class="number">2.3</span>)</span><br><span class="line"><span class="comment"># 常用类型：%s字符串，%b二进制整数，%d十进制整数</span></span><br><span class="line"><span class="comment"># %o八进制整数，%x十六进制整数，%f浮点数，%%字符&quot;%&quot;</span></span><br></pre></td></tr></table></figure><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h2><p>创建一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists1=[<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;2&quot;</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">lists2=[<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(lists2[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(lists1)</span><br><span class="line"><span class="built_in">print</span>(lists1+lists2)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hi</span><br><span class="line">[0, &#x27;1&#x27;, &#x27;2&#x27;, [3, 4, 5]]</span><br><span class="line">[0, &#x27;1&#x27;, &#x27;2&#x27;, [3, 4, 5], &#x27;str&#x27;, &#x27;hi&#x27;]</span><br></pre></td></tr></table></figure><p>可以看出一个列表可接受任何类型的数据，并且两个列表之间可以向加。</p><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">lists2.append(<span class="string">&quot;world&quot;</span>) <span class="comment"># 添加</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(lists2)) <span class="comment">#长度</span></span><br><span class="line">lists2.extend([<span class="string">&#x27;list&#x27;</span>]) <span class="comment"># 将另一列表元素添加到此列表</span></span><br><span class="line">lists2.insert(<span class="number">1</span>,<span class="string">&#x27;hello&#x27;</span>) <span class="comment"># 插入从0开始</span></span><br><span class="line">lists2.remove(<span class="string">&#x27;str&#x27;</span>) <span class="comment"># 移除一个指定元素</span></span><br><span class="line">lists2.pop() <span class="comment"># 移除最后一个元素并返回</span></span><br><span class="line">lists2.pop(<span class="number">1</span>) <span class="comment"># 指定位置移除并返回此元素</span></span><br><span class="line">lists2.sort() <span class="comment"># 对列表元素排序(默认升序)</span></span><br><span class="line">lists2.reverse() <span class="comment"># 将现列表反序</span></span><br><span class="line">lists1.count(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># 统计某元素出现的次数</span></span><br><span class="line">lists1.index(<span class="string">&#x27;2&#x27;</span>) <span class="comment"># 查找元素</span></span><br><span class="line">lists1.index(<span class="string">&#x27;2&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="comment"># 指定位置开始在某范围内查找</span></span><br><span class="line"><span class="built_in">print</span>(lists2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span> <span class="keyword">in</span> lists1) <span class="comment"># 查找元素是否存在某元素中</span></span><br><span class="line"><span class="built_in">list</span>.sort() <span class="comment"># 对列表排序</span></span><br><span class="line"><span class="built_in">list</span>.reverse() <span class="comment"># 反转列表</span></span><br><span class="line"><span class="built_in">list</span>.copy() <span class="comment"># 复制列表</span></span><br><span class="line">lists1.clear() <span class="comment"># 清空列表</span></span><br><span class="line"><span class="keyword">del</span> lists1[<span class="number">0</span>] <span class="comment"># 删除元素</span></span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, numbers) <span class="comment"># 映射</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span> == <span class="number">0</span>, numbers) <span class="comment"># 过滤</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x * y, numbers) <span class="comment"># 归纳</span></span><br></pre></td></tr></table></figure><p>切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lists1[:] <span class="comment"># 复制此列表返回</span></span><br><span class="line">lists1[:<span class="number">3</span>] <span class="comment"># 从头取到3的前一个元素</span></span><br><span class="line">lists1[<span class="number">1</span>:] <span class="comment"># 从1取到最后一个元素</span></span><br><span class="line">lists1[<span class="number">2</span>:<span class="number">3</span>] <span class="comment"># :后的数字在列表长度内不取，大于列表长度将取到最后一位</span></span><br><span class="line">lists1[::-<span class="number">1</span>] <span class="comment"># 反转数据(反转字符串同理)</span></span><br></pre></td></tr></table></figure><h2 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h2><p>元组和列表类似，但是不同的是元组不能修改，元组使用小括号。<br>元组中的元素值是不允许修改的，元组之间可相加。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t1=(<span class="number">0</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&quot;2&quot;</span>,[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">t2=(<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1+t2)</span><br></pre></td></tr></table></figure><p>当元组只有一个元素时在后面添加一个 <code>‘,’</code> 才能表示它是一个元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num=(<span class="number">1</span>) <span class="comment"># 普通数字</span></span><br><span class="line">t3=(<span class="number">1</span>,) <span class="comment"># 元组</span></span><br><span class="line">t4=<span class="number">1</span>,<span class="number">2</span> <span class="comment"># 有多个元素时不用括号也表示元组</span></span><br></pre></td></tr></table></figure><h3 id="序列："><a href="#序列：" class="headerlink" title="序列："></a>序列：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(list1,list2)=(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>) <span class="comment"># 将序列元素赋值给指定变量,列表同([])</span></span><br><span class="line"><span class="built_in">print</span>(list1,list2) <span class="comment"># 输出：1 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>()) <span class="comment"># 返回一个空列表，tuple同</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">str</span>)) <span class="comment"># 将一个序列元素变为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="built_in">str</span>)) <span class="comment"># 将一个序列元素变为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="built_in">list</span>(<span class="built_in">str</span>))) <span class="comment"># 因为list和tuple都是序列可以相互转换</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">tuple</span>(<span class="built_in">str</span>)) <span class="comment"># 返回长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列中数字和字符串同时存在时使用max或min将报错</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>(<span class="built_in">str</span>))) <span class="comment"># 返回序列中的最大值，max(str)同</span></span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">str</span>) <span class="comment"># 最小值同理</span></span><br><span class="line"><span class="built_in">sum</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 对数字序列求和(参2可选再加上一数)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">str</span>)) <span class="comment"># 返回一个反转的迭代器，序列对象可接受并转换</span></span><br><span class="line"><span class="comment"># 将序列组合为一个索引序列，同时列出数据和数据下标，返回enumerate(枚举)对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(<span class="built_in">str</span>))) <span class="comment"># 运行结果：((0, &#x27;h&#x27;), (1, &#x27;e&#x27;), (2, &#x27;l&#x27;), (3, &#x27;l&#x27;), (4, &#x27;o&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将序列中对应的元素打包成一个个元组，然后返回由这些元组组成的对象</span></span><br><span class="line">a=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment"># 4在b中没有对应元素，将被舍去</span></span><br><span class="line">b=(<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">zip</span>(a,b))) <span class="comment"># 运行结果：[(1, &#x27;一&#x27;), (2, &#x27;二&#x27;), (3, &#x27;三&#x27;)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment"># 生成随机数</span></span><br><span class="line">random.shuffle(lst) <span class="comment"># 将序列的所有元素随机排序</span></span><br><span class="line">random.choice(seq) <span class="comment"># 从序列中随机挑选一个元素</span></span><br><span class="line">random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>) <span class="comment"># 从指定序列中随机获取指定长度的片断并随机排列</span></span><br></pre></td></tr></table></figure><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h2><p>集合是无序和无索引的集合。在 Python 中，集合用花括号编写。<br>可以使用 <code>for</code> 循环遍历 set 项目，或者使用 <code>in</code> 关键字查询集合中是否存在指定值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义集合</span></span><br><span class="line">sets=&#123;<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;set2&quot;</span>&#125;</span><br><span class="line"><span class="built_in">set</span>(sets) <span class="comment"># 接受一个可迭代序列转集合，空参为空集合</span></span><br><span class="line"><span class="built_in">set</span>() <span class="comment"># 空集合必须使用 set()，&#123;&#125; 表示空字典</span></span><br><span class="line"><span class="built_in">print</span>(sets)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> sets: <span class="comment"># 遍历集合</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;iemt : &quot;</span>+item)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;set2&quot;</span> <span class="keyword">in</span> sets) <span class="comment"># 查看某元素是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合运算：</span></span><br><span class="line">a=<span class="built_in">set</span>(<span class="string">&#x27;abc&#x27;</span>) <span class="comment"># &#123;&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line">b=<span class="built_in">set</span>(<span class="string">&#x27;bcd&#x27;</span>) <span class="comment"># &#123;&#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a - b) <span class="comment"># a包含b不包含的元素(a独有或删除a中b存在的元素)</span></span><br><span class="line"><span class="built_in">print</span>(a | b) <span class="comment"># ab 中所有的元素</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b) <span class="comment"># ab 同时包含的元素</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b) <span class="comment"># ab 中它们独有的元素</span></span><br></pre></td></tr></table></figure><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sets=<span class="built_in">set</span>(<span class="string">&quot;abcde&quot;</span>)</span><br><span class="line"><span class="built_in">len</span>(sets) <span class="comment"># 集合个数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> sets) <span class="comment"># 判断元素是否存在此集合中</span></span><br><span class="line">sets.copy() <span class="comment"># 拷贝此集合</span></span><br><span class="line">sets.clear() <span class="comment"># 清空集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素：</span></span><br><span class="line">sets.add(<span class="string">&quot;a&quot;</span>) <span class="comment"># 添加一个元素</span></span><br><span class="line"><span class="comment"># 另一种添加元素方式，可传入可迭代元素(包括字典保存它的key)</span></span><br><span class="line">sets.update(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;,<span class="string">&#x27;e&#x27;</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素：</span></span><br><span class="line">sets.remove(<span class="string">&quot;a&quot;</span>) <span class="comment"># 移除元素并返回，元素不存在则报错</span></span><br><span class="line">sets.discard(<span class="string">&quot;f&quot;</span>) <span class="comment"># 移除指定元素不存在时不会报错</span></span><br><span class="line">sets.pop() <span class="comment"># 随机移除元素并返回</span></span><br><span class="line"></span><br><span class="line">a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">b=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">a.isdisjoint(b) <span class="comment"># 集合是否没有相同元素</span></span><br><span class="line">a.issuperset(b) <span class="comment"># 集合是否是某集合的父集</span></span><br><span class="line">b.issubset(a) <span class="comment"># 集合是否是某集合的子集</span></span><br></pre></td></tr></table></figure><h2 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h2><p>键必须是唯一的，但值则不必。值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典创建key唯一，可以是字符串，数字，元组</span></span><br><span class="line">d=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="number">2</span>:<span class="number">2</span>,(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125; <span class="comment"># 字典值可以是任何对象</span></span><br><span class="line"><span class="built_in">print</span>(d[(<span class="number">1</span>,<span class="number">2</span>)]) <span class="comment"># 可以通过键访问和修改值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> d) <span class="comment"># 查看某键是否存在此字典中</span></span><br><span class="line">d[<span class="string">&quot;b&quot;</span>]=<span class="string">&#x27;b&#x27;</span> <span class="comment"># 当key不存在时会自动创建</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&#x27;a&#x27;</span>] <span class="comment"># 删除某元素</span></span><br><span class="line"><span class="built_in">len</span>(d) <span class="comment"># 元素个数</span></span><br></pre></td></tr></table></figure><p>常用方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">d.get(<span class="string">&quot;a&quot;</span>,<span class="literal">False</span>) <span class="comment"># 根据key获取值不存在时，返回参2的值默认为None</span></span><br><span class="line">d.setdefault(<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="comment"># 与get一样，不存在时创建并赋参2值</span></span><br><span class="line">d.update(&#123;<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>:<span class="string">&#x27;d&#x27;</span>&#125;) <span class="comment"># 将传入的字典数据都添加到此字典中</span></span><br><span class="line">d.pop(<span class="string">&#x27;b&#x27;</span>,<span class="literal">False</span>) <span class="comment"># 删除指定key，不存在时返回参2值或参2不写将报错</span></span><br><span class="line">d.popitem() <span class="comment"># 删除并返回最后一组键值对组成元组</span></span><br><span class="line">d.copy() <span class="comment"># 返回此字典的拷贝</span></span><br><span class="line"></span><br><span class="line">d.keys() <span class="comment"># 返回此字典key的迭代器(可用list()转换为列表)</span></span><br><span class="line">d.values() <span class="comment"># 返回values的迭代器(可list())</span></span><br><span class="line">d.items() <span class="comment"># 返回键值对元组，组成的列表:[(键，值)]</span></span><br><span class="line">d.clear() <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line">t=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 创建序列作为key</span></span><br><span class="line">d=d.fromkeys(t,<span class="string">&#x27;def&#x27;</span>) <span class="comment"># 创建一个新字典，参2为值(默认None)</span></span><br><span class="line"><span class="built_in">print</span>(d) <span class="comment"># &#123;1: &#x27;def&#x27;, 2: &#x27;def&#x27;, 3: &#x27;def&#x27;&#125;</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> d.items(): <span class="comment"># for + items 遍历</span></span><br><span class="line">    <span class="built_in">print</span>(k, <span class="string">&#x27;=&#x27;</span>, v)</span><br><span class="line"><span class="keyword">del</span> d <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><h3 id="datetime："><a href="#datetime：" class="headerlink" title="datetime："></a>datetime：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">datetime.now() <span class="comment"># 获取当前 datetime</span></span><br><span class="line"><span class="comment"># &#123;day, month, year, hour, minute&#125; # 等常见属性</span></span><br><span class="line"><span class="comment"># 用指定日期时间创建 datetime(y, m, d)</span></span><br><span class="line">datetime(<span class="number">2024</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">56</span>, <span class="number">654634</span>)</span><br><span class="line">datetime.now().timestamp() <span class="comment"># 时间戳</span></span><br><span class="line">datetime.fromtimestamp(t) <span class="comment"># 时间戳转 datetime</span></span><br><span class="line"><span class="comment"># str 转换为 datetime</span></span><br><span class="line">datetime.strptime(<span class="string">&#x27;2015-6-1 18:19:59&#x27;</span>, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># datetime 格式化为 str</span></span><br><span class="line">datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>)[:-<span class="number">3</span>] <span class="comment"># 毫秒级</span></span><br><span class="line">datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;</span>) <span class="comment"># 微秒级</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 支持直接加减运算</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line">now = datetime.now()</span><br><span class="line">now + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>) <span class="comment"># 加减指定天或小时</span></span><br><span class="line"><span class="comment"># 当前东八区时间（上海）</span></span><br><span class="line">datetime.now().astimezone(timezone(timedelta(hours=<span class="number">8</span>))).strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前时间上海时区</span></span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line">datetime.now(pytz.timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)).strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>python 中使用 <code>def</code> 定义函数，并且允许设置的默认值。 <code>*变量名</code> 允许传入任意个的值，此变量名管理一个元组。</li><li><code>__name__</code> 当前模块的命名空间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name=<span class="string">&quot;long&quot;</span>,value=<span class="string">&quot;yes&quot;</span>,*var</span>):</span><br><span class="line">    <span class="string">&#x27;函数第一行字符串作为函数的文档，通过help方法可以查看&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(name+value)</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> var: <span class="comment"># &#x27;*&#x27;:任意参数接受到的值将组成一个元组</span></span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">return</span> name <span class="comment">#返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有运行当前模块(当前的 .py 文件) help 才会执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">help</span>(fun) <span class="comment"># 查看函数文档</span></span><br><span class="line">fun(value=<span class="string">&quot;ha&quot;</span>,name=<span class="string">&quot;zhang&quot;</span>) <span class="comment"># 关键字传参(不能传入任意参数的值)</span></span><br><span class="line">fun(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 1，2 作为任意参数组成元组传入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任意参数后还有参数时必须用关键字传参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">*var,<span class="built_in">str</span>=<span class="string">&quot;s&quot;</span></span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> var:</span><br><span class="line">        <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">fun2(<span class="number">1</span>,<span class="built_in">str</span>=<span class="string">&quot;ha&quot;</span>) <span class="comment"># 使用关键字传参给任意参数后面的参数传参</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, *, city</span>): <span class="comment"># * 后面的参数必须用关键字传参</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, city=<span class="string">&#x27;Beijing&#x27;</span>) <span class="comment"># 传入参数时必须指定参数名</span></span><br></pre></td></tr></table></figure><p>函数细节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global：修饰全局变量：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="comment"># 在函数内改变外部变量需要加 global 关键字</span></span><br><span class="line">    <span class="keyword">global</span> count <span class="comment"># 去掉此句 count 将是一个局部变量</span></span><br><span class="line">    count=<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun() = %d&quot;</span>%count)</span><br><span class="line">count =<span class="number">1</span></span><br><span class="line">fun() <span class="comment"># 输出：fun() = 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;main() = %d&quot;</span>%count) <span class="comment"># 输出：main() = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nonlocal 修饰外层变量：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    x=<span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>(): <span class="comment"># 函数内部可嵌套函数</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x <span class="comment"># 修饰为外部变量，去除此句将报错</span></span><br><span class="line">        x *=x</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span> func2() <span class="comment"># 返回内部函数</span></span><br><span class="line">func1() <span class="comment"># 输出：4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lambda 表达式：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(): <span class="comment"># lambda 表达式可以简写此方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 使用方法：&#x27;lambda 参数(多个用逗号隔开): 返回值表达式&#x27;</span></span><br><span class="line">f=<span class="keyword">lambda</span> : <span class="number">1</span> <span class="comment"># 它返回的只是一个函数对象</span></span><br><span class="line"><span class="built_in">print</span>(f())</span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1, arg2: arg1 + arg2</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>): <span class="comment"># 关键字参数自动组装为一个 dict</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>) <span class="comment"># kw = &#123;&#x27;gender&#x27;: &#x27;M&#x27;&#125;</span></span><br><span class="line">extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>&#125;</span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra) <span class="comment"># kw = &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="File-文件"><a href="#File-文件" class="headerlink" title="File(文件)"></a>File(文件)</h2><ul><li>打开文件：参 1 文件路径名，参 2 文件打开模式，参 3 编码格式(默认 win 上 gbk)<ul><li><code>f = open(&quot;E:/test/qq.html&quot;, &quot;r&quot;, encoding=&#39;utf-8&#39;)</code></li></ul></li><li>关闭文件 ： <code>f.close()</code></li></ul><h4 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h4><table><thead><tr><th>模式</th><th>功能</th></tr></thead><tbody><tr><td><strong>r</strong></td><td>只读，指针指向开头</td></tr><tr><td><strong>w</strong></td><td>只写，指针指向开头。文件不存在将创建文件</td></tr><tr><td><strong>a</strong></td><td>追加，指针指向结尾。文件不存在创建新文件</td></tr><tr><td>可附加模式</td><td>“+”：用于读写，”b”：以二进制打开文件</td></tr></tbody></table><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;E:/test/str.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 1文件路径名 2文件打开模式 3编码格式</span></span><br><span class="line"><span class="built_in">print</span>(f.closed, f.name, f.mode) <span class="comment"># 文件是否关闭，文件名，模式</span></span><br><span class="line"></span><br><span class="line">f.read() <span class="comment"># 传入int参数从文件读取指定的字节数，如果未给定或为负则读取所有</span></span><br><span class="line">f.readline() <span class="comment"># 读取整行，包括&quot;\n&quot;字符(也可传入int指定字节数)</span></span><br><span class="line">f.readlines() <span class="comment"># 读取所有行(直到结束符EOF)并返回列表</span></span><br><span class="line"></span><br><span class="line">f.write(<span class="built_in">str</span>) <span class="comment"># 将字符串写入文件，返回的是写入的字符长度</span></span><br><span class="line">f.writelines([<span class="string">&#x27;第一行\n&#x27;</span>,<span class="string">&#x27;第二行&#x27;</span>]) <span class="comment"># 写入序列字符串列表，换行需要自己加入每行的换行符</span></span><br><span class="line"></span><br><span class="line">f.tell() <span class="comment"># 返回文件当前指针位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># seek参1：移动的字节数，是负数表示从倒数第几位开始</span></span><br><span class="line"><span class="comment"># seek参2：0(默认) 从文件头，1 从当前位置，2 从文件末尾</span></span><br><span class="line">f.seek() <span class="comment"># 移动指针，成功返回新位置，失败返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># truncate：从文件首字节开始截断，截断文件为参1个字节，无参表示从当前位置截断</span></span><br><span class="line"><span class="comment"># 必须在能写模式下，`r` 下模式建议使用 `r+`</span></span><br><span class="line"><span class="comment"># 读取模式下截断后不能继续读取，否则数据将不会被删除</span></span><br><span class="line">f.truncate() <span class="comment"># 截断数据，其它数据将被删除</span></span><br><span class="line"></span><br><span class="line">f.flush() <span class="comment"># 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件</span></span><br><span class="line">f.close() <span class="comment"># 关闭文件</span></span><br></pre></td></tr></table></figure><ul><li>写 JSON：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">person = &#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Asabeneh&quot;</span> &#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;json_file.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(person, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="OS-模块："><a href="#OS-模块：" class="headerlink" title="OS 模块："></a>OS 模块：</h3><p>常用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(os.sep) <span class="comment"># 系统路径分隔符</span></span><br><span class="line"><span class="built_in">print</span>(os.linesep) <span class="comment"># 系统行终止符</span></span><br><span class="line"><span class="built_in">print</span>(os.name) <span class="comment"># 工作平台:Windows=&#x27;nt&#x27;，Linux/Unix=&#x27;posix&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(os.curdir) <span class="comment"># 当前目录：&quot;.&quot;</span></span><br><span class="line"></span><br><span class="line">os.getcwd() <span class="comment"># 当前工作目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;e:&quot;</span>+ os.sep) <span class="comment"># 改变当前工作目录</span></span><br><span class="line">os.system(<span class="string">&#x27;cmd&#x27;</span>) <span class="comment"># 运行shell命令</span></span><br><span class="line">os.stat(<span class="string">r&#x27;E:\test\test.txt&#x27;</span>) <span class="comment"># 获得文件属性</span></span><br><span class="line"></span><br><span class="line">os.rename(src, dst) <span class="comment"># 重命名文件</span></span><br><span class="line">os.renames(old, new) <span class="comment"># 递归重命名文件</span></span><br><span class="line"></span><br><span class="line">os.listdir() <span class="comment"># 返回目录下文件和文件夹名的列表(可传入路径字符串指定目录)</span></span><br><span class="line">os.scandir() <span class="comment"># 返回迭代器，包含目录中的文件信息</span></span><br><span class="line"><span class="comment"># 返回迭代器，包含目录中的文件信息，还包含子目录信息</span></span><br><span class="line">os.walk() <span class="comment"># for path, dirs, files in os.walk(path)</span></span><br><span class="line"></span><br><span class="line">os.mkdir(path) <span class="comment"># 创建一个文件夹，路径错误会文件夹已存在将报错</span></span><br><span class="line">os.makedirs(path) <span class="comment"># 创建多级目录，目录所有目录已存在将报错</span></span><br><span class="line"></span><br><span class="line">os.remove(path) <span class="comment"># 删除文件，文件不存在会报错</span></span><br><span class="line">os.rmdir(path) <span class="comment"># 删除一个空文件夹，非空或不存在会报错</span></span><br><span class="line">os.removedirs(path) <span class="comment"># 删除目录(多个文件夹)，非空报错</span></span><br></pre></td></tr></table></figure><ul><li>os.path：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file = <span class="string">&quot;e:/test/test.txt&quot;</span></span><br><span class="line"></span><br><span class="line">os.path.sep <span class="comment"># 返回当前操作系统的路径分隔符</span></span><br><span class="line">os.path.abspath(<span class="string">&quot;.&quot;</span>) <span class="comment"># 返回指定路径的绝对路径</span></span><br><span class="line">os.path.basename(<span class="string">&quot;.&quot;</span>) <span class="comment"># 返回文件名</span></span><br><span class="line">os.path.dirname(file) <span class="comment"># 传入路径的路径名(去除文件名)</span></span><br><span class="line">os.path.split(file) <span class="comment"># 分割文件和路径名组成元组</span></span><br><span class="line">os.path.splitext(file) <span class="comment"># 分割路径文件名和文件扩展名</span></span><br><span class="line">os.path.join(<span class="string">&quot;e:\\&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test.txt&quot;</span>) <span class="comment"># 组合路径名(cde等主盘路径不会加反斜杠)</span></span><br><span class="line"></span><br><span class="line">os.path.getatime(file) <span class="comment"># 最近访问时间</span></span><br><span class="line">os.path.getctime(file) <span class="comment"># 创建时间</span></span><br><span class="line">os.path.getmtime(file) <span class="comment"># 最近修改时间(可time.gmtime(tiem)查看时间)</span></span><br><span class="line">os.path.getsize(file) <span class="comment"># 文件大小(字节)，文件不存在报错</span></span><br><span class="line">os.path.exists(file) <span class="comment"># 判断路径是否存在</span></span><br><span class="line"></span><br><span class="line">os.path.isabs(file) <span class="comment"># 是否为绝对路径</span></span><br><span class="line">os.path.isdir(file) <span class="comment"># 是否为目录</span></span><br><span class="line">os.path.isfile(file) <span class="comment"># 是否为文件</span></span><br><span class="line">os.path.islink(file) <span class="comment"># 是否为连接</span></span><br><span class="line">os.path.ismount(file) <span class="comment"># 是否为挂载点(如&#x27;c:&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="shutil："><a href="#shutil：" class="headerlink" title="shutil："></a>shutil：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copy(src, dst) <span class="comment"># 复制文件</span></span><br><span class="line">shutil.copytree(src, dst) <span class="comment"># 复制文件夹</span></span><br><span class="line">shutil.move(src, dst) <span class="comment"># 移动文件(夹)</span></span><br><span class="line">shutil.rmtree(src) <span class="comment"># 递归删除文件夹</span></span><br></pre></td></tr></table></figure><h3 id="glob："><a href="#glob：" class="headerlink" title="glob："></a>glob：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment"># *：0个或多个字符，**：匹配所有，?：代匹配一个字符，[]：范围字符([0-9]、[a-z])</span></span><br><span class="line">glob.glob(<span class="string">&quot;*.py&quot;</span>)  <span class="comment"># 返回符合规则的文件路径列表</span></span><br><span class="line">glob.iglob(<span class="string">&quot;*.py&quot;</span>)  <span class="comment"># 返回迭代器</span></span><br></pre></td></tr></table></figure><h3 id="pathlib："><a href="#pathlib：" class="headerlink" title="pathlib："></a>pathlib：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">Path.cwd()  <span class="comment"># 同 os.getcwd</span></span><br><span class="line">Path.home()  <span class="comment"># 用户主目录</span></span><br><span class="line">path = Path(<span class="string">&quot;./&quot;</span>)  <span class="comment"># 文件或目录 Path 对象</span></span><br><span class="line">path = path / <span class="string">&quot;test.txt&quot;</span>  <span class="comment"># 路径拼接</span></span><br><span class="line">path.name  <span class="comment"># 文件名</span></span><br><span class="line">path.suffix  <span class="comment"># 文件后缀</span></span><br><span class="line">path.stem  <span class="comment"># 文件名（不包含后缀）</span></span><br><span class="line">path.parent  <span class="comment"># 父目录（可继续 parent）</span></span><br><span class="line">path.stat()  <span class="comment"># 获取文件详情信息</span></span><br><span class="line">path.exists()  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">path.is_dir()  <span class="comment"># 判断是否为目录</span></span><br><span class="line">path.is_file()  <span class="comment"># 判断是否为文件</span></span><br><span class="line">path.rename(<span class="string">&quot;test.txt&quot;</span>)  <span class="comment"># 重命名</span></span><br><span class="line">path.mkdir(parents=<span class="literal">True</span>)  <span class="comment"># 创建目录（递归创建默认 False）</span></span><br><span class="line">path.rmdir()  <span class="comment"># 删除目录</span></span><br><span class="line">path.iterdir()  <span class="comment"># 遍历目录下的文件</span></span><br><span class="line">path.walk()  <span class="comment"># 遍历目录下的文件，包含子目录</span></span><br><span class="line">path.glob(<span class="string">&quot;*.txt&quot;</span>)  <span class="comment"># 获取路径下符合的文件路径信息</span></span><br><span class="line"><span class="comment"># 获取路径下符合的文件路径信息(包含子目录)</span></span><br><span class="line">path.rglob(<span class="string">&quot;*.txt&quot;</span>)  <span class="comment"># 同 path.glob(&#x27;**/*.txt&#x27;)</span></span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 语句执行区域</span></span><br><span class="line">    <span class="keyword">raise</span> Exception <span class="comment"># 抛出一个异常</span></span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> err: <span class="comment"># 捕获指定异常</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OS error: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(err))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;except&quot;</span>) <span class="comment"># 异常发生语句执行区</span></span><br><span class="line">    <span class="keyword">raise</span> <span class="comment"># 不想或无法处理的异常继续抛出</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;else&quot;</span>) <span class="comment"># 无异常语句执行区</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;finally&quot;</span>) <span class="comment"># 必执行语句区</span></span><br></pre></td></tr></table></figure><ul><li>一些对象定义了标准的清理行为，无论系统是否成功的使用了它，一旦不需要它了，那么这个标准的清理行为就会执行。<br>如打开一个文件对象：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># with 关键字无论文件是否打开成功，不再使用后都会关闭</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>自定义异常类：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span>(<span class="title class_ inherited__">Exception</span>): <span class="comment"># 继承 Exception 异常类</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">            self.value = value</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">repr</span>(self.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">raise</span> MyError(<span class="string">&quot;my define error&quot;</span>) <span class="comment"># 抛出自定义异常</span></span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>类常识：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class</span>(<span class="title class_ inherited__">object</span>): <span class="comment"># 括号内表示继承类，多继承可逗号隔开</span></span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span> <span class="comment"># 定义类元素</span></span><br><span class="line">    __weight=<span class="number">0</span> <span class="comment"># 定义私有属性(私有方法同理)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>): <span class="comment"># 构造函数</span></span><br><span class="line">        Class.name=<span class="string">&quot;hi&quot;</span> <span class="comment"># 定义或对类元素赋值</span></span><br><span class="line">        self.name=name <span class="comment"># 对实例元素name赋值</span></span><br><span class="line">        self.age=<span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>): <span class="comment"># self 表示当前实例对象类似(this)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name=&#x27;</span>,self.name,<span class="string">&#x27;,age=&#x27;</span>,self.age)</span><br><span class="line"></span><br><span class="line">c=Class(<span class="string">&#x27;world&#x27;</span>) <span class="comment"># 创建实例对象</span></span><br><span class="line">c.show() <span class="comment"># 调用方法</span></span><br><span class="line">Class.name=<span class="string">&quot;Class&quot;</span> <span class="comment"># 创建或改变类属性值</span></span><br><span class="line">c.name=<span class="string">&quot;self&quot;</span> <span class="comment"># 创建或改变实例属性值</span></span><br><span class="line"><span class="built_in">print</span>(Class.name) <span class="comment"># 访问类属性(实例属性同理)</span></span><br></pre></td></tr></table></figure><ul><li>类继承：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Class2</span>(<span class="title class_ inherited__">Class</span>): <span class="comment"># 继承上 Class 类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>): <span class="comment"># 子类构造方法也会覆盖父类构造方法，需要自行调用父类构造方法</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name) <span class="comment"># 调用父类构造方法(调用父类其它方法同理)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>): <span class="comment"># 重写父类方法</span></span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sm</span>():</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cm</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cm&quot;</span>)</span><br><span class="line"></span><br><span class="line">c2=Class2(<span class="string">&quot;Class2&quot;</span>)</span><br><span class="line">c2.show()</span><br><span class="line"><span class="comment"># c2.show=&#x27;a&#x27; # 定义属性与方法名同时属性将覆盖方法，调用方法将报错</span></span><br></pre></td></tr></table></figure><ul><li>类常用方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">issubclass</span>(Class2,Class) <span class="comment"># 参1(类)是否为参2(类)的子类</span></span><br><span class="line"><span class="built_in">isinstance</span>(c,Class) <span class="comment"># 参1(实例)是否为参2(类)的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对类或实例的属性操作方法</span></span><br><span class="line"><span class="built_in">hasattr</span>(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 参1(类)是否存在参2属性</span></span><br><span class="line"><span class="built_in">hasattr</span>(c,<span class="string">&quot;name&quot;</span>) <span class="comment"># 实例同理</span></span><br><span class="line"><span class="built_in">getattr</span>(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 获取某属性</span></span><br><span class="line"><span class="built_in">setattr</span>(Class,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>) <span class="comment"># 添加或设置某属性值</span></span><br><span class="line"><span class="built_in">delattr</span>(Class,<span class="string">&quot;name&quot;</span>) <span class="comment"># 删除某属性(还可使用del关键字)</span></span><br></pre></td></tr></table></figure><ul><li>特殊方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 初始化</span></span><br><span class="line">        self.num=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): <span class="comment"># 类似tostring方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.num)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>): <span class="comment"># 实例被删除(del)时调用</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;实例被del&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getnum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.num</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setnum</span>(<span class="params">self,num</span>):</span><br><span class="line">        self.num=num</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delnum</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> self.num</span><br><span class="line">    x=<span class="built_in">property</span>(getnum,setnum,delnum) <span class="comment"># 对该属性的操作将调用不同的方法</span></span><br><span class="line"></span><br><span class="line">test=Test()</span><br><span class="line"><span class="built_in">print</span>(test) <span class="comment"># 调用tostring方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.x) <span class="comment"># 调用get方法</span></span><br><span class="line">test.x=<span class="number">30</span> <span class="comment"># 调用set方法</span></span><br><span class="line"><span class="built_in">print</span>(test)</span><br><span class="line"><span class="keyword">del</span> test.x <span class="comment"># 调用del方法</span></span><br><span class="line"><span class="keyword">del</span> test</span><br></pre></td></tr></table></figure><ul><li>内部作用域修改全局作用域变量需要用 <code>global</code> 修饰变量</li><li><code>nonlocal</code> 同理在嵌套作用域中修改内部作用域变量</li></ul><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><p>安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><p>数组创建:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]])</span><br><span class="line">data = np.zeros(shape=(<span class="number">5</span>, <span class="number">3</span>))  <span class="comment"># 5行3列,全0数组</span></span><br><span class="line">data = np.ones(shape=(<span class="number">5</span>, <span class="number">3</span>))  <span class="comment"># 全1数组</span></span><br><span class="line">data = np.empty(shape=(<span class="number">5</span>, <span class="number">3</span>))  <span class="comment"># 空数组</span></span><br><span class="line"></span><br><span class="line">data = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)  <span class="comment"># 1-10的数据，步长为2</span></span><br><span class="line">data = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>)  <span class="comment"># 开始端1，结束端10，且分割成20个数据</span></span><br><span class="line">data = np.random.rand(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 3行4列的随机数组</span></span><br><span class="line">data = np.random.randint(<span class="number">2</span>, <span class="number">5</span>, size=(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直堆叠</span></span><br><span class="line">stacked_vertically = np.vstack((array1, array2))</span><br><span class="line"><span class="comment"># 水平堆叠</span></span><br><span class="line">stacked_horizontally = np.hstack((array1, array2))</span><br><span class="line"></span><br><span class="line">data = data.reshape((<span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 改变数组形状</span></span><br><span class="line">data.shape  <span class="comment"># 获取数组形状</span></span><br><span class="line">data.size  <span class="comment"># 获取数组元素个数</span></span><br><span class="line">data.ndim  <span class="comment"># 获取数组的维度</span></span><br><span class="line">data.dtype  <span class="comment"># 获取数组数据类型</span></span><br></pre></td></tr></table></figure><p>运算与统计:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数组可以与数字或数组进行数学运算</span></span><br><span class="line">data = np.random.randint(<span class="number">2</span>, <span class="number">5</span>, size=(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">data2 = np.random.randint(<span class="number">2</span>, <span class="number">5</span>, size=(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(data, data + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(data + data2)</span><br><span class="line"></span><br><span class="line">arr_min = np.<span class="built_in">min</span>(data)  <span class="comment"># 求最小值</span></span><br><span class="line">arr_max = np.<span class="built_in">max</span>(data)  <span class="comment"># 求最大值</span></span><br><span class="line">arr_sum = np.<span class="built_in">sum</span>(data)  <span class="comment"># 求和</span></span><br><span class="line">prod = np.prod(data)  <span class="comment"># 求积</span></span><br><span class="line">mindle = np.mean(data)  <span class="comment"># 求平均值</span></span><br><span class="line">median = np.median(data)  <span class="comment"># 求中位数</span></span><br><span class="line">std = np.std(data)  <span class="comment"># 求标准差</span></span><br><span class="line">var = np.var(data)  <span class="comment"># 求方差</span></span><br><span class="line"></span><br><span class="line">data = np.array([[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]])</span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>:<span class="number">1</span>])  <span class="comment"># [[[1, 2], [3, 4]]] 第一行</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>:<span class="number">1</span>, <span class="number">0</span>:<span class="number">1</span>])  <span class="comment"># [[[1, 2]]] 第一行内的第一行</span></span><br><span class="line"><span class="comment"># 列切片以 [:,] 开始</span></span><br><span class="line"><span class="built_in">print</span>(data[:, <span class="number">0</span>:<span class="number">1</span>])  <span class="comment"># [[[1, 2], [5, 6]]] 第一列</span></span><br></pre></td></tr></table></figure><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><p><a href="https://pandas.ac.cn/docs/user_guide/10min.html">十分钟掌握 Pandas</a></p><p>安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># series 一维数组结构</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># dataframe 二维数组结构</span></span><br><span class="line">dates = pd.date_range(<span class="string">&quot;20130101&quot;</span>, periods=<span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">&quot;ABCD&quot;</span>))</span><br><span class="line">df2 = pd.DataFrame(</span><br><span class="line">    &#123; <span class="comment"># 键是列标签，值是列值</span></span><br><span class="line">        <span class="string">&quot;A&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="string">&quot;B&quot;</span>: pd.Timestamp(<span class="string">&quot;20130102&quot;</span>),</span><br><span class="line">        <span class="string">&quot;C&quot;</span>: pd.Series(<span class="number">1</span>, index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)), dtype=<span class="string">&quot;float32&quot;</span>),</span><br><span class="line">        <span class="string">&quot;D&quot;</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">&quot;int32&quot;</span>),</span><br><span class="line">        <span class="string">&quot;E&quot;</span>: pd.Categorical([<span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>]),</span><br><span class="line">        <span class="string">&quot;F&quot;</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2.dtypes  <span class="comment"># 查看数据类型</span></span><br><span class="line">df.index  <span class="comment"># 查看索引标签</span></span><br><span class="line">df.columns  <span class="comment"># 查看列标签</span></span><br><span class="line">df.T  <span class="comment"># 转置(交换行列)</span></span><br><span class="line">df.head()  <span class="comment"># 查看前几行</span></span><br><span class="line">df.tail(<span class="number">3</span>)  <span class="comment"># 查看后几行</span></span><br><span class="line">df.to_numpy()</span><br><span class="line">df.describe()  <span class="comment"># 查看数据描述</span></span><br><span class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)  <span class="comment"># 按轴排序</span></span><br><span class="line">df.sort_values(by=<span class="string">&quot;B&quot;</span>)  <span class="comment"># 按值排序</span></span><br></pre></td></tr></table></figure><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h3><p>安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>使用:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">y = <span class="keyword">lambda</span>: [random.randint(<span class="number">0</span>, <span class="number">6</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)  <span class="comment"># 如果设置画布大小,需要在画图之前</span></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">plt.plot(x, y(), label=<span class="string">&quot;1&quot;</span>, color=<span class="string">&quot;red&quot;</span>, linestyle=<span class="string">&quot;dashed&quot;</span>, linewidth=<span class="number">2</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.plot(x, y(), label=<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y())  <span class="comment"># 绘制散点图</span></span><br><span class="line">plt.bar(x, y(), width=<span class="number">0.02</span>)  <span class="comment"># 绘制柱形图</span></span><br><span class="line">plt.barh(x, y(), height=<span class="number">0.02</span>)  <span class="comment"># 绘制水平柱形图</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>)  <span class="comment"># 设置图例的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度(刻度列表, 标签列表), rotation: 旋转角度</span></span><br><span class="line">plt.xticks(x, [<span class="string">&quot;x-&quot;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x], rotation=<span class="number">45</span>)</span><br><span class="line"><span class="comment"># 设置y轴刻度,与上同理</span></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>), [<span class="string">&quot;y-&quot;</span> + <span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>)])</span><br><span class="line">plt.grid(alpha=<span class="number">0.5</span>)  <span class="comment"># 设置网格</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;Title&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;xLabel&quot;</span>)  <span class="comment"># 设置x轴名称</span></span><br><span class="line">plt.ylabel(<span class="string">&quot;yLabel&quot;</span>)  <span class="comment"># 设置y轴名称</span></span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&quot;test.svg&quot;</span>) <span class="comment"># 保存为指定格式的图片</span></span><br><span class="line">plt.show()  <span class="comment"># 显示</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 基础</title>
      <link href="/2020/06/18/java/jc/"/>
      <url>/2020/06/18/java/jc/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA-基础进阶巩固"><a href="#JAVA-基础进阶巩固" class="headerlink" title="JAVA 基础进阶巩固"></a>JAVA 基础进阶巩固</h3><h3 id="类-class-："><a href="#类-class-：" class="headerlink" title="类(class)："></a>类(class)：</h3><ul><li>类：是描述相同事物的共同特征的抽象。</li><li>对象：是基于类具体创造的实例。</li><li>类名建议使用驼峰写法,一个 java 代码文件中可以定义多个类。但只有 java 文件名的同名类才能被 public 修饰。</li><li>类中有且只有五大成分：成员变量，成员方法，构造器，代码块，内部类。</li><li><code>类名 变量=new 构造器</code> 类有一个默认的构造器，当定义了其它构造器时此默认构造器将不存在。</li></ul><h3 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h3><ul><li>面像对象的三大特征：封装，继承，多态。</li><li>封装的作用：提高代码安全性，实现代码组件化。</li><li>子类实际上继承了父类的私有成员，只是不能直接访问。</li><li>子类实际上并未继承父类的静态成员，只是与父类共享。</li><li>方法重写：<ul><li>子类重写父类方法时，必须保证名称，参数列表与父类重写方法一致。</li><li>子类重写方法的返回值类型范围只能等于或小于父类声明的返回值。</li><li>子类重写方法的修饰符只能等于或大于父类声明的修饰符。</li><li>子类重写方法抛出的异常只能等于或小于父类抛出的异常。</li><li>重写方法应加上 <code>@Override</code> 注解。</li></ul></li><li><code>this</code> 与 <code>super</code> :<ul><li><code>this(参数列表)</code> 调用本类构造器。</li><li><code>super(参数列表)</code> 调用父类的构造器，一般子类构造器中默认带有 <code>super()</code> 。</li><li><code>this</code> 与 <code>super</code> 必须放在构造器的第一行，且它们不能同时出现在一个构造器中。</li></ul></li><li>抽象类与接口：<ul><li>抽象类用 <code>abstract</code> 修饰，且不能被实例化。抽象类中不一定得有抽象成员。</li><li>有抽象方法就一定是抽象类，子类必须重写父类方法否则将此类定义为抽象类。</li><li>抽象类是一种思想，接口是一种规范。一个类可实现多个接口。</li><li>父类方法与接口默认(default)方法同名时，将执行父类的方法。</li><li>当实现多接口时，多个接口中默认方法同名时我们必须重写这个方法。</li></ul></li><li><code>final</code> 关键字：<ul><li>修饰的类为最终类，不能被继承。修饰的方法为最终方法，不能不重写。</li><li>修饰的变量为常量，有且仅能被 <strong>赋值一次</strong>，类中定义的成员常量可利用构造器赋初值。</li><li><code>abstract</code> 与 <code>final</code> 为互斥关系不能同时修饰一个成员。</li></ul></li></ul><ul><li>多态变量与方法的访问：<ul><li>方法：编译看左边，运行看右边。</li><li>变量：编译看左边，运行看左边。</li><li>java 强制类型转换之前建议判断变量的类型： <code>变量 instanceof 类型</code></li></ul></li><li>内部类：<ul><li>静态内部类(<code>static class</code>)：与外部类一同加载，可直接访问外部静态成员，其它成员需要外部对象访问。</li><li>实例内部类：不能定义静态成员(常量除外)，可以访问外部类所有资源。</li></ul></li><li>枚举类：</li></ul><h3 id="常用类-API-："><a href="#常用类-API-：" class="headerlink" title="常用类(API)："></a>常用类(API)：</h3><h4 id="Date："><a href="#Date：" class="headerlink" title="Date："></a>Date：</h4><p>大部分方法方法也废弃，由 <code>Calendar</code> 类代替。</p><ul><li>可用构造器：<code>Date()</code> 与 <code>Date(long date)</code></li></ul><p>部分可用方法介绍：</p><ul><li><code>getTime</code> ： 返回此时间对象自 1970 年 1 月 1 日以来的毫秒数<ul><li>官方不推荐用 <code>new Date().getTime()</code> 来获取此时的时间毫秒数，推荐使用 <code>System.currentTimeMillis()</code></li></ul></li><li><code>clone</code> ：返回此对象的克隆体对象</li><li><code>before(Date)</code> ：某 Date 是否本 Date 时间之前</li><li><code>after(Date)</code> ：某 Date 是否本 Date 时间之后</li><li><code>compareTo(Date)</code> 与 <code>equals(Object)</code> ：前者比较时间长远返回 <code>int(0||1||-1)</code> ,后者比较时间是否相同。</li></ul><h4 id="DateFormat："><a href="#DateFormat：" class="headerlink" title="DateFormat："></a>DateFormat：</h4><h3 id="："><a href="#：" class="headerlink" title="："></a>：</h3><h4 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h4><ul><li>转义字符(字母大写表示取反)：<br> <code>\d</code> ：表示任意一个数字<br> <code>\w</code> ：表示字母数字或下划线中任意一个<br> <code>\s</code> ：表示空格,制表符,换行符,等空白字符中的任意一个</li><li>量词：<br><code>.</code> ：表示一个任意字符(除换行符外)，如需包含建议使用 <code>[\s\S]</code><br><code>&#123;n&#125;</code> ：表达式重复n次<br><code>&#123;n,m&#125;</code> ：表达式重复n至m次<br><code>&#123;m,&#125;</code> ：表达式至少重复m次<br><code>?</code> ：表达式重复0-1次，相当于 <code>&#123;0,1&#125;</code><br><code>+</code> ：表达式至少重复1次，相当于 <code>&#123;1,&#125;</code><br><code>*</code> ：表达式重复任意次，相当与 <code>&#123;0,&#125;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread</title>
      <link href="/2020/06/13/java/thread/thread/"/>
      <url>/2020/06/13/java/thread/thread/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="知识储备："><a href="#知识储备：" class="headerlink" title="知识储备："></a>知识储备：</h3><ul><li>java 中线程类主要依靠 <code>Runnable</code> 接口和 <code>Thread</code> 类。线程的启动主要依靠 <code>Thread</code> 的 <code>start</code>方法。</li><li>线程中发生异常，只会停止异常线程。一般不会影响其它线程。</li><li>线程存在编号从 0 开始。一个线程多次启动会报错，线程执行结束后也不能重启动。</li><li>main 方法是主线程，也是一条线程不能忽视</li></ul><h3 id="线程的创建与基础使用："><a href="#线程的创建与基础使用：" class="headerlink" title="线程的创建与基础使用："></a>线程的创建与基础使用：</h3><p>创建线程一般有两种方式：</p><ul><li>继承 <code>Thread</code> 类，重写 <code>run</code> 方法，调用 <code>start</code> 启动线程。</li><li>实现 <code>Runnable</code> 接口，实现 run 方法。将实现类作为参数传给 Thread 构造方法，利用 <code>start</code> 启动线程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1利用类继承Thread类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="comment">/* 重写run方法，run方法中写入线程需要执行的代码 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;extends Thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2利用类实现Runnable接口 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableTest</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">/* 实现run方法，run方法中写入线程需要执行的代码 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;implements Runnable&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.利用Thread的继承类，创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadTest</span>().start();</span><br><span class="line">        <span class="comment">//2.利用Runnable的实现类，创建线程并启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableTest</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>start</code> 方法启动线程，Java 虚拟机调用此线程的 run 方法。直接调用 <code>run</code> 方法跟普通成员方法一样，是不会启动线程的。</li><li><code>Thread</code> 是 <code>Runnable</code> 的子类。</li></ul><p>Tread 的 3 个静态方法：</p><ul><li><code>Thread.currentThread()</code> 返回当前线程对象</li><li><code>Thread.currentThread().getName()</code> 返回当前线程名称</li><li><code>Thread.sleep(long millis)</code> 线程释放执行权并睡眠指定毫秒数</li></ul><h3 id="synchronized-同步锁："><a href="#synchronized-同步锁：" class="headerlink" title="synchronized 同步锁："></a>synchronized 同步锁：</h3><p>线程中多线程操作一个资源时往往容易发生错误，这时我们需要利用 <code>同步</code> 和 <code>锁</code> 来同步操作资源的代码块。</p><ul><li>同步前提：有多个线程且同步代码块使用同一个锁(对象)，不同锁同步块的线程互不产生影响。</li><li><code>synchronized</code> 修饰的代码块，为同步代码块。它需要传入一个对象作为参数，传入的对象作为了锁。</li><li>多线程中当某线程执行同步代码块代码时拿到锁(对象)如中途休眠，其它线程开始执行。当执行到同步代码块时它会去获取同步锁，因为锁被占用此线程将无法继续执行，而释放执行权。直至持有锁的线程执行完成并释放锁，其它同锁线程才能执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程中存在共性数据时，用同步保证数据安全性</span></span><br><span class="line"><span class="keyword">synchronized</span>(Object)&#123;<span class="comment">//同步代码块，需要传入一个对象作为锁</span></span><br><span class="line">    <span class="comment">//当前线程等待，被唤醒后继续向下执行(会抛出InterruptedException)</span></span><br><span class="line">    Object.wait();</span><br><span class="line">    <span class="comment">//唤醒一个在此对象监视器(锁)上的单线程(无等待线程时使用不报错)</span></span><br><span class="line">    Object.notify();</span><br><span class="line">    Object.notifyAll();<span class="comment">//唤醒在此对象监视器(锁)上的所有线程</span></span><br><span class="line">    <span class="comment">//以上三个方法必须在同步中且被锁对象调用，都是继承至Object的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操控 synchronized 同步块(Object(锁)的三个线程方法)：</p><ul><li><code>wait</code> ：当前线程在此(同步块中)等待，且释放锁。也可传入一个 <code>long</code> 型的参数作为等待毫秒数，在此时间内未被唤醒，后将重新具有线程的执行权。</li><li><code>notify</code> ：唤醒正在等待对象锁的单个线程。</li><li><code>notifyAll</code>：唤醒正在等待对象锁的所有线程。</li></ul><p><code>synchronized</code> 修饰函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//同步函数，以this为锁。多个块需要同步时不建议使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>&#123;<span class="comment">//静态方法锁 = 类名.class</span></span><br><span class="line">    <span class="comment">//静态同步函数，因为静态中没有this，所以以本类字节码文件对象为锁</span></span><br><span class="line">    <span class="keyword">if</span>(c==<span class="literal">null</span>)&#123;<span class="comment">//设计模式中的应用</span></span><br><span class="line">        <span class="keyword">synchronized</span>(RunnableDemo.class)&#123;<span class="comment">//提高效率，减少对锁的判断</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="literal">null</span>) c=<span class="keyword">new</span> <span class="title class_">class</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初识死锁"><a href="#初识死锁" class="headerlink" title="初识死锁"></a>初识死锁</h3><p>简单死锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(ObjectA)&#123;<span class="comment">//线程1同步代码块</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ObjectB)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span>(ObjectB)&#123;<span class="comment">//线程2同步代码块</span></span><br><span class="line">    <span class="keyword">synchronized</span>(ObjectA)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单死锁实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadTest</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> is;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//锁A</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//锁B</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadTest</span><span class="params">(<span class="type">boolean</span> is)</span>&#123;<span class="built_in">this</span>.is = is;&#125;<span class="comment">//线程控制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is)&#123;<span class="comment">//if线程块</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--if--objA&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--if--objB&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//else线程块</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--else--objB&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;--else--objA&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="type">ThreadTest</span> <span class="variable">Trun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ThreadTest</span> <span class="variable">Frun</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadTest</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Trun).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(Frun).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">Thread-<span class="number">3</span>--<span class="keyword">else</span>--objB</span><br><span class="line">Thread-<span class="number">2</span>--<span class="keyword">if</span>--objA</span><br></pre></td></tr></table></figure><p>结论：Frun 拿到 objB 锁输出后线程阻塞，Trun 线程执行拿到了 objA 锁，执行输出 <code>Thread-2--if--objA</code> 后需要 objB 锁但此锁在 Frun 线程中因此线程阻塞。Frun 在次拿到线权但它需要 objA 锁，因此两线程都进入了阻塞状态。也就形成了死锁。</p><h3 id="Lock-同步"><a href="#Lock-同步" class="headerlink" title="Lock 同步"></a>Lock 同步</h3><p>jdk1.5 以后出现了新的锁，在 java.util.concurrent.locks 包中。 <code>Lock</code> 代替同步 <code>synchronized</code> 。Lock 作为锁使用更加灵活，synchronized 更加方便直观。</p><p>Lock 是一个接口建议使用它的实现类 <code>ReentrantLock</code> 类创建对象使用。一个 lock 对象表示同一个锁。</p><p><code>Lock lock = new ReentrantLock()</code> ：创建锁对象<br><code>lock.lock()</code> ：获取锁<br><code>lock.unlock()</code> ：释放锁(该放在 finally 中)</p><p><code>Condition set = lock.newCondition()</code> ：生产线程控制器<br><code>set.await()</code> ：当前线程在此等待，且释放锁<br><code>set.signal()</code> ：唤醒此控制器停止的线程<br><code>set.signalAll()</code> ：唤醒此控制器停止的所有线程</p><p>Lock 锁多消费多生产实例：</p><ul><li>生产和消费线程类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Set</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;<span class="comment">//生产线程</span></span><br><span class="line">    <span class="keyword">private</span> Shopping shopping;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Set</span><span class="params">(Shopping shopping)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.shopping=shopping;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            shopping.set();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Out</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;<span class="comment">//消费线程</span></span><br><span class="line">    <span class="keyword">private</span> Shopping shopping;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Out</span><span class="params">(Shopping shopping)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.shopping=shopping;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            shopping.out();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>商品类以及线程使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shopping</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();<span class="comment">//创建锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isEmpty=<span class="literal">true</span>;<span class="comment">//判断商品是否为空</span></span><br><span class="line">    <span class="keyword">private</span> Condition set=lock.newCondition();<span class="comment">//生产线程控制器</span></span><br><span class="line">    <span class="keyword">private</span> Condition out=lock.newCondition();<span class="comment">//消费线程控制器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span>&#123;<span class="comment">//生产方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();<span class="comment">//获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;生产商品：&quot;</span> + count);</span><br><span class="line">                isEmpty=<span class="literal">false</span>;</span><br><span class="line">                out.signal();<span class="comment">//唤醒消费线程</span></span><br><span class="line">                set.await();<span class="comment">//生产线程等待</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;<span class="comment">//消费方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();<span class="comment">//获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (!isEmpty)&#123;</span><br><span class="line">                count--;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;消费商品：&quot;</span>+count);</span><br><span class="line">                isEmpty=<span class="literal">true</span>;</span><br><span class="line">                set.signal();<span class="comment">//唤醒生产线程</span></span><br><span class="line">                out.await();<span class="comment">//消费线程等待</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Shopping shopping=<span class="keyword">new</span> <span class="title class_">Shopping</span>();</span><br><span class="line">        Set set=<span class="keyword">new</span> <span class="title class_">Set</span>(shopping);</span><br><span class="line">        Out out=<span class="keyword">new</span> <span class="title class_">Out</span>(shopping);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(set).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(set).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(out).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(out).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Thread-与-线程细节"><a href="#Thread-与-线程细节" class="headerlink" title="Thread 与 线程细节"></a>Thread 与 线程细节</h3><ol><li><code>sleep</code> 与 <code>wait</code> 异同：</li></ol><ul><li>sleep 是 Thread 的静态方法可在任何位置调用，wait 是绑定在锁上控制线程的方法，且只能在同步中使用。</li><li>sleep 必须传入时间，wait 有多种不同参数的重构方法</li><li>都在同步中时 sleep 不能释放锁，wait 会释放锁。但都会让线程处于冻结状态</li></ul><ol start="2"><li><code>interrupt</code> 中断：</li></ol><p>是<code>Thread</code> 中的方法，当此线程处于线程池等待的状态时(sleep,wait,join)，可让此线程对象调用 <code>interrupt()</code> 方法中断等待强行唤醒。</p><p>3.守护线程：</p><ul><li><code>setDaemon(true)</code> 设置守护线程方法必须在该线程启动之前调用</li><li>标记为守护线程的线程使用与普通线程一样，当所有普通线程执行完以后，只剩下守护线程那么所有守护线程无论状态都将自动结束线程并退出 java 虚拟机</li></ul><p>如下当 t1 执行完以后无论 t2 是和状态是否执行完毕都将结束：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">t1.start();</span><br><span class="line">t2.setDaemon(<span class="literal">true</span>);<span class="comment">//标记3为守护线程，false普通线程</span></span><br><span class="line">t2.start();<span class="comment">//在标记之后启动线程</span></span><br></pre></td></tr></table></figure><ol start="4"><li>线程的优先级：</li></ol><p>线程优先级 <code>1-10</code> 所有线程默认优先级为 5， <code>setPriority(int)</code> 设置优先级。</p><ol start="5"><li><code>ThreadGroup</code> 线程组：</li></ol><ul><li><code>Thread(ThreadGroup group, Runnable target)</code> thread 构造方法可明确线程所属线程组。</li><li>线程组可对多个线程或线程组进行统一操作，所有线程默认属于 main 线程组。</li></ul><ol start="6"><li><code>join</code> 和 <code>yield</code> :</li></ol><ul><li><code>join</code> 主线程等待子线程结束之后才能继续运行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">        s.start();</span><br><span class="line">        s.join();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Father 的线程要等 Son 的线程执行完毕才能执行。</p><ul><li><code>yield</code> 当某线程调用此方法时，表示释放该线程的执行权。让其它线程有机会争夺执行权，且自己也有机会争夺执行权。</li></ul><p>7.匿名内部类创建启动线程：</p><p>因为 Thread 重写了 Runnable 的 run 方法，所以将执行 Thread 的 run 方法。使用 super 也可调用到 Runnable 的 run 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Runnable 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.run();<span class="comment">//没有super将无无法执行Runnable的run方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Thread 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
            <tag> lock </tag>
            
            <tag> synchronize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 基础</title>
      <link href="/2020/06/05/html/jquery/"/>
      <url>/2020/06/05/html/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery-常用总结"><a href="#jQuery-常用总结" class="headerlink" title="jQuery 常用总结"></a>jQuery 常用总结</h1><h2 id="入口函数："><a href="#入口函数：" class="headerlink" title="入口函数："></a>入口函数：</h2><p>我们先看一下原生 js 的入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生js写法</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onload&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>jq 的入口函数后 4 种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jQuery_ready&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jQuery&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在某元素加载完成后执行，这里表示在document加载完毕后</span></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$_ready&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//常用推荐</span></span><br><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="解决冲突-符号的使用-："><a href="#解决冲突-符号的使用-：" class="headerlink" title="解决冲突($符号的使用)："></a>解决冲突($符号的使用)：</h2><p>释放’$‘的使用权和自定义访问符：</p><ul><li><code>jQuery.noConflict();</code> 表示释放$符的使用权，之后不能再使用$符调用函数或方法(可用 jQuery 代替)。注意此句需在 jquery 使用之前使用才有效。</li><li>自定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将$的释放语句赋值给定义的变量</span></span><br><span class="line"><span class="keyword">var</span> jq = jQuery.<span class="title function_">noConflict</span>();</span><br><span class="line"><span class="title function_">jq</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//jq代替了 &#x27;$&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jq&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数 $():"></a>核心函数 <code>$()</code>:</h2><p>它能接受 3 中参数：</p><ol><li>传入函数，表示它是一个入口函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//code</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>字符串</li></ol><ul><li>可像 css 选择器一样选择元素。</li><li>也可是一个标签字符串，会自动转为 jquery 对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(() =&gt; &#123;</span><br><span class="line">    <span class="comment">//选择器简单使用</span></span><br><span class="line">    <span class="keyword">let</span> div = $(<span class="string">&quot;#main div&quot;</span>); <span class="comment">//拿到id为main下的所有div并返回一个jquery集合对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div[<span class="number">0</span>]); <span class="comment">// 集合中具体的某一个元素为js元素</span></span><br><span class="line">    </span><br><span class="line">    div = $(<span class="string">&quot;div &gt; ul&quot;</span>); <span class="comment">// 拿到div下紧邻的所有的子ul</span></span><br><span class="line">    </span><br><span class="line">    div = $(<span class="string">&quot;div + li&quot;</span>); <span class="comment">// 拿到div同级上下紧挨着的且是li的元素</span></span><br><span class="line">    </span><br><span class="line">    div = $(<span class="string">&quot;div ~ li&quot;</span>); <span class="comment">// 拿到div同级所有是li的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//标签串</span></span><br><span class="line">    <span class="keyword">let</span> li = $(<span class="string">&quot;&lt;li&gt;5&lt;/li&gt;&quot;</span>); <span class="comment">//转为一个标签并组成jquery的对象</span></span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).<span class="title function_">append</span>(li);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.接受一个 DOM 变量(如原生 js 获取的元素节点)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;div&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//转换为一个jquery对象并返回</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(div));</span><br></pre></td></tr></table></figure><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><ul><li>数组方法：<br>首先要知道 jq 一般获取到的元素节点对象都是伪数组(有 0 到 length-1 的属性，和 length 属性)</li></ul><p>each(与原生 each 类似)：可遍历数组，也可遍历伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟一个伪数组</span></span><br><span class="line"><span class="keyword">let</span> arr = &#123; <span class="number">0</span>: <span class="string">&quot;a&quot;</span>, <span class="number">1</span>: <span class="string">&quot;b&quot;</span>, <span class="number">2</span>: <span class="string">&quot;c&quot;</span>, <span class="attr">length</span>: <span class="number">3</span> &#125;;</span><br><span class="line">$.<span class="title function_">each</span>(arr, <span class="function">(<span class="params">index, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot;--&quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>map(与原生 map 类似)：也可遍历伪数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = $.<span class="title function_">map</span>(arr, <span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&quot;--&quot;</span> + value);</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><ul><li><code>$.isWindow(window)</code> ：是否是 js 的 window 对象</li><li><code>$.isArray(arr)</code>：是否是一个数组(伪数组不算)</li><li><code>$.isFunction(()=&gt;&#123;&#125;)</code>：是否是一个函数</li></ul><ul><li><code>$.holdReady(true||false);</code>：jq 入口函数默认在 DOM 加载完成时执行，我们可以通过 <code>holdReady</code> 控制它的执行，true 关闭(确认关闭)，false 执行(取消关闭)。</li></ul><h2 id="元素选择器："><a href="#元素选择器：" class="headerlink" title="元素选择器："></a>元素选择器：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// empty 即没有文本也没有子标签元素的元素</span></span><br><span class="line"><span class="keyword">let</span> empty = $(<span class="string">&quot;div:empty&quot;</span>);</span><br><span class="line"><span class="comment">// parent 有文本或有子标签元素的元素</span></span><br><span class="line"><span class="keyword">let</span> parent = $(<span class="string">&quot;div:parent&quot;</span>);</span><br><span class="line"><span class="comment">// contains 包含指定文本或标签的元素</span></span><br><span class="line"><span class="keyword">let</span> contains = $(<span class="string">&quot;div:contains(&#x27;1&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">// has 子元素包含某标签的元素</span></span><br><span class="line"><span class="keyword">let</span> has = $(<span class="string">&quot;div:has(&#x27;li&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">// 组合选择器 将多个需要选中的元素或条件使用逗号隔开</span></span><br><span class="line"><span class="keyword">let</span> sum = $(<span class="string">&quot;div,span,img&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="元素筛选与遍历："><a href="#元素筛选与遍历：" class="headerlink" title="元素筛选与遍历："></a>元素筛选与遍历：</h2><p>通常在元素选择器之后使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.父类筛选</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">parent</span>(); <span class="comment">// 方法返回被选元素的直接父元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">parents</span>(); <span class="comment">// 返回被选元素的所有祖先元素</span></span><br><span class="line"><span class="comment">// 2.子类筛选</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">children</span>(); <span class="comment">// 返回被选元素的所有直接子元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">find</span>(<span class="string">&#x27;p&#x27;</span>); <span class="comment">// 查找后代元素中符合条件的元素</span></span><br><span class="line"><span class="comment">// 3.兄弟筛选</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">siblings</span>(); <span class="comment">// 返回被选元素的 所有兄弟</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">prev</span>(); <span class="comment">// 返回被选元素的 上一个 兄弟</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">prevAll</span>(); <span class="comment">// 返回被选元素的 前面的所有 兄弟</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">next</span>(); <span class="comment">// 返回被选元素的 下一个 兄弟</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">nextAll</span>(); <span class="comment">// 返回被选元素的 后面的所有 兄弟</span></span><br><span class="line"><span class="comment">// 其它筛选</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">first</span>(); <span class="comment">// 获取当前选中的元素中的第一个</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">last</span>(); <span class="comment">// 获取当前选中的元素中的最后一个</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">eq</span>(index); <span class="comment">// 从当前选中的元素中获取指定位置上的元素（0开始）</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">filter</span>(<span class="string">&quot;.middle&quot;</span>); <span class="comment">// 在选中的元素中筛选</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">not</span>(); <span class="comment">// 排除选中的某些元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;p&quot;</span>); <span class="comment">// 向当前选中的元素集合中添加新的元素集合</span></span><br><span class="line">$(selector).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">index,element</span>)); <span class="comment">// 遍历选择器中的所有元素</span></span><br></pre></td></tr></table></figure><h2 id="对标签属性的操作："><a href="#对标签属性的操作：" class="headerlink" title="对标签属性的操作："></a>对标签属性的操作：</h2><p>有两个方法 <code>attr</code> 和 <code>prop</code> 它们类似也有不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取标签节点属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;input&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>));</span><br><span class="line"><span class="comment">//设置标签节点属性(不存在将自动添加)</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line"><span class="comment">//移除标签某属性</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">removeAttr</span>(<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>prop</code> 的使用与 <code>attr</code> 相同，官方推荐当属性值为 true 和 false 时使用 <code>prop</code> 方法。其它使用 <code>attr</code> 。</p><h2 id="标签的-class-属性："><a href="#标签的-class-属性：" class="headerlink" title="标签的 class 属性："></a>标签的 class 属性：</h2><ul><li><code>$(&quot;div&quot;).addClass(&quot;class&quot;);</code> 添加 class(多个 class 用空格隔开)。</li><li><code>$(&quot;div&quot;).removeClass(&quot;class&quot;);</code> 删除 class</li><li><code>$(&quot;div&quot;).toggleClass(&quot;class&quot;);</code> 切换 class，存在就删除，不存在则添加。</li></ul><h2 id="标签内容："><a href="#标签内容：" class="headerlink" title="标签内容："></a>标签内容：</h2><ul><li><code>html</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>()); <span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&lt;p&gt;value&lt;/p&gt;&quot;</span>); <span class="comment">//设置</span></span><br></pre></td></tr></table></figure><ul><li><code>text</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>()); <span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;&lt;p&gt;value&lt;/p&gt;&quot;</span>); <span class="comment">//设置</span></span><br></pre></td></tr></table></figure><ul><li><code>val</code> ：针对带value属性值的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;#input&quot;</span>).<span class="title function_">val</span>()); <span class="comment">//获取</span></span><br><span class="line">$(<span class="string">&quot;#input&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">//设置</span></span><br></pre></td></tr></table></figure><h2 id="css-设置属性值："><a href="#css-设置属性值：" class="headerlink" title="css 设置属性值："></a>css 设置属性值：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>));</span><br><span class="line"><span class="comment">//设置属性，可链式添加</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>, <span class="string">&quot;red&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;300px&quot;</span>);</span><br><span class="line"><span class="comment">//对象方式设置属性</span></span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">css</span>(&#123;</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;200px&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="元素创建添加与删除："><a href="#元素创建添加与删除：" class="headerlink" title="元素创建添加与删除："></a>元素创建添加与删除：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在元素内部最前面添加元素（参数可以是字符串也可以是元素）</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">prepend</span>(<span class="string">&quot;&lt;div&gt;子级最前&lt;div/&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 在元素内部最后面添加元素（参数可以是字符串也可以是元素）</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;div&gt;子级最后&lt;div/&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 在该元素之前追加（同级）元素</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">before</span>(<span class="string">&quot;&lt;div&gt;同级前&lt;div/&gt;&quot;</span>);</span><br><span class="line"><span class="comment">// 在该元素之后追加（同级）元素</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">after</span>(<span class="string">&quot;&lt;div&gt;同级后&lt;div/&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">empty</span>(); <span class="comment">// 清空元素内的内容</span></span><br><span class="line">$(<span class="string">&quot;#container&quot;</span>).<span class="title function_">remove</span>(); <span class="comment">// 删除元素</span></span><br></pre></td></tr></table></figure><h2 id="元素事件："><a href="#元素事件：" class="headerlink" title="元素事件："></a>元素事件：</h2><h3 id="1-鼠标事件"><a href="#1-鼠标事件" class="headerlink" title="1.鼠标事件"></a>1.鼠标事件</h3><p><code>click</code> :单击事件<br><code>dblclick</code> :双击事件<br><code>mouseenter</code> :当鼠标指针进入所选元素时触发<br><code>mouseleave</code> :当鼠标离开所选元素时触发<br><code>mouseover</code> :当鼠标在所选元素上方悬停时触发</p><h3 id="2-键盘事件"><a href="#2-键盘事件" class="headerlink" title="2.键盘事件"></a>2.键盘事件</h3><p><code>keydown</code> :当按下键盘按键时会触发<br><code>keyup</code> :当按键被释放时会触发<br><code>keypress</code> :当按下并抬起同一个按键会触发</p><h3 id="3-表单事件"><a href="#3-表单事件" class="headerlink" title="3.表单事件"></a>3.表单事件</h3><p><code>submit </code>:提交表单时会触发<br><code>change</code> :当表单元素的值发生改变时会触发<br><code>focus </code>:当表单元素获得焦点时触发<br><code>blur</code> :当表单元素失去焦点时会触发</p><h3 id="4-文件事件"><a href="#4-文件事件" class="headerlink" title="4.文件事件"></a>4.文件事件</h3><p><code>ready</code> :当DOM加载完成以后触发<br><code>resize </code>:当浏览器窗口大小改变时触发<br><code>scroll</code> :当用户在指定的元素中滚动滚轮条时触发</p><h3 id="5-事件绑定"><a href="#5-事件绑定" class="headerlink" title="5. 事件绑定"></a>5. 事件绑定</h3><ol><li>直接绑定事件：使用 <code>元素.事件名称(函数)</code> 如 <code>$(&quot;#app&quot;).click(function(event)&#123;&#125;);</code> 。</li><li>on 绑定事件： <code>元素.on(‘事件名称,...’,函数)</code> on方法可以一次绑定多个事件，事件名称之间使用逗号隔开即可。</li><li>off 删除事件： <code>元素.off(&quot;事件名称&quot;)</code> 关闭元素的某个事件。</li></ol><h2 id="动画处理："><a href="#动画处理：" class="headerlink" title="动画处理："></a>动画处理：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可添加参数，参数1 为完成的总毫秒时间，参数2 为回调函数</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">hide</span>() <span class="comment">// 隐藏被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">show</span>() <span class="comment">// 显示被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">toggle</span>() <span class="comment">// 隐藏和显示之间切换</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">fadeIn</span>() <span class="comment">// 淡入被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">fadeOut</span>() <span class="comment">// 淡出被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">fadeToggle</span>() <span class="comment">// 淡入淡出切换</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">slideUp</span>() <span class="comment">// 上滑动被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">slideDown</span>() <span class="comment">// 下滑动被选元素</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">slideToggle</span>() <span class="comment">// 上下滑动切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义动画 参数1 改变的属性，参数2 动画的时间，参数3 回调函数(可选)</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">animate</span>(&#123;<span class="attr">width</span>:<span class="string">&quot;200px&quot;</span>,<span class="attr">height</span>:<span class="string">&quot;200px&quot;</span>&#125;,<span class="number">2000</span>)</span><br><span class="line">            .<span class="title function_">animate</span>(&#123;<span class="attr">width</span>:<span class="string">&quot;-=200px&quot;</span>,<span class="attr">height</span>:<span class="string">&quot;+=200px&quot;</span>&#125;,<span class="number">2000</span>) <span class="comment">// 可进行运算</span></span><br><span class="line">            .<span class="title function_">animate</span>(&#123;<span class="attr">width</span>:<span class="string">&quot;100px&quot;</span>,<span class="attr">height</span>:<span class="string">&quot;200px&quot;</span>&#125;,<span class="number">2000</span>); <span class="comment">// 多个动画依次执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 以上的动画被一个一个添加到元素的动画队列中，可使用stop停止动画</span></span><br><span class="line"><span class="comment"> * 不带参停止元素队列中当前正在执行的动画，队列中还有动画则执行下一个</span></span><br><span class="line"><span class="comment"> * 参数1 是否清除队列中所有的动画，参数2 是否立即完成当前动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$(<span class="string">&quot;#app&quot;</span>).<span class="title function_">stop</span>(); <span class="comment">// 后面可级联其它动画与操作</span></span><br></pre></td></tr></table></figure><h2 id="ajax（jQuery）"><a href="#ajax（jQuery）" class="headerlink" title="ajax（jQuery）:"></a>ajax（jQuery）:</h2><h3 id="获取表单数据："><a href="#获取表单数据：" class="headerlink" title="获取表单数据："></a>获取表单数据：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#form-box&#x27;</span>).<span class="title function_">serialize</span>(); <span class="comment">// 将表单数据序列化为字符串（name=1&amp;type=1）</span></span><br><span class="line">$(<span class="string">&#x27;#form-box&#x27;</span>).<span class="title function_">serializeArray</span>();<span class="comment">// 将表单数据提取为对象形势（&#123;&quot;name&quot;:&quot;1&quot;,&quot;type&quot;:&quot;1&quot;&#125;）</span></span><br><span class="line">$(<span class="string">&quot;#form-box&quot;</span>).<span class="title function_">submit</span>(); <span class="comment">// 提交表单</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;form&quot;</span>).<span class="title function_">submit</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认行为,阻止表单默认提交行为</span></span><br><span class="line">    <span class="comment">// return false; // 也可阻止表单提交,也可在提交表单按钮的点击事件中return false</span></span><br><span class="line">    <span class="comment">// e.stopPropagation(); // 阻止事件冒泡</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ajax发送请求："><a href="#ajax发送请求：" class="headerlink" title="ajax发送请求："></a>ajax发送请求：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/greet&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;jenny&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">//data = jQuery.parseJSON(data); //dataType指明了返回数据为json类型，故不需要再反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="post请求："><a href="#post请求：" class="headerlink" title="post请求："></a>post请求：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(&#123;</span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/allBook&quot;</span>,</span><br><span class="line">    <span class="comment">// 携带数据</span></span><br><span class="line">    <span class="attr">data</span>:&#123;<span class="string">&quot;mgs&quot;</span>:$(<span class="string">&quot;#mgs&quot;</span>).<span class="title function_">val</span>()&#125;,</span><br><span class="line">    <span class="comment">// 请求成功函数，data参数为请求响应的数据</span></span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    <span class="attr">error</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map 集合</title>
      <link href="/2020/06/02/java/collection/map/"/>
      <url>/2020/06/02/java/collection/map/</url>
      
        <content type="html"><![CDATA[<h3 id="Map-集合"><a href="#Map-集合" class="headerlink" title="Map 集合"></a>Map 集合</h3><h4 id="Map-已实现类与特性："><a href="#Map-已实现类与特性：" class="headerlink" title="Map 已实现类与特性："></a>Map 已实现类与特性：</h4><ul><li>Hashtable:哈希表结构，且不允许 null 作为键和值，同步(不建议使用)，键唯一性靠 hashCode()和 equals()(在键对象的类中重写方法，可保证键唯一性)<ul><li>Properties(Hashtable 子类):属性集，**<em>键与值都是字符串</em>**(没有泛型)，都以 object 存储在其中(自身提供了不用强转的方法)，且可以结合 <strong><em>流</em></strong> 进行键值操作</li></ul></li><li>HashMap: :哈希表结构，且允许<strong>null 作为键和值</strong>，不同步<ul><li>LinkedHashMap：HashMap 的子类，元素顺序为存入顺序(有序)</li></ul></li><li>TreeMap:二叉树结构，会对元素根据键排序(排序方法参照 TreeSet)，不同步</li></ul><h4 id="Map-常用方法："><a href="#Map-常用方法：" class="headerlink" title="Map 常用方法："></a>Map 常用方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">map.clear();<span class="comment">//清空元素</span></span><br><span class="line">map.size();<span class="comment">//获取元素个数</span></span><br><span class="line">map.containsKey(<span class="string">&quot;obj&quot;</span>);<span class="comment">//是否包含某键</span></span><br><span class="line">map.containsValue(<span class="string">&quot;obj&quot;</span>);<span class="comment">//是否包含某值</span></span><br><span class="line">map.isEmpty();<span class="comment">//集合是否为空</span></span><br><span class="line"></span><br><span class="line">map.get(<span class="string">&quot;key&quot;</span>);<span class="comment">//根据键拿值</span></span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);<span class="comment">//添加元素</span></span><br><span class="line"><span class="comment">//键要保持唯一,添加同一键时会覆盖之前的值,且返回之前的值</span></span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value2&quot;</span>);<span class="comment">//修改key的值</span></span><br><span class="line">map.putAll(map);<span class="comment">//将一个Map中的所有内容添加到此map中</span></span><br><span class="line">map.remove(<span class="string">&quot;key&quot;</span>);<span class="comment">//根据键移除指定元素,返回删除的值</span></span><br><span class="line">map.remove(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);<span class="comment">//根据键与值移除指定元素(必须完全相同),返回Boolean</span></span><br></pre></td></tr></table></figure><h4 id="迭代-Map-集合的-3-种方法："><a href="#迭代-Map-集合的-3-种方法：" class="headerlink" title="迭代 Map 集合的 3 种方法："></a>迭代 Map 集合的 3 种方法：</h4><ol><li><code>map.keySet()</code> 获取所有键：<br>它返回一个 set 集合，元素都是 map 集合的 key。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set=map.keySet();</span><br><span class="line"><span class="keyword">for</span> (Integer i:set) &#123;</span><br><span class="line">    System.out.println(map.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>map.values()</code> 获取所有值<br>它返回 Collection 集合，元素都是 map 的 value。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; col=map.values();</span><br><span class="line"><span class="keyword">for</span> (String vs:col) &#123;</span><br><span class="line">    System.out.println(vs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>map.entrySet()</code> 对象方式取出</li></ol><p>它返回 <code>Set&lt;Map.Entry&lt;k,v&gt;&gt;</code> Entry是Map的内部接口，每一个Entry对象存储了map的一对键值对。通过Entry中的 <code>getKey</code> <code>getValue</code> <code>setValue</code> 等方法，对map进行 key,value的获取和value的修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line">map.put(<span class="number">0</span>,<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;Integer,String&gt;&gt; entry=map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer,String&gt; e:entry) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key=&quot;</span>+e.getKey()</span><br><span class="line">            +<span class="string">&quot;，value=&quot;</span>+e.getValue());</span><br><span class="line">    <span class="keyword">if</span> (e.getKey()==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//直接修改map中的值</span></span><br><span class="line">        e.setValue(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map </tag>
            
            <tag> hashmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set 集合</title>
      <link href="/2020/06/02/java/collection/set/"/>
      <url>/2020/06/02/java/collection/set/</url>
      
        <content type="html"><![CDATA[<h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><blockquote><p>Set 接口 (无序,元素不能重复)，继承了 Collection 接口无特有方法。</p></blockquote><h4 id="Set-已实现类与特性："><a href="#Set-已实现类与特性：" class="headerlink" title="Set 已实现类与特性："></a>Set 已实现类与特性：</h4><ul><li>HashSet：哈希表结构，保证元素唯一性依靠 <code>hashCode()</code> 和 <code>equals()</code> 方法(hash 值相同时再判断 equals,相同将不再存储)，不同步</li><li>TreeSet：是链表结构(指针)，需保证元素唯一性，可排序</li><li>LinkedHashSet：HashSet 的子类，按存入顺序使用</li></ul><h4 id="Set-利用-Iterator-动态移除元素："><a href="#Set-利用-Iterator-动态移除元素：" class="headerlink" title="Set 利用 Iterator 动态移除元素："></a>Set 利用 Iterator 动态移除元素：</h4><p>与 list 类似直接在 foreach 或循环中动态 <code>add</code> 或 <code>remove</code> 会出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Set set=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">set.add(<span class="string">&quot;set0&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;set2&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator iterator=set.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (str.equals(<span class="string">&quot;set1&quot;</span>)) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashSet-元素唯一性："><a href="#HashSet-元素唯一性：" class="headerlink" title="HashSet 元素唯一性："></a>HashSet 元素唯一性：</h4><blockquote><ul><li>HashSet 保证元素唯一性是通过元素的两个方法，hashCode()和 equals()来完成的。</li><li>如果元素的 HashCode 值相同，才会判断 equals 是否为 true。</li><li>如果元素的 HashCode 值不同，不会调用 equals。</li></ul></blockquote><p>由此可知我们要保证 Set 中存入的对象(元素)唯一时，需在该元素类中重写 <code>hashCode</code> 和 <code>equals</code> 方法。<br>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">stu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//先返回hash值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//再判断属性是否相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">stu</span> <span class="variable">stu</span> <span class="operator">=</span> (stu) o;</span><br><span class="line">        <span class="keyword">return</span> name.equals(stu.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;stu&#123;name=&quot;</span>+name+<span class="string">&quot;-age=&quot;</span>+age+<span class="string">&quot;&#125;&quot;</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------使用----------------------------</span><br><span class="line">HashSet hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p><p>可以看出因为 <code>new stu(&quot;stu1&quot;,10)</code> 即 stu1 已存在 <code>new stu(&quot;stu1&quot;,20)</code> 存入失败。</p><h4 id="TreeSet-排序与去重："><a href="#TreeSet-排序与去重：" class="headerlink" title="TreeSet 排序与去重："></a>TreeSet 排序与去重：</h4><ul><li>TreeSet 保证元素唯一性和排序依靠，<code>Comparable</code> 接口的 <code>compareTo</code> 或 <code>Comparator</code> 接口的 <code>compare</code>方法。此</li><li>new TreeSet 时传入一个 Comparator 对象，将使用此接口方法比较元素。</li><li>不传入参数时默认需元素类实现 Comparable 接口，将默认使用此接口 compareTo 方法，来比较元素。存入的元素类未实现此接口将报错。</li><li>比较元素时返回值 <strong>等于 0</strong> 表示 <strong>元素重复</strong>。</li></ul><p><strong><em>使用默认比较排序：</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Comparable接口和compareTo方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">stu</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="string">&quot;stu&#123;name=&quot;</span>+name+<span class="string">&quot;-age=&quot;</span>+age+<span class="string">&quot;&#125;&quot;</span>;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        stu s=(stu)o;</span><br><span class="line">        <span class="keyword">return</span> name.compareTo(s.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------使用-------------------</span><br><span class="line">TreeSet hashSet=<span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p><p><strong><em>使用比较器比较排序：</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Comparator接口和compare方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line">        stu s1=(stu) o1;</span><br><span class="line">        stu s2=(stu) o2;</span><br><span class="line">        <span class="keyword">return</span> s1.name.compareTo(s2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------使用-----------------------------</span><br><span class="line"><span class="comment">//传入比较器</span></span><br><span class="line">TreeSet hashSet=<span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">compare</span>());</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><p>运行结果与上同。</p><h4 id="Set-中有序集合-LinkedHashSet："><a href="#Set-中有序集合-LinkedHashSet：" class="headerlink" title="Set 中有序集合 LinkedHashSet："></a>Set 中有序集合 LinkedHashSet：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet hashSet=<span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">10</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu2&quot;</span>,<span class="number">30</span>));</span><br><span class="line">hashSet.add(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;stu1&quot;</span>,<span class="number">20</span>));</span><br><span class="line">System.out.println(hashSet);</span><br></pre></td></tr></table></figure><p>运行结果：<br><code>[stu&#123;name=stu1-age=10&#125;, stu&#123;name=stu2-age=30&#125;]</code></p><p><code>LinkedHashSet</code> 去重与 <code>HashSet</code> 同，元素顺序与存入时的顺序同。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> set </tag>
            
            <tag> hashset </tag>
            
            <tag> treeset </tag>
            
            <tag> linkedhashSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android 杂记</title>
      <link href="/2020/05/31/android/view/"/>
      <url>/2020/05/31/android/view/</url>
      
        <content type="html"><![CDATA[<h3 id="Toast："><a href="#Toast：" class="headerlink" title="Toast："></a>Toast：</h3><ul><li>普通 Toast</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(getApplicationContext(), <span class="string">&quot;Toast&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure><ul><li>自定义定义显示位置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Toast toast=Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;居中Toast&quot;</span>, Toast.LENGTH_SHORT);</span><br><span class="line"><span class="comment">//参1显示位置，参2,3分别是xy轴的偏移量</span></span><br><span class="line">toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure><ul><li>自定义样式(布局文件根布局设置大小不管用)<br>布局文件：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@drawable/ic_launcher_background&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;test&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写一个布局，然后通过layoutinflater实例为view</span></span><br><span class="line">LayoutInflater li=LayoutInflater.from(TestActivity.<span class="built_in">this</span>);</span><br><span class="line">View view=li.inflate(R.layout.toast,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//取出组件单独设置</span></span><br><span class="line">TextView textView=view.findViewById(R.id.text);</span><br><span class="line">textView.setText(<span class="string">&quot;自定义Toast&quot;</span>);</span><br><span class="line">Toast toast=<span class="keyword">new</span> <span class="title class_">Toast</span>(<span class="built_in">this</span>);</span><br><span class="line">toast.setView(view);<span class="comment">//设置视图</span></span><br><span class="line">toast.setDuration(Toast.LENGTH_SHORT);<span class="comment">//设置时间</span></span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure><h3 id="AlertDialog："><a href="#AlertDialog：" class="headerlink" title="AlertDialog："></a>AlertDialog：</h3><ul><li>基本使用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Builder是一种设计模式</span></span><br><span class="line">AlertDialog.Builder dialog=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//所有设置都是可选的</span></span><br><span class="line">dialog.setIcon(R.drawable.ic_launcher_background)</span><br><span class="line">.setTitle(<span class="string">&quot;标题&quot;</span>).setMessage(<span class="string">&quot;内容&quot;</span>)</span><br><span class="line">.setPositiveButton(<span class="string">&quot;确定按钮&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, <span class="string">&quot;确定按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.setNegativeButton(<span class="string">&quot;取消按钮&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, <span class="string">&quot;取消按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.setNeutralButton(<span class="string">&quot;其它&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, <span class="string">&quot;其它按钮被按下&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.create(); </span><br><span class="line"><span class="comment">// 显示对话框并返回AlertDialog对象</span></span><br><span class="line">AlertDialog ad=dialog.show();</span><br><span class="line">ad.dismiss();<span class="comment">//利用AlertDialog对象调用对话框消失方法</span></span><br></pre></td></tr></table></figure><ul><li>列表形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog2=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2点击事件</span></span><br><span class="line">dialog2.setTitle(<span class="string">&quot;请选择&quot;</span>).setItems(texts, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, texts[which], Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.create().show();</span><br></pre></td></tr></table></figure><ul><li>单选框形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts2=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog4=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，参3点击事件</span></span><br><span class="line">dialog4.setTitle(<span class="string">&quot;请选择&quot;</span>).setSingleChoiceItems(texts2, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, texts2[which], Toast.LENGTH_SHORT).show();</span><br><span class="line">        dialog.dismiss();<span class="comment">//对话框消失</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setCancelable(<span class="literal">false</span>);<span class="comment">//点击对话框外范围，不会自动消失</span></span><br><span class="line">dialog4.create().show();</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><ul><li>多选框形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] texts3=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span>[] checkde=<span class="keyword">new</span> <span class="title class_">boolean</span>[]&#123;<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">true</span>&#125;;</span><br><span class="line">AlertDialog.Builder dialog3=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，点击事件</span></span><br><span class="line">dialog3.setTitle(<span class="string">&quot;请选择&quot;</span>).setMultiChoiceItems(texts3, checkde, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnMultiChoiceClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which, <span class="type">boolean</span> isChecked)</span> &#123;</span><br><span class="line">        Toast.makeText(TestActivity.<span class="built_in">this</span>, texts3[which]+<span class="string">&quot;:&quot;</span>+isChecked, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setPositiveButton(<span class="string">&quot;确定&quot;</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.create().show();</span><br></pre></td></tr></table></figure><ul><li>自定义(与 toast 自定义类似):</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写一个布局，然后通过layoutinflater实例为view</span></span><br><span class="line">LayoutInflater li=LayoutInflater.from(TestActivity.<span class="built_in">this</span>);</span><br><span class="line">View view=li.inflate(R.layout.toast,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//取出组件设置</span></span><br><span class="line">TextView textView=view.findViewById(R.id.text);</span><br><span class="line">textView.setText(<span class="string">&quot;自定义Toast&quot;</span>);</span><br><span class="line"></span><br><span class="line">AlertDialog.Builder dialog3=<span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//参1显示的数组列表，参2默认选中项，点击事件</span></span><br><span class="line">dialog3.setTitle(<span class="string">&quot;自定义&quot;</span>)</span><br><span class="line">.setView(view).create().show();</span><br></pre></td></tr></table></figure><h3 id="ProgressBar："><a href="#ProgressBar：" class="headerlink" title="ProgressBar："></a>ProgressBar：</h3><ul><li>xml 中：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/bar1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/bar2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;@android:style/Widget.Material.ProgressBar.Horizontal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progress</span>=<span class="string">&quot;30&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>java 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//onCreate方法中：</span></span><br><span class="line">bar2=findViewById(R.id.bar2);</span><br><span class="line">System.out.println(bar2.getProgress());</span><br><span class="line"><span class="comment">//模拟进度加载</span></span><br><span class="line">handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="comment">// 类中：</span></span><br><span class="line">Handler handler=<span class="keyword">new</span> <span class="title class_">Handler</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.handleMessage(msg);</span><br><span class="line">        <span class="keyword">if</span> (bar2.getProgress()&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.postDelayed(runnable,<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(TestActivity.<span class="built_in">this</span>, <span class="string">&quot;完成&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Runnable runnable=<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取进度和设置进度</span></span><br><span class="line">        bar2.setProgress(bar2.getProgress()+<span class="number">3</span>);</span><br><span class="line">        handler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="PopupWindow："><a href="#PopupWindow：" class="headerlink" title="PopupWindow："></a>PopupWindow：</h3><p>自定义一个弹出菜单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例化一个布局，作为之后的菜单样式</span></span><br><span class="line">View view= LayoutInflater.from(FriendActivity.<span class="built_in">this</span>).inflate(R.layout.fun_popup,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//初始化，参1为具体菜单样式的实例化对象，参23为菜单的宽高</span></span><br><span class="line">PopupWindow pop=<span class="keyword">new</span> <span class="title class_">PopupWindow</span>(view, ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line"><span class="comment">//想PopupWindow点击外侧时消失需要设置一个背景，才能成功</span></span><br><span class="line">pop.setBackgroundDrawable(<span class="keyword">new</span> <span class="title class_">BitmapDrawable</span>());</span><br><span class="line">pop.setFocusable(<span class="literal">true</span>);<span class="comment">//获取焦点</span></span><br><span class="line">pop.setOutsideTouchable(<span class="literal">true</span>);<span class="comment">//点击外侧消失</span></span><br><span class="line"><span class="comment">//设置位置，参1表示显示在哪个组件下，参23表示偏移值</span></span><br><span class="line">pop.showAsDropDown(item,<span class="number">0</span>,-<span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="AndroidStudio-使用-lombok："><a href="#AndroidStudio-使用-lombok：" class="headerlink" title="AndroidStudio 使用 lombok："></a>AndroidStudio 使用 lombok：</h3><p>在build.gradle中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    annotationProcessor &#x27;org.projectlombok:lombok:1.18.12&#x27;</span><br><span class="line">    compileOnly &quot;org.projectlombok:lombok:1.18.12&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决弹出键盘导致布局改变："><a href="#解决弹出键盘导致布局改变：" class="headerlink" title="解决弹出键盘导致布局改变："></a>解决弹出键盘导致布局改变：</h3><p>在 onCreate 中的 setContentView 之前添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> toast </tag>
            
            <tag> alertdialog </tag>
            
            <tag> progressBar </tag>
            
            <tag> popupwindow </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java jdbc 操作数据库</title>
      <link href="/2020/05/30/java/JDBC/"/>
      <url>/2020/05/30/java/JDBC/</url>
      
        <content type="html"><![CDATA[<h3 id="深入-JDBC-了解类的反射机制"><a href="#深入-JDBC-了解类的反射机制" class="headerlink" title="深入 JDBC 了解类的反射机制"></a><center>深入 JDBC 了解类的反射机制</center></h3><h3 id="JDBC-基本使用："><a href="#JDBC-基本使用：" class="headerlink" title="JDBC 基本使用："></a>JDBC 基本使用：</h3><blockquote><p>在此我们会使用官方的思维来注册驱动，在后面我们可以利用， <strong><em>类的反射</em></strong> 来实现更简单的驱动注册。</p></blockquote><p>JDBC 一次简单的调用大致分为 5 步：</p><ol><li>加载驱动：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Driver driver=<span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">DriverManager.registerDriver(driver);</span><br></pre></td></tr></table></figure><p><code>Driver</code>： 驱动类，由 java 提供的接口。而它后面的 Driver 对象是由 SQL 厂商提供的实现类。由于它们的类名相同所有我们不能，再导入厂商的类包，只能用完整包名。<br><code>DriverManager</code>：驱动管理类，来加载驱动。</p><p>2.获取连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/stu?serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">String pass=<span class="string">&quot;991314&quot;</span>;</span><br><span class="line">connection=DriverManager.getConnection(url,user,pass);</span><br></pre></td></tr></table></figure><p>获取连接对象时需要 3 个参数，其中 url 在新版中后面需要时设置地区时间参数。否则会报数据库时区异常,建议设置为 <code>jdbc:mysql://127.0.0.1:3306/数据库名?characterEncoding=utf8&amp;serverTimezone=GMT%2B8</code> ，jdbc 5.1.47 以下不存在此问题。</p><ol start="3"><li>获取数据库操作对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement statement=connection.createStatement();</span><br></pre></td></tr></table></figure><ol start="4"><li>执行操作：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">String sql=<span class="string">&quot;insert into student values (&#x27;longlong&#x27;,30)&quot;</span>;</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="comment">//String sql=&quot;delete from student where name=&#x27;longlong&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//修改数据</span></span><br><span class="line"><span class="comment">//String sql=&quot;update student set name=&#x27;hff&#x27; where name=&#x27;何芳芳&#x27;&quot;;</span></span><br><span class="line"><span class="comment">//执行语句，返回被操作数据的条数</span></span><br><span class="line"><span class="type">int</span> count=statement.executeUpdate(sql);</span><br><span class="line">System.out.println(count+<span class="string">&quot;条数据被影响&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>executeUpdate</code> 方法一般用于对表数据增删改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">ResultSet resultSet=statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    <span class="comment">//列索引方式获取</span></span><br><span class="line">    String name=resultSet.getString(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//列名称方式获取</span></span><br><span class="line">    <span class="type">int</span> age=resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;age：&quot;</span>+age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>executeQuery</code> 方法一般用于查询数据库。它会将查询结果封装为一个 <code>ResultSet</code> 对象,通过该对象的 <code>next</code> (最开始指向空，运行一次指向下一条结果并返回true，最后结束返回false)和 <code>get类型(查询结果的列索引||列名)</code> 方法获取值(注意列索引从1开始)。</p><ol start="5"><li>关闭资源：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p>注意关闭的先后顺序(有查询语句时还要先关闭查询结果集)，先关闭操作对象，再关闭连接。**<em>后获取的先关闭</em>** ,这还不是最好的关闭方式应放在 <code>finally</code> 中进行关闭。</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">Driver driver=<span class="literal">null</span>;<span class="comment">//驱动</span></span><br><span class="line">Connection connection=<span class="literal">null</span>;<span class="comment">//连接</span></span><br><span class="line">Statement statement=<span class="literal">null</span>;<span class="comment">//操作</span></span><br><span class="line">ResultSet resultSet=<span class="literal">null</span>;<span class="comment">//查询结果集</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    driver = <span class="keyword">new</span> <span class="title class_">com</span>.mysql.cj.jdbc.Driver();</span><br><span class="line">    DriverManager.registerDriver(driver);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/stu?characterEncoding=utf8&amp;serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">    String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String pass=<span class="string">&quot;991314&quot;</span>;</span><br><span class="line">    connection=DriverManager.getConnection(url,user,pass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取操作对象</span></span><br><span class="line">    statement=connection.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行操作</span></span><br><span class="line">    <span class="comment">//增删改语句</span></span><br><span class="line">    <span class="comment">//String sql=&quot;insert into student values (&#x27;longlong&#x27;,30)&quot;;</span></span><br><span class="line">    <span class="comment">//String sql=&quot;delete from student where name=&#x27;longlong&#x27;&quot;;</span></span><br><span class="line">    <span class="comment">//String sql=&quot;update student set name=&#x27;hff&#x27; where name=&#x27;何芳芳&#x27;&quot;;</span></span><br><span class="line">    <span class="comment">//返回被操作数据的条数</span></span><br><span class="line">    <span class="comment">//int count=statement.executeUpdate(sql);</span></span><br><span class="line">    <span class="comment">//System.out.println(count+&quot;条数据被影响&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询语句</span></span><br><span class="line">    String sql=<span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">    resultSet=statement.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">        String name=resultSet.getString(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> age=resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;age：&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">    throwables.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;<span class="comment">//关闭资源</span></span><br><span class="line">    <span class="keyword">if</span>(resultSet!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(statement!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            statement.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用反射注册驱动："><a href="#利用反射注册驱动：" class="headerlink" title="利用反射注册驱动："></a>利用反射注册驱动：</h3><p>首先我们看一下 <code>com.mysql.cj.jdbc.Driver</code> 类中一块源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出它是一个静态语句块，并且此类一加载就完成了驱动的注册。由此我们可以利用类的反射机制完成注册驱动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//反射机制，加载驱动类</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios 基础</title>
      <link href="/2020/05/25/html/axios/"/>
      <url>/2020/05/25/html/axios/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios-简单入门"><a href="#Axios-简单入门" class="headerlink" title="Axios 简单入门"></a>Axios 简单入门</h1><blockquote><h3 id="ajax-与-axios"><a href="#ajax-与-axios" class="headerlink" title="ajax 与 axios"></a>ajax 与 axios</h3></blockquote><p>下面是一段 javascript 原生 ajax 发送一个简单的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ajax=<span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    ajax.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;1.txt&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">    ajax.<span class="title function_">send</span>();</span><br><span class="line">    ajax.<span class="property">onreadystatechange</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> con=ajax.<span class="property">responseText</span>;</span><br><span class="line">        <span class="title function_">alert</span>(con);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>axios 的简单使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看出 axios 对 ajax 进行了封装，比原生 ajax 使用更加简洁方便。注意 axios 需要在服务端使用，不合适本地请求。<br>axios 中需要传入一个对象，此对象有许多属性其中 <code>url</code> 是请求对象, <code>method</code> 为请求方式(get,post)不写时默认 get。这样就发送了请求，再调用 <code>then</code> 方法接受响应，它需要传入一个函数，函数需要一个参数。此参数就是接受响应消息的对象，建议取名为 <code>res</code> 。</p><p>除使用 url 添加传参 <code>url:&#39;1.txt?id=1&amp;name=haha&#39;</code> 外，axios 还能使用 <code>params</code> 属性(原理就是将参数拼接在 url 后)，将需要的参数插入它管理的对象中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;1.txt&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;haha&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>post 传参时除 <code>params</code> 外，还可以通过 <code>data</code> 属性它会将参数转为 json 对象传给服务器，需要服务器解析。无特殊要求建议使用 <code>params</code> 。</p><blockquote><h3 id="使用方法方式传参"><a href="#使用方法方式传参" class="headerlink" title="使用方法方式传参"></a>使用方法方式传参</h3></blockquote><ul><li><strong><em>get:</em></strong><br><code>.get</code> 表示 get 方式发送请求，参 1 为请求即 url，不使用 url 传参时可使用参 2 需要传入一个对象作为参数，对象中使用 <code>parmas</code> 属性方式封装请求的参数。 <code>.catch</code> 表示请求错误时方法，需要传入一个方法它接收一个参数就是错误信息建议命名为 <code>err</code> 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;1.txt&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">parmas</span>:&#123;</span><br><span class="line">            name : <span class="string">&#x27;haha&#x27;</span></span><br><span class="line">        &#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li><strong><em>post:</em></strong><br><code>.post</code> 以 post 方式发送请求，除可采用 get 同等方式传参以外还可使用字符串 <code>key=value</code> 方式传参。此也可外参 2 传入对象 <code>&#123;name:&#39;haha&#39;&#125;</code> 方式是以 <code>data</code> 属性传参的需要服务器解析。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;id=1&amp;name=haha&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>all 并发请求(多请求)：</li></ul><p><code>.all</code> 中传入一个数组，数组的元素都是 <code>axios</code> 请求。<br>再通过 <code>then</code> 中方法的参数以数组的方式返回响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;servlet&quot;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> res)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res[i].<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then</code> 通过 <code>axios.spread</code> 传入方法，以参数的方式返回响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;servlet&quot;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(</span><br><span class="line">    axios.<span class="title function_">spread</span>(<span class="function">(<span class="params">res1,res2</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">data</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器和文件上传下载</title>
      <link href="/2020/05/21/java/javaweb/filter/"/>
      <url>/2020/05/21/java/javaweb/filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter-过滤器："><a href="#Filter-过滤器：" class="headerlink" title="Filter 过滤器："></a>Filter 过滤器：</h2><blockquote><p>对在客户端和服务器之间的中间层 <strong>接口</strong>，可对客户请求消息和服务器响应消息做拦截处理。并且 <strong><em>一个 servlet 文件可以添加多个过滤器，一个过滤器也可过滤多个 servlet 文件</em></strong> 都在 xml 文件中配置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">    <span class="comment">//关键方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest var1, ServletResponse var2, FilterChain var3)</span> <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码中可以看出它与 servlet 类似，都有 init 初始化和 destroy 销毁的方法。但这两方法与 servlet 不同的是，它们前面加入了 <strong><em>default</em></strong> 关键字(java8 新特性)。可以看到它们后面有方法体，所以我们可以选择不重写此两方法，只重写过滤的关键方法 <strong><em>doFilter</em></strong> 。且此方法与 servlet 中 <strong><em>service</em></strong> 方法类似，可对请求和响应做操作。</p><ul><li>实例情景模拟：在浏览器中用<strong>post</strong>方式并以 name 为 key 传递一个<strong>中文</strong>的值访问 <code>/servlet</code> 映射如下。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/web/servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sub&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>servlet 类中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//可就地设置编码</span></span><br><span class="line">        <span class="comment">//request.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line">        <span class="comment">//response.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        <span class="comment">//未设置编码时下方请求和响应都出现乱码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;哈哈哈&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>过滤器中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse,</span></span><br><span class="line"><span class="params">                         FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">/**在servlet中我们需要给请求和响应设置编码，</span></span><br><span class="line"><span class="comment">         * 当有多个servlet类时我们就可以用过滤器方式，</span></span><br><span class="line"><span class="comment">         * 减少复用，只用在xml中给这些类配置过滤器。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//过滤器会默认中断请求，需要请求继续传递下去需要使用 FilterChain</span></span><br><span class="line">        <span class="comment">//doFilter参数中自带filterChain，doFilter需要传入请求和响应对象</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>xml 中将 servlet 与过滤器关联：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="comment">&lt;!--映射，与servlet的映射类似--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>io.ruoxijun.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指明添加此过滤器映射的URL，过滤jsp写站点路径全名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--还可以继续为其它servlet添加此过滤器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/此url标签不限个数<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--也可为一个url配置多个过滤器映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filters<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Filter-生命周期："><a href="#Filter-生命周期：" class="headerlink" title="Filter 生命周期："></a>Filter 生命周期：</h4><blockquote><p>与 servlet 类似唯一不同是当 <strong>服务器启动</strong> 便利用反射加载类调用无参构造函数，还有一个前提是必须在 xml 中配置了 Filter。之后便于 servlet 类似： <code>init初始化 → doFilter(执行多次，到服务器关闭) → destory销毁</code><br>当一个 servlet 文件对应多个过滤器时，在 xml 中排在前的过滤器先执行。且注意过滤器是否有继续传递请求。</p></blockquote><h4 id="Filter-注解："><a href="#Filter-注解：" class="headerlink" title="Filter 注解："></a>Filter 注解：</h4><p>与 servlet 一样，Filter 也能使用注解：<br>在 Filter 类上方: <strong><em><code>@WebFilter(&quot;/servlet&quot;)</code></em></strong><br>它还能过滤 jsp： <strong><em><code>@WebFilter(&quot;/路径全名.jsp&quot;)</code></em></strong></p><h4 id="Filter-使用场景："><a href="#Filter-使用场景：" class="headerlink" title="Filter 使用场景："></a>Filter 使用场景：</h4><ol><li>同一处理中文乱码</li><li>屏蔽敏感词汇</li><li>控制资源访问权限</li></ol><h2 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h2><p>知识补充： <code>req.getServletContext().getRealPath(&quot;/file/1.txt&quot;);</code> 可拿到当前文件的路径，且传入参数会附加在该路径之后。返回字符串</p><p>上传时表单设置：</p><ol><li>input 的 <code>type</code> 设置为 <code>file</code></li><li>form 属性 <code>method</code> 需要设置为 <code>post</code> (get 不会传输文件，只会提交文件的 name)</li><li>form 属性 <code>enctype</code> 设置为 <code>multipart/form-data</code> (文件传输必须设置)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>servlet 中直接利用 <code>resp</code> 获取文件：<br>通过 <code>req.getInputStream()</code> 方法，接收到文件流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    BufferedReader buReader=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(req.getInputStream()));</span><br><span class="line">    String values=<span class="literal">null</span>;</span><br><span class="line">    BufferedWriter buWriter=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:/test/str.txt&quot;</span>)));</span><br><span class="line">    <span class="keyword">while</span> ((values=buReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">        System.out.println(values);</span><br><span class="line">        buWriter.write(values);</span><br><span class="line">        buWriter.newLine();</span><br><span class="line">        buWriter.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意：</em></strong> 此流输出的文件并不是指包含文件本身，它流的<em>开头</em>和<em>末尾</em>都插入了，一些浏览器<em>信息</em>。不经过处理直接保存可能导致文件无法正常使用。</p><ul><li>使用 <code>fileupload</code> 获取上传文件：<br>使用 <code>fileupload</code> 需要导入 <code>commons-fileupload</code> 和 <code>commons-io</code> 的 jar 包。它将所有的请求都解析成了 <code>FileItem</code> 对象,以面像对象的方式完成文件的上传。如我们不用再考虑怎么处理浏览器头尾自带的信息，它的将文件和信息提取分离了出来。我们只需调用它提供的方法就能获取到我们需要的数据信息。<br><code>ServletFileUpload</code> 文件管理对象的 <code>parseRequest(HttpServletRequest)</code> 请求解析方法，会将 form 的每一个 input 都解析为一个 fileitem 对象,并组成 <code>List&lt;FileItem&gt;</code> 集合返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//文件管理对象</span></span><br><span class="line">    DiskFileItemFactory dfif=<span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">    <span class="comment">//文件上传对象，需要传入一个文件管理对象</span></span><br><span class="line">    ServletFileUpload sfu=<span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(dfif);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将请求解析为fileitem的集合</span></span><br><span class="line">        List&lt;FileItem&gt; fileItems=sfu.parseRequest(req);</span><br><span class="line">        <span class="keyword">for</span>(FileItem fileItem: fileItems)&#123;</span><br><span class="line">            <span class="comment">//判断是否是表单字段，否则就是文件</span></span><br><span class="line">            <span class="keyword">if</span>(fileItem.isFormField())&#123;</span><br><span class="line">                <span class="comment">//获取该input的name属性名</span></span><br><span class="line">                String name=fileItem.getFieldName();</span><br><span class="line">                <span class="comment">//获取该input的值</span></span><br><span class="line">                String value=fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//获取该input上传的文件名，非上传文件时该值为null</span></span><br><span class="line">                String fileName=fileItem.getName();</span><br><span class="line">                <span class="type">long</span> size=fileItem.getSize();<span class="comment">//文件大小</span></span><br><span class="line">                <span class="comment">//此流只存在文件数据，头尾不在有多余累赘</span></span><br><span class="line">                InputStream input=fileItem.getInputStream();</span><br><span class="line">                FileOutputStream output=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e:/test/&quot;</span>+fileName);</span><br><span class="line">                <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((b=input.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    output.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                output.close();</span><br><span class="line">                input.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载："><a href="#文件下载：" class="headerlink" title="文件下载："></a>文件下载：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>servlet 中：</p><ol><li><code>resp.setContentType</code> 和 <code>resp.setHeader</code> 为文件下载必须设置方法。它们会掉用浏览器自带的下载程序。</li><li><code>resp.getOutputStream()</code> 获取到指向浏览器的输出流，输出文件。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">//响应方式</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/x-msdownload&quot;</span>);</span><br><span class="line">    <span class="comment">//下载之后的文件名</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=ha.txt&quot;</span>);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\test\\1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((b=input.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        output.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> filter </tag>
            
            <tag> 文件上传与下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp 基础使用</title>
      <link href="/2020/05/19/java/javaweb/jsp/"/>
      <url>/2020/05/19/java/javaweb/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><blockquote><ul><li><p>负责与用户的交互，将最终界面呈现给用户。是 HTML + js + Css + java 的混合文件。</p></li><li><p>JSP 文件最终转换为一个 java 文件，之后编译为 class 文件。java 中将页面整个 <strong><em><code>write</code></em></strong> 输出。本质上是一个 <strong><em><code>servlet</code></em></strong> 。</p></li><li><p>请求常见状态码：404 资源找不到，400 请求类型不匹配，500 java 程序异常</p></li></ul></blockquote><h3 id="JSP-编码问题："><a href="#JSP-编码问题：" class="headerlink" title="JSP 编码问题："></a>JSP 编码问题：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;</span><br><span class="line">&lt;%--这里的utf-<span class="number">8</span>是指服务器发送给客服端时的内容编码 --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%--这里的utf-<span class="number">8</span>是指 .jsp文件本身的内容编码 --%&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP-的-HTML-中嵌入-Java-程序："><a href="#JSP-的-HTML-中嵌入-Java-程序：" class="headerlink" title="JSP 的 HTML 中嵌入 Java 程序："></a>JSP 的 HTML 中嵌入 Java 程序：</h3><ol><li>JSP 脚本<br>注意：只能写 java 逻辑代码，不能定义方法<br><code>&lt;% java代码(不常用也不不建议) %&gt;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="comment">//这些代码本质上相当于就写在了servlet的service中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;java代码嵌入html&quot;</span>;</span><br><span class="line">    <span class="comment">//此页面被访问时java控制台输出</span></span><br><span class="line">    System.out.println(str);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%  <span class="comment">//还可使用内置对象out写入浏览器</span></span><br><span class="line">    out.write(str);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>声明（嵌入 java 方法）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!<span class="comment">//在jsp的HTML中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;嵌入方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只能定义方法不能使用</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%<span class="comment">//使用方法还是通过此不带感叹号的标签</span></span><br><span class="line">    System.out.println(test());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>3.JSP 表达式<br>把 java 对象直接输出在 HTML 中<br><code>&lt;%= java变量 %&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;java代码嵌入html&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--通过后面加等号直接输出java变量,</span><br><span class="line">    此处是JSP的HTML中的注释--%&gt;</span><br><span class="line">&lt;%=str%&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>java 代码与 HTML 的混合使用</li></ol><p>HTML 标签写在 java 语句块中，标签也会被代码控制。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>num<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;% for (int i = 0; i &lt; 5; i++) &#123; %&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>i<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSP-内置对象："><a href="#JSP-内置对象：" class="headerlink" title="JSP 内置对象："></a>JSP 内置对象：</h3><blockquote><ul><li>request：表示一次请求，属于 HttpServletRequest 类</li><li>response：表示一次响应，HttpServletResponse</li><li>pageContext：页面上下文可获取页面信息，PageContext</li><li>session：表示一次回话，保存用户信息，HttpSession</li><li>application：web 应用全局对象，保存所有用户共享信息，ServletContext</li><li>config：当前 jsp 对应 servlet 的 ServletConfig 对象，获取当前 Servlet 的信息</li><li>out：向浏览器输出数据，JspWriter</li><li>page：当前 Jsp 对应的 Servlet 对象，pageContext</li><li>exception：表示 jsp 页面发生的异常，Exception</li></ul></blockquote><p>常用 request，response，session，application，pagecontext<br>下面这些对象使用的方法即是它们所属类的方法，在 servlet 中取得同类型对象可使用。</p><h4 id="request-常用方法"><a href="#request-常用方法" class="headerlink" title="request 常用方法"></a>request 常用方法</h4><ol><li><code>String getParameter(String key)</code><br>如在浏览器中访问并传值：<code>http://localhost:8080/?value=haha</code><br>此为 get 传值，url 后跟 <code>?</code> 传值使用 <code>key=value</code> 格式，多个值用 <code>&amp;</code> 隔开。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="comment">//内置对象使用与在servlet中使用一样</span></span><br><span class="line">    String value=request.getParameter(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--浏览器中输出：haha--%&gt;</span><br><span class="line">&lt;%=value%&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>void setAttribute(String key,Object value);</code> 通过键值对形式保存数据<br><code>Object getAttribute(String key);</code>通过 key 取出 value</li></ol><ul><li>两方法一般用于将客户端拿到的数据 set 存储起来，完成服务端内数据传输通过 get 获取。</li><li>页面跳转：<code>RequestDispatcher getRequestDispatcher(String path)</code>方法和该对象的<code>forward(request,response)</code>方法使用，此方法可用于登录</li></ul><ul><li>它可让浏览器访问到<strong>WEB-INF</strong>(客户端无法直接访问，只有服务端可以访问。直接访问会引起 404 错误，也可用<strong>映射</strong>访问)文件夹下的文件,此方法可用于用户登录</li></ul><p>在被访问的 jsp 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="comment">//将数据存储起来，并将请求转发给其它jsp</span></span><br><span class="line">    String value=request.getParameter(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;value&quot;</span>,value);</span><br><span class="line">    <span class="comment">//需要表明传输地址，还需要将此页面的请求和响应对象传入</span></span><br><span class="line">    request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/values.jsp&quot;</span>)</span><br><span class="line">            .forward(request,response);</span><br><span class="line">    <span class="comment">//它会让浏览器自动跳转至接收的页面</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>在接收的 jsp 中(页面会跳转至此 jsp，但浏览器地址栏不会改变)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="comment">//获取数据并转型</span></span><br><span class="line">    String value=(String)request.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=value%&gt;</span><br></pre></td></tr></table></figure><ol><li><code>String[] values=request.getParameterValues(String key)</code></li></ol><p>当浏览器传值时有多个同名的 key，那么 <code>getParameter</code> 只取第一个，而此方法能将所有同名 key 的值组成一个数组返回。适用于接收复选框的值。</p><h4 id="response-常用方法"><a href="#response-常用方法" class="headerlink" title="response 常用方法"></a>response 常用方法</h4><p><code>void sendRedirect(String path)</code> 重定向：</p><ul><li>相等于浏览器直接发生请求访问，因此方法无法访问到<strong>WEB-INF</strong>下的文件</li><li>此方法可用于登录后的退出<br>如：<br><code>&lt;%response.sendRedirect(&quot;test.jsp&quot;);%&gt;</code></li></ul><h4 id="Session-常用方法"><a href="#Session-常用方法" class="headerlink" title="Session 常用方法"></a>Session 常用方法</h4><ul><li>属于同一次回话(一个浏览器或服务器的关闭标识一次会话结束)的请求都有一个相同的标识符，sessionID：**<code>String id=session.getId()</code>**。</li></ul><p><code>void setMaxInactiveInterval(int)</code>：设置 session 失效时间，单位为秒。<br><code>int getMaxInactiveInterval()</code>：获取当前 id 失效时间<br><code>void invalidate()</code>：设置 session 立即失效<br><code>void setAttribute(String key,Object value)</code>：通过键值对的形式来存储数据，key 相同的数据将被覆盖<br><code>Object getAttribute(String key)</code>：通过键获取对应的数据<br><code>void removeAttribute(String key)</code>：通过键删除对应的数据</p><p>在<strong>servlet</strong>中获取 session：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//HttpServletRequest中提供了获取session的方法</span></span><br><span class="line">        HttpSession session=req.getSession();</span><br><span class="line">        <span class="comment">//这样我们就获取到了session且可以正常使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpServletRequest是ServletRequest的子类，在参数非HttpServletRequest的方法中我们可以通过转型得到HttpSession（session）：<br><code>((HttpServletRequest)servletRequest).getSession();</code></p><h3 id="浏览器存储数据-Cookie："><a href="#浏览器存储数据-Cookie：" class="headerlink" title="浏览器存储数据 Cookie："></a>浏览器存储数据 Cookie：</h3><blockquote><ul><li>cookie 在浏览器是以键值对方式存放数据，同名 key 的值将被覆盖。每一对键值对用等号隔开 <strong>‘ &#x3D; ‘</strong> ，每一组数据用分号 <strong>‘ ; ‘</strong> 隔开。</li><li>浏览器发送请求时会把现有的 Cookie 数据<strong>传递</strong>给服务器，服务器可以对 Cookie 做操作，响应时又自动<strong>返回</strong>Cookie，浏览器将本地 Cookie<strong>更新</strong>为服务器返回的 Cookie。</li></ul></blockquote><p>java 中 Cookie 是一个类，每一个 cookie 对象保存一对键值对。在 jsp 和 servlet 中都可使用 Cookie，HttpServletRequest 和 HttpServletResponse 分别提供了获取浏览器的 Cookie 和给 Cookie 添加新值的方法。<br><em>以 jsp 中为例：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//获取浏览器发来的cookie，返回cookie数组</span></span><br><span class="line">    Cookie[] cookies=request.getCookies();</span><br><span class="line">    <span class="comment">//获取每一个cookie对象的key和value</span></span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : cookies)&#123;</span><br><span class="line">    System.out.println(cookie.getName()</span><br><span class="line">            +<span class="string">&quot;=&quot;</span>+cookie.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个新的cookie(一组键值对数据)</span></span><br><span class="line">    Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="comment">//添加到总Cookie中</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>设置 cookie 有效时间方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效时间，单位为秒</span></span><br><span class="line">cookie.setMaxAge(<span class="type">int</span>);<span class="comment">//默认-1浏览器关闭销毁，设为0表示删除</span></span><br><span class="line"><span class="comment">//获取cookie的有效时间</span></span><br><span class="line"><span class="type">int</span> cookie.getMaxAge();</span><br></pre></td></tr></table></figure><p>session 与 cookie 区别：</p><table><thead><tr><th>session</th><th>cookie</th></tr></thead><tbody><tr><td>数据时 object</td><td>数据时 string</td></tr><tr><td>保存在服务器，会话结束时销毁</td><td>长期保存在浏览器</td></tr><tr><td>保存重要信息</td><td>不重要信息</td></tr></tbody></table><h3 id="内置对象-域对象-作用域："><a href="#内置对象-域对象-作用域：" class="headerlink" title="内置对象(域对象)作用域："></a>内置对象(<em>域对象</em>)作用域：</h3><p>我们主要探讨 4 个内置对象的作用域。他们都有一些这两个存储数据的方法，根据它们作用域不同，数据存储的作用域也不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//储存数据</span></span><br><span class="line"><span class="keyword">void</span> 内置对象.setAttribute(String key,Object value);</span><br><span class="line"><span class="comment">//取出数据(取不存在的key返回null，不报错)</span></span><br><span class="line">Object 内置对象.getAttribute(String key);</span><br></pre></td></tr></table></figure><table><thead><tr><th>内置对象</th><th>作用域</th></tr></thead><tbody><tr><td>pageContext</td><td>当前页面有效</td></tr><tr><td>request</td><td>一次请求内有效</td></tr><tr><td>session</td><td>一次会话内有效</td></tr><tr><td>application</td><td>整 web 应用(服务器)</td></tr></tbody></table><h3 id="EL-表达式："><a href="#EL-表达式：" class="headerlink" title="EL 表达式："></a>EL 表达式：</h3><p><strong><em>域对象</em></strong> 存储数据的便捷取值方法： <strong><code>$&#123;域对象存储数据的key&#125;</code></strong><br>只能在 <strong><em>jsp</em></strong> 中使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="comment">//存储字符串</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;pageContext&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span>(String) request.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=value%&gt;</span><br><span class="line">&lt;%--取值原理与上相同--%&gt;</span><br><span class="line">$&#123;key&#125;&lt;%--取得pageContext(作用域更小)--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--key相同，但存储对象不同时，直接取key，</span><br><span class="line">会从作用域底的开始查找，也可指定对象取值，</span><br><span class="line">可提高效率，指定四个域对象的取值方法如下：--%&gt;</span><br><span class="line">pageContext中：$&#123;pageScope.key&#125;</span><br><span class="line">request中：$&#123;requestScope.key&#125;</span><br><span class="line">session中：$&#123;sessionScope.key&#125;</span><br><span class="line">application中：$&#123;applicationScope.key&#125;</span><br></pre></td></tr></table></figure><p>存取<strong>对象</strong>时：</p><ul><li>对象类中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jsp 中</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="comment">//存储对象</span></span><br><span class="line">    request.<span class="title function_ invoke__">setAttribute</span>(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;name&quot;</span>,<span class="number">99</span>));</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--取出值为对象时--%&gt;</span><br><span class="line">$&#123;user&#125;&lt;%--调用该对象toString方法--%&gt;</span><br><span class="line">$&#123;user.name&#125;&lt;%--取出成成功原理：反射技术调用该getName方法--%&gt;</span><br><span class="line">$&#123;user[<span class="string">&quot;name&quot;</span>]&#125;&lt;%--写法二，效果同上--%&gt;</span><br><span class="line">&lt;%--取对象某一元素时此元素必须有get方法，否则报错--%&gt;</span><br><span class="line">$&#123;user.age=<span class="number">10</span>&#125;&lt;%--也能调用set方法(前提：该属性有set方法)--%&gt;</span><br></pre></td></tr></table></figure><p>关系运算：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--EL中还能进行，关系运算(&amp;&amp;,||,&gt;&lt;==!=)--%&gt;</span><br><span class="line">$&#123;key1 &amp;&amp; key2&#125;</span><br><span class="line">$&#123;key1 <span class="keyword">and</span> key2&#125;&lt;%--效果同上(还有<span class="keyword">or</span>,not)--%&gt;</span><br></pre></td></tr></table></figure><h3 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL:"></a>JSTL:</h3><blockquote><ul><li>需要借助 jar 外包 <code>jstl.jar</code> 和<code>standard.jar</code> 两个包。在 WEB-INF 文件夹中新建 lib 文件夹，将 jar 导入其中。</li></ul><ul><li>下载地址：<a href="https://static.runoob.com/download/jakarta-taglibs-standard-1.1.2.tar.gz">jakarta-taglibs-standard-1.1.2.zip</a>,解压将 lib 下的两个 jar 文件提取出来。</li></ul><ul><li>在需要使用的 jsp 中 HTML 标签上方导入核心库 <code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code> ，其中 <strong>c</strong> 是之后在 jsp 中使用该库就需要使用 <strong>c</strong> 来调用。可以自定义但建议用 c 来表示</li></ul></blockquote><p>案例：后端给 jsp 传递一个集合，jsp 需要在页面中遍历出来里面的元素，并显示在页面上。</p><ul><li>java 文件中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jsp 中：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--导入jstl库--%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--使用 c 调用forEach标签遍历，items表示需要变量的集合。</span><br><span class="line"><span class="keyword">var</span>是集合中每一次元素取出来存放的载体，</span><br><span class="line">使用时还是需要用<span class="string">&#x27;$&#123;&#125;&#x27;</span>包裹<span class="keyword">var</span>中的变量。--%&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;str&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;$&#123;str&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--其它属性：begin属性指定开始位置，end结束位置，</span><br><span class="line">step每次走几步，varStatus=<span class="string">&quot;sta&quot;</span></span><br><span class="line">$&#123;sta.index&#125; <span class="number">0</span>开始, $&#123;sta.index&#125; <span class="number">1</span> 开始--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面我们使用了 foreach 标签，它还用其它标签如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--set就是setAttribute，scope指定存储在哪一个对象中，默认page--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;value&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;%--上方法不能存储对象，但可以修改对象，不常用--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--out与$&#123;&#125;类似，但某些时候out默认值设置更智能--%&gt;</span><br><span class="line">&lt;%--value需要一个域对象的值，设置<span class="keyword">default</span>当域对象值不存在时使用该值--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;key&#125;&quot;</span> <span class="keyword">default</span>=<span class="string">&quot;未定义&quot;</span>&gt;&lt;/c:out&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--删除域对象中的值，<span class="keyword">var</span>中直接写值的key。scope表示指定某个对象，默认page--%&gt;</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">&quot;key&quot;</span> scope=<span class="string">&quot;request&quot;</span>&gt;&lt;/c:remove&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;n1 &gt; n2&#125;&quot;</span>&gt;<span class="literal">true</span>显示，<span class="literal">false</span>不显示&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>以上都是 <strong><em>核心标签库标签</em></strong> 。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> jsp </tag>
            
            <tag> jstl </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet</title>
      <link href="/2020/05/18/java/javaweb/servlet/"/>
      <url>/2020/05/18/java/javaweb/servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="web基本概念"><a href="#web基本概念" class="headerlink" title="web基本概念:"></a>web基本概念:</h3><ul><li>http：超文本传输协议，是一个简单的请求响应协议，它通常运行在TCP之上。（https：安全的）</li><li>请求方式：get，post，delete，put …</li><li>响应状态码：200请求响应成功，3xx请求重定向，4xx找不到资源，5xx服务器错误</li></ul><h3 id="servlet-接口："><a href="#servlet-接口：" class="headerlink" title="servlet 接口："></a>servlet 接口：</h3><blockquote><p>servlet 是负责服务器和客户端通信的接口需要我们自己写一个类实现它的方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line">    <span class="comment">//获取servlet信息</span></span><br><span class="line">    ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//处理客户端请求并响应(ServletRequest请求对象，ServletResponse响应对象)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line">    <span class="comment">//返回字符串信息</span></span><br><span class="line">    String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//销毁(释放资源),关闭服务器时</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在此可插入本@WebServlet的注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**因为浏览器访问servlet是通过反射的方式，</span></span><br><span class="line"><span class="comment">     * 且一般反射为空参构造函数，被浏览器访问此构造函数被执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象被创建了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化了&quot;</span>);</span><br><span class="line">        <span class="comment">//获取此servlet类的类名</span></span><br><span class="line">        servletConfig.getServletName();</span><br><span class="line">        <span class="comment">//获取映射此文件时设置的默认值(只能在xml配置，代表不能使用注解)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">init</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(init);</span><br><span class="line">        <span class="comment">//拿到所有设置的值,返回Enumeration&lt;String&gt;集合</span></span><br><span class="line">        servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="comment">//拿到servlet上下文(此web全局信息)，返回ServletContext</span></span><br><span class="line">        ServletContext context=servletConfig.getServletContext();</span><br><span class="line">        context.getInitParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取servlet信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//客户端提交的数据可能会乱码，设置编码(一定要在读取数据前设置)</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取客户端信息，如客户端请求为：localhost:8080/servlet?id=2222</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;value&quot;</span>);<span class="comment">//返回id的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到了客户端的请求&quot;</span>+value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接给客户端返回消息会乱码还需要如下设置编码</span></span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//getwriter返回一个PrintWriter流，给客户端写入信息</span></span><br><span class="line">        servletResponse.getWriter().write(<span class="string">&quot;&lt;h1&gt;返回信息成功&quot;</span>+(num++)+<span class="string">&quot;&lt;h1/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//返回字符串信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//销毁(释放资源),关闭服务器时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器关闭了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问（请求）servlet："><a href="#访问（请求）servlet：" class="headerlink" title="访问（请求）servlet："></a>访问（请求）servlet：</h3><p>在客户端访问 servlet 文件(类.class),会通过 <strong>反射(原理)</strong> 机制建立客户端(浏览器)和服务端的通信。</p><ul><li>**<em>映射</em>**（在 <strong>web.xml</strong> 中 web-app 下配置）：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span><span class="comment">&lt;!--servlet映射文件配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义servlet文件被映射名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servlet文件，需要写src下的完整路径名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>io.ruoxijun.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span><span class="comment">&lt;!--为此servlet设置默认值，非必要(可配置多个)--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ServletConfig可获取这里设置的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!--key--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span><span class="comment">&lt;!--value--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span><span class="comment">&lt;!--URL映射配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--映射名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myservlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置映射的URL--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span><span class="comment">&lt;!--定义web全局的初始值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>loc<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此在浏览器下输入配置的网址后加上映射的<strong>URL：</strong> <code>/servlet</code> 即可发送请求至此 servlet，servlet 也在<strong>service 方法中</strong> 接受到了消息可处理并返回数据。<br>客户端可不停的给 servlet 发送消息直到服务器关闭。</p><ul><li>**<em>注解</em>**（脱离 xml 繁琐配置，一句话搞定访问）</li></ul><p>每一个 servlet 需要被访问，我们就需要在<em>web.xml</em>中配置一次映射，当 servlet 类过多时就过于麻烦。使用产生了基于<em>注解</em>的映射。</p><p><code>@WebServlet(&quot;/servlet&quot;)</code></p><p>在对应 servlet 类的上方加上注解，@加上 WebServlet，参数为映射访问此文件时的 URL(必须有 <code>/</code> 否则报错)。与 xml 中配置的效果同。</p><h3 id="Servlet-生命周期："><a href="#Servlet-生命周期：" class="headerlink" title="Servlet 生命周期："></a>Servlet 生命周期：</h3><ol><li>客户端第一次访问服务端接受到请求时利用反射技术加载类，调用无参构造函数创建servlet</li><li>调用 init 方法完成初始化。(调用一次)</li><li>调用 service 方法完成业务逻辑操作。(会重复执行直到服务器关闭，或离开此页面)</li><li>服务器停止，调用 destory 方法释放资源。(调用一次)</li></ol><p>当浏览器访问 servlet 时，Tomcat 会查询 Servlet 的实例化对象是否存在，不存在通过反射机制创建。存在直接执行 service 方法</p><h3 id="HttpServlet（建议使用）"><a href="#HttpServlet（建议使用）" class="headerlink" title="HttpServlet（建议使用）:"></a>HttpServlet（建议使用）:</h3><blockquote><ul><li>servlet 中任何请求(get,post,put,delete)都由<strong>service</strong>方法处理，httpservlet 中细分了出来，常用的如 <code>get请求 → 由doGet方法处理</code>，<code>post请求 → 由doPost方法处理</code></li><li>httpservlet 中我们可以只重写需要的方法，但必须<strong>重写一种</strong>对于请求和响应的处理方法如：doGet,doPost。并且重写方法中不能出现 super 否则 405。</li><li><strong>GenericServlet</strong> 中完成了屏蔽 servlet 四个不常用的方法。他们的关系是 <strong><code>HttpServlet 继承 GenericServlet 实现 Servlet</code></strong></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span><span class="comment">//此类映射的URL</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">//重写的一定要去除方法中的super阻止调用父类方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//客户端提交的数据可能会乱码，设置编码(一定要在读取数据前设置)</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">//处理get请求</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求类型</span></span><br><span class="line">        String get=req.getMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//处理post请求</span></span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletContext："><a href="#ServletContext：" class="headerlink" title="ServletContext："></a>ServletContext：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">     <span class="comment">// servlet上下文，web应用的全局对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">// 存入数据</span></span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="comment">// 取出数据(在其它servlet中同样可以取出，它们属于同一个web)</span></span><br><span class="line">    servletContext.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    <span class="comment">// 转发</span></span><br><span class="line">    servletContext.getRequestDispatcher(<span class="string">&quot;path&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2020/05/17/java/maven/"/>
      <url>/2020/05/17/java/maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven-安装与使用"><a href="#Maven-安装与使用" class="headerlink" title="Maven 安装与使用"></a>Maven 安装与使用</h1><blockquote><p>Maven 突出的几个特点：</p><ul><li>有<strong>强制</strong>规定的<strong>指定文件</strong>存放指定文件，方便管理项目</li><li>jar 包的管理，使用 jar 包时我们不用再将整个 jar 包存放在项目中。maven 中有 jar 仓库，将需要的<strong>jar 包依赖</strong>(jar 的坐标)写入 maven 的配置内，它会帮我们找到需要的 jar 包</li></ul></blockquote><h2 id="1-Maven-的安装"><a href="#1-Maven-的安装" class="headerlink" title="1. Maven 的安装"></a>1. Maven 的安装</h2><blockquote><p>我们也回忆一下 Java jdk 和 Tomcat 的安装。(下载不用多说，见官网： <a href="https://maven.apache.org/">https://maven.apache.org/</a>)<br>几个安装都有的前奏： <code>我的电脑右击 → 属性 → 高级系统设置 → 环境变量</code></p></blockquote><h3 id="安装后续："><a href="#安装后续：" class="headerlink" title="安装后续："></a>安装后续：</h3><p><strong><code>新建系统变量 → 变量名MAVEN_HOME，变量值Maven解压的路径，确定 → 找到Path，编辑输入：%刚刚定义的变量名%\bin</code></strong></p><p>打开 cmd 输入<code>mvn -v</code>查看是否成功。</p><blockquote><p>jdk 和 Tomcat 的安装与此差别不大，不过 jdk 变量名为：JAVA_HOME，Tomact 变量名为：CATALINA_HOME。</p></blockquote><h2 id="2-Maven-全局配置文件-settings-xml"><a href="#2-Maven-全局配置文件-settings-xml" class="headerlink" title="2. Maven 全局配置文件(settings.xml)"></a>2. Maven 全局配置文件(settings.xml)</h2><blockquote><p>以下配置都是在 Maven 安装文件夹下的 conf 文件夹下 settings.xml 文件中需要添加或修改的配置</p></blockquote><h3 id="设置仓库位置："><a href="#设置仓库位置：" class="headerlink" title="设置仓库位置："></a>设置仓库位置：</h3><p>定义存放 jar 包的本地仓库(路径)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 建议先创建好该路径且路径以 repository 结尾</span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>自定义的仓库路径/repository<span class="tag">&lt;<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="设置阿里云中央仓库-镜像-："><a href="#设置阿里云中央仓库-镜像-：" class="headerlink" title="设置阿里云中央仓库(镜像)："></a>设置阿里云中央仓库(镜像)：</h3><p>原镜像下载极慢可以用无法使用来形容，替换为国内的阿里云镜像。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置全局编译-jdk-版本："><a href="#配置全局编译-jdk-版本：" class="headerlink" title="配置全局编译 jdk 版本："></a>配置全局编译 jdk 版本：</h3><p>在 <code>&lt;profiles&gt;&lt;/profiles&gt;</code> 标签中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明编译环境的 jdk 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Maven-项目结构与文件"><a href="#3-Maven-项目结构与文件" class="headerlink" title="3. Maven 项目结构与文件"></a>3. Maven 项目结构与文件</h2><h3 id="项目标准目录结构："><a href="#项目标准目录结构：" class="headerlink" title="项目标准目录结构："></a>项目标准目录结构：</h3><ol><li>src&#x2F;main&#x2F;java：核心代码部分</li><li>src&#x2F;main&#x2F;resources：配置文件部分</li><li>src&#x2F;test&#x2F;java:测试代码部分</li><li>src&#x2F;test&#x2F;resources：测试配置文件</li><li>target：编译后自动生成存储 class 文件的文件夹</li><li>src&#x2F;main&#x2F;webapp：web(网页)有关文件(此部分是创建 web 项目才需要)</li></ol><blockquote><p>web项目webapp下必须有 <strong>WEB-INF</strong>目录，WEB-INF下必须有 <strong>web.xml</strong> 文件和classes(编译后)，其中classes中存放的是编译好的class<br>Tomcat规定的必须这样建立目录才会Tomcat认为是web项目</p></blockquote><h3 id="pom-xml-文件："><a href="#pom-xml-文件：" class="headerlink" title="pom.xml 文件："></a>pom.xml 文件：</h3><p><code>Maven 工程配置文件：依赖管理，项目信息、运行环境信息(jdk、Tomcat 信息等)</code></p><p>基本样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 头文件标签，对xml文件的约束与标识 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                        https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 pom.xml 符合哪个版本的描述符。maven2和3 只能为 4.0.0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目信息(此项目坐标)： --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>逆向域名<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="comment">&lt;!-- 创建项目的组织名称的逆向域名。一般对应 java 的包结构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>项目名<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!-- 单独项目的唯一标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>当前项目版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!-- 项目的特定版本 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目打包后的类型(默认jar，war：打包为web应用，pom：为父工程时) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖组：管理所有依赖总标签，且子项目直接继承此中依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 依赖：添加某个依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 依赖的坐标(与项目信息类似) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可继续添加多个依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖管理：此中添加的依赖，子项目不能直接继承。</span></span><br><span class="line"><span class="comment">    且子项目添加同依赖时可以省去版本号标签，默认父类版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="comment">&lt;!-- 依赖组 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构建设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对项目构建进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一些项目中包含xml配置文件或资源文件可能在</span></span><br><span class="line"><span class="comment">    打包时不能成功，需要在project中添加下配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将webapp中的页面编译到META-INF/resources中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-Maven-常用命令与生命周期"><a href="#4-Maven-常用命令与生命周期" class="headerlink" title="4. Maven 常用命令与生命周期"></a>4. Maven 常用命令与生命周期</h2><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><blockquote><p>首先 cmd 进入 Maven 项目路径，在项目目录下使用如下指令</p></blockquote><ul><li><code>mvn compile</code>：对 java 文件进行编译，并在 src 外创建了一个 target 目录，将编译文件存放在了里面。</li><li><code>mvn test</code>：测试文件夹下和主 Java 文件夹下的 java 文件都编译</li><li><code>mvn package</code>：<strong>打包</strong>，将所有 java 和 test 编译，再打包成指定文件(通过项目下的<strong>pom.xml</strong>文件<strong>packaging 标签</strong>决定打包类型)都放在 target 文件夹下</li><li><code>mvn clean</code>：清理编译的文件，target 文件夹将被删除</li><li><code>mvn install</code>：安装，编译 + 打包 + 将打包文件移到到本地仓库</li></ul><h3 id="Maven-生命周期-简化周期-："><a href="#Maven-生命周期-简化周期-：" class="headerlink" title="Maven 生命周期(简化周期)："></a>Maven 生命周期(简化周期)：</h3><blockquote><p>默认生命周期：验证(validate) → 编译(compile) → 测试(test) → 打包(package) → 验证(verify) → 安装(install) → 发布(deploy)<br>清理生命周期：清除项目编译信息(clean)</p></blockquote><h2 id="5-IDEA-配置-Maven："><a href="#5-IDEA-配置-Maven：" class="headerlink" title="5. IDEA 配置 Maven："></a>5. IDEA 配置 Maven：</h2><ol><li><code>file → settings</code> 方式表示本项目设置，当创建新项目时设置内容将重置。所以我们需要 <strong>配置新建项目</strong> 的设置如下图：</li></ol><p><img src="/images/java/new_pro_set.jpg" alt="新项目设置"></p><ol start="2"><li>配置新建项目的 Maven 设置：</li></ol><p><img src="/images/java/idea_maven_set.jpg" alt="设置 Maven"></p><p>将 Maven → Runner 中下图选项勾选，否则容易出现导入的依赖在测试或运行时报依赖中的类不存在的错误，若还是出现此错误建议使用maven命令： <code>mvn idea:idea</code> 之后再运行。（目前已知idea2020.1常出现此错误）</p><p><img src="/images/java/run.jpg" alt="测试或运行设置"></p><ol start="3"><li>此后新建的 Maven 项目都配置好了，但此项目配置并未改变。只需在 <code>file → settings</code> 中按步骤 2 同等配置即可。</li><li>同上图中 <strong>Skip Tests</strong> （跳过测试）选项打钩，问题缘由我在整合mybatis和spring时调用插入数据方法， <strong>SQL语句被执行了两遍</strong> 这主要是运行时测试调用了一次主项目再会调用一次。</li></ol><h2 id="6-Maven-依赖详解"><a href="#6-Maven-依赖详解" class="headerlink" title="6. Maven 依赖详解"></a>6. Maven 依赖详解</h2><h3 id="了解-classpath："><a href="#了解-classpath：" class="headerlink" title="了解 classpath："></a>了解 <code>classpath</code>：</h3><ul><li>简单的理解就是，项目编译好后形成的 <code>class</code> 文件所在的路径。</li><li>Maven 工程会将 <code>src/main/java</code> 和 <code>src/main/resources</code> 文件夹下的文件编译后全部打包在 <code>classpath</code> 中。</li></ul><h3 id="依赖范围-常用-："><a href="#依赖范围-常用-：" class="headerlink" title="依赖范围(常用)："></a>依赖范围(常用)：</h3><blockquote><p>Maven 中添加的依赖编译后也会打包进 <code>classpath</code> 中，而不同的阶段所需依赖不同。<br>此时我们可以给依赖添加范围限制，依赖中通过 <code>scope</code> 标签中添加限制指令方式规定依赖的范围。</p></blockquote><table><thead><tr><th>限制指令</th><th>范围</th></tr></thead><tbody><tr><td>compile</td><td>未写 <code>scope</code> 标签时默认。编译，测试，运行都有效</td></tr><tr><td>test</td><td>测试时有效</td></tr><tr><td>provided</td><td>编译和测试有效</td></tr><tr><td>runtime</td><td>测试和运行有效</td></tr></tbody></table><p>如下 <code>junit</code> 依赖只有测试才需要用到，所以使用 <code>test</code> 对齐加以限制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指明依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖传递："><a href="#依赖传递：" class="headerlink" title="依赖传递："></a>依赖传递：</h3><ul><li>依赖传递使我们不需要关注添加的依赖是否依赖了其它依赖。Maven会自动将所关联的依赖以自动传递的方式传递进来。</li><li>最短路径优先：A依赖了B和D，B依赖了C和D，当A和B所依赖的D版本不同时，会选择A依赖的D作为最终依赖。</li><li>先声明优先：项目中依赖了A和B它们同时依赖了C，当两个C版本不同时，取决于我们先依赖A还是B，谁先声明就最终依赖谁的C。</li></ul><h2 id="IDEA-中-Maven-常见错误-待改正-："><a href="#IDEA-中-Maven-常见错误-待改正-：" class="headerlink" title="IDEA 中 Maven 常见错误(待改正)："></a>IDEA 中 Maven 常见错误(待改正)：</h2><ol><li>本地运行错误(Javaweb)：</li></ol><p>在本地运行时 idea 中需要设置配置 Tomcat7 运行方式，在 <code>pom.xml</code> 中插入如下配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--表明以方式Tomcat7启动--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--其它可选项设置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080&lt;/port</span><br><span class="line">                &gt;<span class="comment">&lt;!--端口--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8&lt;/uriEncoding</span><br><span class="line">                &gt;<span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/url&lt;/path</span><br><span class="line">                &gt;<span class="comment">&lt;!--访问应用路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后 maven 中输入 <code>mvn tomcat7:run</code> 运行。</p><ol start="2"><li>Servlet 中@WebServlet(“XXXX”)注解无效(javaweb):</li></ol><p>打开 web.xml 检查 web-app 标签中的两个属性，①version 是否大于 3.0，②metadata-complete 是否为 false，或直接将 <code>web.xml</code> 中 web-app 头标签替换为如下设置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">metadata-complete</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>maven 的程序测试运行必须检查是否有 <code>Junit</code> 包：<br>pom.xml 中：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.13</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebView 加载网页组件</title>
      <link href="/2020/05/17/android/webview/"/>
      <url>/2020/05/17/android/webview/</url>
      
        <content type="html"><![CDATA[<h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><blockquote><h4 id="WebView-加载网页的方式"><a href="#WebView-加载网页的方式" class="headerlink" title="WebView 加载网页的方式"></a>WebView 加载网页的方式</h4></blockquote><h5 id="加载网络-URL"><a href="#加载网络-URL" class="headerlink" title="加载网络 URL:"></a>加载网络 URL:</h5><p><code>webview.loadUrl(&quot;http//...&quot;);</code></p><h5 id="加载-assets-下的-HTML-文件："><a href="#加载-assets-下的-HTML-文件：" class="headerlink" title="加载 assets 下的 HTML 文件："></a>加载 assets 下的 HTML 文件：</h5><p><code>webview.loadUrl(&quot;file://android_asset/test.html&quot;);</code></p><h5 id="加载-HTML-代码："><a href="#加载-HTML-代码：" class="headerlink" title="加载 HTML 代码："></a>加载 HTML 代码：</h5><p><code>webview.loadData();</code> 或 <code>webview.loadDataWithBaseURL();//推荐使用</code></p><blockquote><h4 id="网页的前进后退"><a href="#网页的前进后退" class="headerlink" title="网页的前进后退"></a>网页的前进后退</h4></blockquote><h5 id="判断网页是否还有上一级是否还能返回："><a href="#判断网页是否还有上一级是否还能返回：" class="headerlink" title="判断网页是否还有上一级是否还能返回："></a>判断网页是否还有上一级是否还能返回：</h5><p><code>webview.canGoBack();</code></p><h5 id="返回上一级："><a href="#返回上一级：" class="headerlink" title="返回上一级："></a>返回上一级：</h5><p><code>webview.goBack();</code></p><h5 id="前进-同理-："><a href="#前进-同理-：" class="headerlink" title="前进(同理)："></a>前进(同理)：</h5><p><code>webview.canGoForward();//是否能前进</code><br><code>webview.goForward();//前进</code></p><h5 id="传参控制前进后退："><a href="#传参控制前进后退：" class="headerlink" title="传参控制前进后退："></a>传参控制前进后退：</h5><p><code>webview.canGoBackOrForward(int);//正数是否能前进正数步,负数后退</code><br><code>webview.goBackOrForward(int);//正数前进正数步，负数同理</code></p><hr><h3 id="WebView-网络-URL-使用"><a href="#WebView-网络-URL-使用" class="headerlink" title="WebView 网络 URL 使用"></a>WebView 网络 URL 使用</h3><ul><li><p>在 APP 中使用网络需要网络权限。先在 AndroidManifest.xml 文件中的 manifest 标签内添加下面这段代码：<br><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></p></li><li><p>在 activity 布局中使用 webView 组件：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/webView&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Java 文件 activity 中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WebView webView;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_stagger);</span><br><span class="line"></span><br><span class="line">    webView = findViewById(R.id.webView);</span><br><span class="line">    <span class="comment">//加载网页，默认不支持javascript，因此网页还是加载不出来</span></span><br><span class="line">    webView.loadUrl(<span class="string">&quot;https://ruoxijun.github.io/&quot;</span>);</span><br><span class="line">    <span class="comment">//一般将URL写在下面这些设置的最后面，url还可以是js代码会被执行</span></span><br><span class="line">    <span class="comment">//设置支持使用javascript此时能看见网页了。</span></span><br><span class="line">    webView.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">/**此时你在此页面点击一个连接它会使用浏览器打开，</span></span><br><span class="line"><span class="comment">        * 但我们希望它就在当前APP内打开。进行如下设置</span></span><br><span class="line"><span class="comment">        * 此设置需要一个 WebViewClient 做参数，</span></span><br><span class="line"><span class="comment">        * 用一个类继承它并重写一部分我们需要的方法。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    webView.setWebViewClient(<span class="keyword">new</span> <span class="title class_">MyWebClient</span>());</span><br><span class="line">    <span class="comment">/**对网页的属性以及网页加载进度相关设置，</span></span><br><span class="line"><span class="comment">        * 它需要 WebViewClient 对象,我们同样用一个类继承它</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    webView.setWebChromeClient(<span class="keyword">new</span> <span class="title class_">MyChromeClient</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘(按钮)监听事件，keycode表示按下的键的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onKeyDown</span><span class="params">(<span class="type">int</span> keyCode, KeyEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">//当按下返回键时 且 web存在上一级时(可后退)</span></span><br><span class="line">    <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK)&amp;&amp;webView.canGoBack())&#123;</span><br><span class="line">        webView.goBack();<span class="comment">//web后退一步</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//事件不再传递(不退出web页面)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.onKeyDown(keyCode, event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web视图相关类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWebClient</span> <span class="keyword">extends</span> <span class="title class_">WebViewClient</span>&#123;</span><br><span class="line">    <span class="comment">//设置当前页面中的请求</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//将当前页面的URL设置为此时用户请求的URL</span></span><br><span class="line">        view.loadUrl(request.getUrl().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面开始加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPageStarted(view, url, favicon);</span><br><span class="line">        Log.d(<span class="string">&quot;webview&quot;</span>,<span class="string">&quot;网页开始加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面加载结束</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPageFinished</span><span class="params">(WebView view, String url)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPageFinished(view, url);</span><br><span class="line">        Log.d(<span class="string">&quot;webview&quot;</span>,<span class="string">&quot;网页加载结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web相关类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyChromeClient</span> <span class="keyword">extends</span> <span class="title class_">WebChromeClient</span>&#123;</span><br><span class="line">    <span class="comment">//网页加载的进度(),newProgress值0-100,100时表示网页加载完毕</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onProgressChanged</span><span class="params">(WebView view, <span class="type">int</span> newProgress)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onProgressChanged(view, newProgress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前网页的标题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceivedTitle</span><span class="params">(WebView view, String title)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onReceivedTitle(view, title);</span><br><span class="line">        setTitle(title);<span class="comment">//将当前Activity的标题设置为网页的标题</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView</title>
      <link href="/2020/05/15/android/RecyclerView/"/>
      <url>/2020/05/15/android/RecyclerView/</url>
      
        <content type="html"><![CDATA[<h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><blockquote><h4 id="做一个简单的-recycler"><a href="#做一个简单的-recycler" class="headerlink" title="做一个简单的 recycler"></a>做一个简单的 recycler</h4></blockquote><h5 id="1-添加-RecyclerView-的依赖项"><a href="#1-添加-RecyclerView-的依赖项" class="headerlink" title="1. 添加 RecyclerView 的依赖项"></a>1. 添加 RecyclerView 的依赖项</h5><p>我们需要先在 APP 的 <strong>build.gradle</strong> 文件中添加下面的代码，让配置文件将需要的库加载进来。<a href="https://developer.android.google.cn/jetpack/androidx/releases/recyclerview?hl=zh_cn">请参考此网页,以获取最新的配置代码</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        implementation <span class="string">&quot;androidx.recyclerview:recyclerview:1.1.0&quot;</span></span><br><span class="line">        implementation <span class="string">&quot;androidx.recyclerview:recyclerview-selection:1.1.0-rc01&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-在-xml-使用且在-activity-中获取并设置-recyclerview"><a href="#2-在-xml-使用且在-activity-中获取并设置-recyclerview" class="headerlink" title="2. 在 xml 使用且在 activity 中获取并设置 recyclerview"></a>2. 在 xml 使用且在 activity 中获取并设置 recyclerview</h5><ul><li>xml 中：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/recycler&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>activity 中：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取组件，常规步骤</span></span><br><span class="line">recyclerView = findViewById(R.id.recycler);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RecyclerView.LayoutManager:抽象类主要用于Item布局效果，自带的实现类有：</span></span><br><span class="line"><span class="comment"> * LinearLayoutManager、StaggeredGridLayoutManager、GridLayoutManager。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里是设置布局,我们先使用最简单的线性布局</span></span><br><span class="line">recyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line"><span class="comment">//需要一个适配器</span></span><br><span class="line">recyclerView.setAdapter(<span class="keyword">new</span> <span class="title class_">LinearAdapter</span>(<span class="built_in">this</span>));</span><br></pre></td></tr></table></figure><p>此时我们做完这些是看不到效果的。我们还需要写一个适配器。</p><h4 id="3-适配器-RecyclerView-Adapter"><a href="#3-适配器-RecyclerView-Adapter" class="headerlink" title="3.适配器 RecyclerView.Adapter"></a>3.适配器 RecyclerView.Adapter</h4><p>开始之前我们看一下适配器部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Adapter</span>&lt;VH <span class="keyword">extends</span> <span class="title class_">ViewHolder</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">abstract</span> VH <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span>;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(VH holder, <span class="type">int</span> position)</span>;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码得知，我们有 3 个必须要实现的方法。且它有规定一个只接受 ViewHolder 子类的泛型，方法 1 返回该类，方法 2 需要该类的传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RecyclerView的适配器必须继承RecyclerView.Adapter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;LinearAdapter.LinearHolder&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**适配器构造方法：</span></span><br><span class="line"><span class="comment">     * 构造方法可以自己决定，一般传入需要用到的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinearAdapter</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**onCreateViewHolder创建ViewHolder，</span></span><br><span class="line"><span class="comment">     * 该方法会在RecyclerView需要展示一个item的时候回调。</span></span><br><span class="line"><span class="comment">     * 重写该方法时，应该使ViewHolder载入item view的布局</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LinearAdapter.LinearHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">//from(parent.getContext())可以不用构造方法传参</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinearHolder</span>(LayoutInflater.from(context)</span><br><span class="line">                .inflate(R.layout.item,parent,<span class="literal">false</span>));</span><br><span class="line">        <span class="comment">//inflate将布局实例化为了一个view传入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**onBindViewHolder</span></span><br><span class="line"><span class="comment">     * 给item设置数据，把数据绑定、填充到相应的item中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> LinearAdapter.LinearHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        holder.textView.setText(<span class="string">&quot;Item&quot;</span>);</span><br><span class="line">        holder.imageView.setImageResource(R.drawable.ic_launcher_background);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置item的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**ViewHolder没有必要再写一个java文件来实现它，</span></span><br><span class="line"><span class="comment">     * 直接使用内部类继承RecyclerView的内部类ViewHolder即可，</span></span><br><span class="line"><span class="comment">     * 上方方法调用时也更方便</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">LinearHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">        <span class="keyword">private</span> TextView textView;</span><br><span class="line">        <span class="comment">//这里通常写上需要改变的组件</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LinearHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(itemView);</span><br><span class="line">            <span class="comment">//这里itemview是item的布局文件，通过它获取组件</span></span><br><span class="line">            textView = itemView.findViewById(R.id.textView);</span><br><span class="line">            imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个简单的 RecyclerView 就完成了。</p><h4 id="4-addItemDecoration-添加分割线"><a href="#4-addItemDecoration-添加分割线" class="headerlink" title="4. addItemDecoration 添加分割线"></a>4. addItemDecoration 添加分割线</h4><blockquote><p>RecyclerView.ItemDecoration:抽象类，主要用于给 Item 之间添加分割线。官方没有实现类，所以如果要添加分割线，我们需要手动实现这个抽象类。这里使用的 <strong><em>getItemOffsets</em></strong> 方法添加，并不是真正的添加了分隔线而是利用给 item 之间 <strong>增加间隔</strong> ，让下面的 <strong>背景</strong> 漏出而产生的分割线。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> <span class="title class_">MyDecoration</span>());</span><br><span class="line">---------------------------------------------------------</span><br><span class="line"><span class="comment">//此内部类写在类中并继承RecyclerView.ItemDecoration</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDecoration</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ItemDecoration&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getItemOffsets</span><span class="params">(<span class="meta">@NonNull</span> Rect outRect, <span class="meta">@NonNull</span> View view, <span class="meta">@NonNull</span> RecyclerView parent, <span class="meta">@NonNull</span> RecyclerView.State state)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.getItemOffsets(outRect, view, parent, state);</span><br><span class="line">        <span class="comment">//在下出现1dp间隔(下划线)</span></span><br><span class="line">        outRect.bottom=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-事件"><a href="#5-事件" class="headerlink" title="5.事件"></a>5.事件</h4><ul><li>最简单的方法：在 onBindViewHolder 中，利用 holder 直接给组件添加事件即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> LinearAdapter.LinearHolder holder, <span class="keyword">final</span> <span class="type">int</span> position)</span> &#123;</span><br><span class="line">    holder.imageView.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            Toast.makeText(context, position+<span class="string">&quot;b被点击&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>事件回调方法：这样自由度更高，扩展性更高。<blockquote><ul><li>在适配器类中定义一个接口和该接口对象，在接口中定义事件方法</li><li>构造适配器对象时，可接受一个该接口对象。</li><li>且在 onBindViewHolder 中给组件设置事件时方法中可以是具体内容也可以利用该接口对象使用该方法。</li></ul></blockquote></li></ul><h3 id="以上具体代码汇总参考地址"><a href="#以上具体代码汇总参考地址" class="headerlink" title="以上具体代码汇总参考地址"></a><a href="http://note.youdao.com/noteshare?id=e46eb0aa308a609cffd6cabb5a98396e&sub=F07A2A91AF474B74A4D0F3A435019B9D">以上具体代码汇总参考地址</a></h3><h4 id="进阶与扩展"><a href="#进阶与扩展" class="headerlink" title="进阶与扩展"></a>进阶与扩展</h4><ul><li>设置水平列表：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前我们设置的布局，默认垂直</span></span><br><span class="line"><span class="type">LinearLayoutManager</span> <span class="variable">layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//设置为水平方向</span></span><br><span class="line">layout.setOrientation(RecyclerView.HORIZONTAL);</span><br><span class="line">recyclerHor.setLayoutManager(layout);</span><br></pre></td></tr></table></figure><ul><li>网格布局：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取网格布局管理器，参1上下文参数，参2表示一行有几列</span></span><br><span class="line">GridLayoutManager grid=<span class="keyword">new</span> <span class="title class_">GridLayoutManager</span>(<span class="built_in">this</span>,<span class="number">4</span>);</span><br><span class="line">recyclerGrid.setLayoutManager(grid);</span><br><span class="line"><span class="comment">//recyclerGrid.setLayoutManager(new GridLayoutManager(this,4););//效果同上</span></span><br><span class="line">recyclerGrid.setAdapter(<span class="keyword">new</span> <span class="title class_">GridAdapter</span>());</span><br></pre></td></tr></table></figure><ul><li>瀑布流布局：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取瀑布流网格布局，参2是方向还可以是水平</span></span><br><span class="line">StaggeredGridLayoutManager stagger=<span class="keyword">new</span></span><br><span class="line">        <span class="title class_">StaggeredGridLayoutManager</span>(<span class="number">2</span>,StaggeredGridLayoutManager.VERTICAL);</span><br><span class="line">recyclerStagger.setLayoutManager(stagger);</span><br></pre></td></tr></table></figure><ul><li>item 的增删改与移动：(传入的参数都是指定的位置 position)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加RecyclerView中的item组件</span></span><br><span class="line">list.add(list.size()+<span class="string">&quot;新&quot;</span>);</span><br><span class="line"><span class="comment">//在指定位置添加item，并通知此item(单个)刷新(推荐使用)</span></span><br><span class="line">recyclerAdapter.notifyItemInserted(list.size()-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//recyclerAdapter.notifyDataSetChanged();//全部刷新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除RecyclerView中的item组件</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(list.size());</span><br><span class="line">list.remove(i);</span><br><span class="line">recyclerAdapter.notifyItemRemoved(i);<span class="comment">//移除某item并刷新</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更改RecyclerView组件中的item</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(list.size());</span><br><span class="line">list.set(i,i+<span class="string">&quot;改&quot;</span>);</span><br><span class="line">recyclerAdapter.notifyItemChanged(i);<span class="comment">//更改某item</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移动RecyclerView组件中的item</span></span><br><span class="line"><span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(list.size());</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(list.size());</span><br><span class="line"><span class="comment">//将start位置上的item移动到end位置去，end上和之后的组件后移</span></span><br><span class="line">recyclerAdapter.notifyItemMoved(start,end);</span><br></pre></td></tr></table></figure><ul><li>根据需要不同的view使用不同的布局<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置视图值(重写该方法，根据需要返回不同的值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemViewType</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (position%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RecyclerView.ViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (viewType==<span class="number">0</span>)<span class="comment">//根据不同的样式值设置不同的布局样式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ViewHolder</span>(LayoutInflater.from(parent.getContext())</span><br><span class="line">                .inflate(R.layout.item,parent,<span class="literal">false</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ImgViewHolder</span>(LayoutInflater.from(parent.getContext())</span><br><span class="line">            .inflate(R.layout.item_stagger,parent,<span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> RecyclerView.ViewHolder holder, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getItemViewType(position)==<span class="number">0</span>) &#123;<span class="comment">//利用上方改写的方法，根据坐标获取样式值</span></span><br><span class="line">        ((ViewHolder) holder).textView.setText(<span class="string">&quot;Demo &quot;</span> + position);</span><br><span class="line">        ((ViewHolder) holder).imageView.setImageResource(R.drawable.ic_launcher_background);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置两个不同的Holder(创建两个item.xml布局文件)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">    <span class="keyword">private</span> TextView textView;</span><br><span class="line">    <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(itemView);</span><br><span class="line">        textView = itemView.findViewById(R.id.textView);</span><br><span class="line">        imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImgViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder&#123;</span><br><span class="line">        <span class="keyword">private</span> ImageView imageView;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImgViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(itemView);</span><br><span class="line">        imageView = itemView.findViewById(R.id.imageView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="RecyclerView和ScrollView协同使用："><a href="#RecyclerView和ScrollView协同使用：" class="headerlink" title="RecyclerView和ScrollView协同使用："></a>RecyclerView和ScrollView协同使用：</h3><ul><li>RecyclerView会自动获取焦点，导致打开页面时RecyclerView之上的控件被RecyclerView挤出屏幕外。在RecyclerView的外部布局中加入如下配置，表示viewgroup会覆盖子类控件而直接获得焦点。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:descendantFocusability=&quot;blocksDescendants&quot;</span><br></pre></td></tr></table></figure><ul><li>RecyclerView和ScrollView 一起用，滑动会不流畅，因为两个都有滑动事件，设置下:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setNestedScrollingEnabled(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>RecyclerView和ScrollView 一起用，偶尔出现数据条目显示不全这是RecyclerView获取布局高度不准确导致，建议使用相等布局将其包裹：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pecyclerView </tag>
            
            <tag> scrollView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List 集合</title>
      <link href="/2020/05/15/java/collection/list/"/>
      <url>/2020/05/15/java/collection/list/</url>
      
        <content type="html"><![CDATA[<h3 id="List-集合"><a href="#List-集合" class="headerlink" title="List 集合"></a>List 集合</h3><blockquote><p>List 接口 (有序,带索引,元素可重复)，继承了 Collection 接口继承了它的方法外，它还定义了 list 集合的特性和独有方法，它的元素是 <strong><em>有序带索引且可重复</em></strong> 的，通过索引可以精确操作集合元素。所有对索引操作的方法都存在 <strong><em>角标越界</em></strong> 的错误风险。</p></blockquote><h4 id="List-重载和特有方法一览："><a href="#List-重载和特有方法一览：" class="headerlink" title="List 重载和特有方法一览："></a>List 重载和特有方法一览：</h4><table><thead><tr><th>方法</th><th>效果</th><th>返回值</th></tr></thead><tbody><tr><td>add(int,object)</td><td>指定插入</td><td>void</td></tr><tr><td>set(int,object)</td><td>修改元素</td><td>Object(泛型对象)</td></tr><tr><td>get(int)</td><td>获取元素</td><td>Object(泛型对象)</td></tr><tr><td>indexOf(object)</td><td>查找获取该元素位置</td><td>int</td></tr><tr><td>remove(int)</td><td>删除元素</td><td>被删除元素</td></tr><tr><td>subList(int,int)</td><td>取部分集合，取头不取尾</td><td>List</td></tr></tbody></table><h4 id="List-已实现类和特性："><a href="#List-已实现类和特性：" class="headerlink" title="List 已实现类和特性："></a>List 已实现类和特性：</h4><ul><li>Vector: 是长度可变的数组结构，增删改查都慢，同步(不建议使用)</li><li>ArrayList: 是长度可变的数组结构，查询速度快,增删较慢,且是不同步的</li><li>LinkedList: 是链表结构(指针)，增删快，查询较慢，不同步</li></ul><h4 id="List-的基本使用："><a href="#List-的基本使用：" class="headerlink" title="List 的基本使用："></a>List 的基本使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"><span class="comment">//指定位置插入(角标0开始)</span></span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"><span class="comment">//修改(角标0开始)</span></span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">&quot;obj0&quot;</span>);</span><br><span class="line"><span class="comment">//获取指定位置上的元素</span></span><br><span class="line">System.out.println(list.get(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//查找某元素在集合第一次出现的位置，未查找到返回-1</span></span><br><span class="line">System.out.println(list.indexOf(<span class="string">&quot;obj2&quot;</span>));</span><br><span class="line"><span class="comment">//查找某元素在集合最后次出现的位置，未查找到返回-1</span></span><br><span class="line">System.out.println(list.lastIndexOf(<span class="string">&quot;obj0&quot;</span>));</span><br><span class="line"><span class="comment">//移除指定位置上的元素</span></span><br><span class="line">list.remove(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line"><span class="comment">//取部分集合，参1开始坐标，参2长度(包含头不包含尾)</span></span><br><span class="line">List list2=list.subList(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(list2);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">obj</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">[obj0, obj2]</span><br><span class="line">[obj0, obj2, obj3]</span><br></pre></td></tr></table></figure><h4 id="在循环中修改元素："><a href="#在循环中修改元素：" class="headerlink" title="在循环中修改元素："></a>在循环中修改元素：</h4><ul><li>在 for 循环中对 list <code>remove</code> 操作时需注意元素的移动，和 size 的变化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    System.out.println(i+<span class="string">&quot;:&quot;</span>+list.get(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (list.get(i).equals(<span class="string">&quot;obj2&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//移除元素后，后元素前移。</span></span><br><span class="line">        list.remove(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">        <span class="comment">//角标需后移一位</span></span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>foreach 循环中不能使用 <code>add</code> 和 <code>remove</code> 方法，否则报错。原因请参考此文章： <a href="https://blog.csdn.net/wxxiangge/article/details/89874178?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">foreach 循环中不能用 list.remove() list.add()方法的原因分析</a></li></ul><ul><li>利用 ListIterator 动态修改元素(官方推荐)：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到当前list的迭代器，并判断是否存在下一个元素</span></span><br><span class="line"><span class="keyword">for</span> (ListIterator li=list.listIterator();li.hasNext();)&#123;</span><br><span class="line">    <span class="comment">//next返回当前元素返回，指针并指向下一元素</span></span><br><span class="line">    <span class="keyword">if</span>(li.next().equals(<span class="string">&quot;obj0&quot;</span>))&#123;</span><br><span class="line">        <span class="comment">//改变当前next返回的元素</span></span><br><span class="line">        li.set(<span class="string">&quot;obj&quot;</span>);</span><br><span class="line">        <span class="comment">//移除当前next返回的元素</span></span><br><span class="line">        li.remove();</span><br><span class="line">        <span class="comment">//在当前next返回的元素，之后添加元素</span></span><br><span class="line">        li.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意此 <strong>ListIterator</strong> 迭代器为为 list <strong>独有</strong>。</p><h4 id="LinkedList："><a href="#LinkedList：" class="headerlink" title="LinkedList："></a>LinkedList：</h4><p>此类的方法是实现模拟 <strong>堆栈</strong> 或 <strong>队列</strong> 的最好选择</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//在头部添加元素</span></span><br><span class="line">list.addFirst(<span class="string">&quot;add0&quot;</span>);</span><br><span class="line"><span class="comment">//在尾部添加元素</span></span><br><span class="line">list.addLast(<span class="string">&quot;add1&quot;</span>);</span><br><span class="line"><span class="comment">//获取头部上的元素</span></span><br><span class="line">list.getFirst();</span><br><span class="line"><span class="comment">//获取尾部上的元素</span></span><br><span class="line">list.getLast();</span><br><span class="line"><span class="comment">//移除头部上的元素并返回</span></span><br><span class="line">list.removeFirst();</span><br><span class="line"><span class="comment">//移除尾部元素并返回</span></span><br><span class="line">list.removeLast();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
            <tag> arraylist </tag>
            
            <tag> linkedlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection 集合基类</title>
      <link href="/2020/05/14/java/collection/collection/"/>
      <url>/2020/05/14/java/collection/collection/</url>
      
        <content type="html"><![CDATA[<h3 id="初识集合-Collection"><a href="#初识集合-Collection" class="headerlink" title="初识集合 Collection"></a>初识集合 Collection</h3><p>在开始之前我们先看一下<strong>集合的结构图解</strong><br><img src="/images/java/list.jpg" alt="集合结构图,图片来自网络"></p><blockquote><p>Collection 集合的顶层接口，定义了集合的特性和方法。<br>集合存储的都是对象，集合类都在 java.util 包中。</p></blockquote><h4 id="Collection-基本方法一览："><a href="#Collection-基本方法一览：" class="headerlink" title="Collection 基本方法一览："></a>Collection 基本方法一览：</h4><table><thead><tr><th>方法</th><th>效果</th><th>返回值</th></tr></thead><tbody><tr><td>add(Object)</td><td>添加(对象)方法</td><td>Boolean</td></tr><tr><td>remove(Object)</td><td>删除方法</td><td>Boolean</td></tr><tr><td>contains(Object)</td><td>是否包含某元素</td><td>Boolean</td></tr><tr><td>isEmpty()</td><td>集合是否为空</td><td>Boolean</td></tr><tr><td>size()</td><td>集合中元素个数</td><td>int</td></tr><tr><td>clear()</td><td>清除集合中所有元素</td><td>void</td></tr></tbody></table><p><strong>所有集合都有 toString()</strong> 方法，可直接使用打印方法输出在控制台上。</p><h4 id="使用实例："><a href="#使用实例：" class="headerlink" title="使用实例："></a>使用实例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个collection对象，ArrayList是它的一个子类(此时不用太多了解)</span></span><br><span class="line"><span class="type">Collection</span> <span class="variable">con</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add添加元素，不能添加基本类型元素，只能添加它们的包装类</span></span><br><span class="line">con.add(<span class="string">&quot;object1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;object3&quot;</span>);</span><br><span class="line">System.out.println(con);<span class="comment">//打印结果：[object1, object2, object3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//remove删除元素，成功返回true否则false</span></span><br><span class="line"><span class="type">boolean</span> rm=con.remove(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">System.out.println(rm+<span class="string">&quot; - &quot;</span>+con);<span class="comment">//打印结果：true - [object1, object3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//contains判断集合是否包含某元素</span></span><br><span class="line"><span class="type">boolean</span> exist=con.contains(<span class="string">&quot;object1&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> exist2=con.contains(<span class="string">&quot;object2&quot;</span>);</span><br><span class="line">System.out.println(exist+<span class="string">&quot; - &quot;</span>+exist2);<span class="comment">//打印结果：true - false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//isEmpty判断当前集合为空(没有元素)返回true，反之false</span></span><br><span class="line"><span class="type">boolean</span> empty=con.isEmpty();</span><br><span class="line">System.out.println(empty);<span class="comment">//打印结果：false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//clear清空当前集合元素</span></span><br><span class="line">con.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//size返回元素集合个数</span></span><br><span class="line"><span class="type">int</span> count=con.size();</span><br><span class="line"><span class="comment">//因为我们在上面已经把集合清空，所以打印结果为：0</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure><blockquote><p>上实例只是为了演示 collection 中的方法，ArrayList 是 collection 的子类，则 <code>Collection con = new ArrayList()</code> 是多态中的向上转型，此时我们只能使用 collection 中的方法，ArrayList 中的方法无法使用，所有现在不用关心 ArrayList 后期会详细讲解。</p></blockquote><h4 id="Collection-带-All-方法一览："><a href="#Collection-带-All-方法一览：" class="headerlink" title="Collection 带 All 方法一览："></a>Collection 带 All 方法一览：</h4><table><thead><tr><th>方法</th><th>效果</th><th>返回值</th></tr></thead><tbody><tr><td>addAll(Collection)</td><td>将某集合的元素全部添加到此集合中</td><td>boolean</td></tr><tr><td>containsAll(Collection)</td><td>此集合中是否包含另一集合中的所有元素</td><td>boolean</td></tr><tr><td>removeAll(Collection)</td><td>移除此集合中与另一集合相同的元素</td><td>boolean</td></tr><tr><td>retainAll(Collection)</td><td>此集合只保留与另一集合相同的元素</td><td>boolean</td></tr></tbody></table><h4 id="All-方法使用实例："><a href="#All-方法使用实例：" class="headerlink" title="All 方法使用实例："></a>All 方法使用实例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Collection con=<span class="keyword">new</span>  <span class="title class_">ArrayList</span>();</span><br><span class="line">con.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Collection con2=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">con2.add(<span class="string">&quot;obj4&quot;</span>);</span><br><span class="line">con2.add(<span class="string">&quot;obj5&quot;</span>);</span><br><span class="line">con2.add(<span class="string">&quot;obj6&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将con2中元素全部向con添加一遍</span></span><br><span class="line">con.addAll(con2);</span><br><span class="line">System.out.println(con);</span><br><span class="line"><span class="comment">//打印结果：[obj1, obj2, obj3, obj4, obj5, obj6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断con中是否包含con2中所有元素</span></span><br><span class="line"><span class="type">boolean</span> contain=con.containsAll(con2);</span><br><span class="line">System.out.println(contain);<span class="comment">//打印结果：true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仅保留con中与con2相同的元素</span></span><br><span class="line">con.retainAll(con2);</span><br><span class="line">System.out.println(con);<span class="comment">//打印结果：[obj4, obj5, obj6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除con中与con2相同的元素</span></span><br><span class="line">con.removeAll(con2);</span><br><span class="line">System.out.println(con+<span class="string">&quot; - &quot;</span>+con2);<span class="comment">//打印结果：[] - [obj4, obj5, obj6]</span></span><br></pre></td></tr></table></figure><h3 id="集合迭代器-Iterator"><a href="#集合迭代器-Iterator" class="headerlink" title="集合迭代器(Iterator)"></a>集合迭代器(Iterator)</h3><blockquote><p>Iterator 接口每一个集合都有实现此接口，通过它可以做到无视集合的数据结构，只判断有无元素而取出元素。它可以对任何集合做迭代通过 <strong><em>集合.iterator()</em></strong> 拿到迭代器对象，所有集合适用。</p><blockquote><p>主要方法：</p><ul><li>next 迭代元素。返回当前指向的元素，并且每次使用后指向下一个元素。当最后一个元素被迭代后再使用将报错</li><li>hasNext() 判断集合中还有无可迭代元素</li></ul></blockquote></blockquote><h4 id="常用迭代方法实例："><a href="#常用迭代方法实例：" class="headerlink" title="常用迭代方法实例："></a>常用迭代方法实例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collection con=<span class="keyword">new</span>  <span class="title class_">ArrayList</span>();</span><br><span class="line">con.add(<span class="string">&quot;obj1&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj2&quot;</span>);</span><br><span class="line">con.add(<span class="string">&quot;obj3&quot;</span>);</span><br><span class="line"><span class="comment">//获取迭代器对象</span></span><br><span class="line"><span class="keyword">for</span>(Iterator it=con.iterator();it.hasNext();)&#123;</span><br><span class="line">    System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合的一些细节"><a href="#集合的一些细节" class="headerlink" title="集合的一些细节"></a>集合的一些细节</h3><blockquote><ol><li>集合中储存的是对象的引用地址，并非对象本身</li><li>集合本不能存储基本数值类型，但 jdk1.5 以后存储基本数据类型时，内部将自动装箱处理：add(Integer.valueOf(1))</li><li>存储时为 object 类型那么取出时也为 object 类型，想使用该对象方法需要向下转型(也可以通过泛型方式，去除此过程)</li><li>一般集合中判断元素对象是否相等是调用了 equals 方法，而 object 的 equals 方法是默认比较<strong>地址是否相等</strong>。如需使用到会比较对象是否相等(重复)的方法，请<strong>重写 equals 方法</strong></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> collection </tag>
            
            <tag> 迭代器 </tag>
            
            <tag> iterator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2020/05/14/interest/MarkDown/"/>
      <url>/2020/05/14/interest/MarkDown/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="1-字体-包裹的符号都是可以嵌套使用的-："><a href="#1-字体-包裹的符号都是可以嵌套使用的-：" class="headerlink" title="1. 字体(包裹的符号都是可以嵌套使用的)："></a>1. <strong>字体</strong>(包裹的符号都是可以嵌套使用的)：</h2></blockquote><h4 id="写法："><a href="#写法：" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*斜体* || _斜体_</span><br><span class="line">**加粗** </span><br><span class="line">***加粗斜体***</span><br><span class="line">~~中划线~~ </span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="line">分割线(需要独占一行)：</span><br><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="显示结果如下："><a href="#显示结果如下：" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><h2 id="斜体-斜体加粗加粗斜体中划线下划线分割线-需要独占一行-："><a href="#斜体-斜体加粗加粗斜体中划线下划线分割线-需要独占一行-：" class="headerlink" title="斜体 || 斜体加粗加粗斜体中划线下划线分割线(需要独占一行)：***"></a><em>斜体</em> || <em>斜体</em><br><strong>加粗</strong><br><em><strong>加粗斜体</strong></em><br><del>中划线</del><br><u>下划线</u><br>分割线(需要独占一行)：<br>***</h2><blockquote><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2. 标题："></a>2. 标题：</h2></blockquote><h4 id="写法：-1"><a href="#写法：-1" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 标题一</span><br><span class="line">## 标题二</span><br><span class="line">### 标题三(最多六级标题)</span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-1"><a href="#显示结果如下：-1" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2><h3 id="标题三-最多六级标题"><a href="#标题三-最多六级标题" class="headerlink" title="标题三(最多六级标题)"></a>标题三(最多六级标题)</h3><blockquote><h2 id="3-超链接："><a href="#3-超链接：" class="headerlink" title="3. 超链接："></a>3. 超链接：</h2></blockquote><h4 id="写法：-2"><a href="#写法：-2" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[显示文字](目标链接)</span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-2"><a href="#显示结果如下：-2" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p><a href="%E7%9B%AE%E6%A0%87%E9%93%BE%E6%8E%A5">显示文字</a></p><blockquote><h2 id="4-列表-星号前每多两个空格级数增一-："><a href="#4-列表-星号前每多两个空格级数增一-：" class="headerlink" title="4. 列表(星号前每多两个空格级数增一)："></a>4. 列表(星号前每多两个空格级数增一)：</h2></blockquote><h4 id="写法：-3"><a href="#写法：-3" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表(-,+号也同效果)</span><br><span class="line">  * 二级无序列表</span><br><span class="line">    * 三级无序列表</span><br><span class="line">    <span class="number">1.</span> 有序列表</span><br><span class="line">- [ ] 任务列表</span><br><span class="line">- [x] 选中列表 </span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-3"><a href="#显示结果如下：-3" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><ul><li>一级无序列表(-,+号也同效果)<ul><li>二级无序列表<ul><li>三级无序列表</li></ul><ol><li>有序列表</li></ol></li></ul></li></ul><ul><li><input disabled="" type="checkbox"> 任务列表</li><li><input checked="" disabled="" type="checkbox"> 选中列表</li></ul><blockquote><h2 id="5-引用："><a href="#5-引用：" class="headerlink" title="5. 引用："></a>5. 引用：</h2></blockquote><h4 id="写法：-4"><a href="#写法：-4" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用 (级数无限制)</span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-4"><a href="#显示结果如下：-4" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><blockquote><p>一级引用</p><blockquote><p>二级引用 (级数无限制)</p></blockquote></blockquote><blockquote><h2 id="6-插入图片："><a href="#6-插入图片：" class="headerlink" title="6. 插入图片："></a>6. 插入图片：</h2></blockquote><h4 id="写法：-5"><a href="#写法：-5" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![文字说明](图片链接||路径)</span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-5"><a href="#显示结果如下：-5" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p><img src="/%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5%7C%7C%E8%B7%AF%E5%BE%84" alt="文字说明"></p><blockquote><h2 id="7-标注："><a href="#7-标注：" class="headerlink" title="7. 标注："></a>7. 标注：</h2></blockquote><h4 id="写法：-6"><a href="#写法：-6" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">标注[^<span class="number">1</span>]</span><br><span class="line">[^<span class="number">1</span>]:注释语句(会在文章末尾显示)</span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-6"><a href="#显示结果如下：-6" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><p>标注[^1]<br>[^1]:注释语句(会在文章末尾显示)</p><blockquote><h2 id="8-表格-上必须空一行，-和-来区分头和文本对齐方式-："><a href="#8-表格-上必须空一行，-和-来区分头和文本对齐方式-：" class="headerlink" title="8. 表格(上必须空一行，-和:来区分头和文本对齐方式)："></a>8. 表格(上必须空一行，-和:来区分头和文本对齐方式)：</h2></blockquote><h4 id="写法：-7"><a href="#写法：-7" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| <span class="number">0</span>,<span class="number">1</span>        |  <span class="number">0</span>,<span class="number">2</span>  |  <span class="number">0</span>,<span class="number">3</span> |</span><br><span class="line">| :--------- | :---: | ---: |</span><br><span class="line">| 靠左(默认) | 居中  | 靠右 |</span><br><span class="line"><span class="comment">//&#x27;-&#x27;多少与样式无关</span></span><br></pre></td></tr></table></figure><h4 id="显示结果如下：-7"><a href="#显示结果如下：-7" class="headerlink" title="显示结果如下："></a>显示结果如下：</h4><table><thead><tr><th align="left">0,1</th><th align="center">0,2</th><th align="right">0,3</th></tr></thead><tbody><tr><td align="left">靠左(默认)</td><td align="center">居中</td><td align="right">靠右</td></tr></tbody></table><blockquote><h2 id="9-代码块："><a href="#9-代码块：" class="headerlink" title="9. 代码块："></a>9. 代码块：</h2></blockquote><h4 id="写法：-8"><a href="#写法：-8" class="headerlink" title="写法："></a>写法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```在表明语言</span><br><span class="line"><span class="comment">// 代码块，存放代码</span></span><br></pre></td></tr></table></figure><pre><code>`只有一句的代码`</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 显示结果如下：</span><br><span class="line">​```在表明语言</span><br><span class="line">// 代码块，存放代码</span><br></pre></td></tr></table></figure><p><code>只有一句的代码</code></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
